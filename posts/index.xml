<?xml-stylesheet type="text/xsl" href="#stylesheet"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><xsl:stylesheet id="stylesheet" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" exclude-result-prefixes="xsl"><xsl:output method="html" doctype-system="about:legacy-compat"/><xsl:template match="/rss"><html lang="ru-ru"><head><meta name="viewport" content="width=device-width, initial-scale=1.0"/><title>Posts RSS | vanadium23</title><link rel="stylesheet" href="https://vanadium23.me/css/base.min.ede35a5a6f0822c8ed4e62a02aaaead5a369281f08df87a8547512ed5449222f.css" integrity="sha256-7eNaWm8IIsjtTmKgKqrq1aNpKB8I34eoVHUS7VRJIi8="/></head><body><nav class="u-background"><div class="u-wrapper Banner"><a class="Banner-link u-clickable" href="https://vanadium23.me/">
vanadium23</a><ul class="Banner"><li class="Banner-item"><a class="Banner-link u-clickable" href="https://vanadium23.me/about/">About</a></li class="Banner-item"><li class="Banner-item"><a class="Banner-link u-clickable" href="https://vanadium23.me/tags/">Tags</a></li class="Banner-item"><li><a id="themeSwitch" class="theme-switcher"/></li></ul></div></nav><main><div class="u-wrapper"><div class="u-padding"><h2 class="Heading-title"><a class="Heading-link u-clickable" href="https://vanadium23.me/posts/index.xml" rel="bookmark">Posts RSS</a></h2></div></div></main><footer class="Footer"><div class="u-wrapper"><div class="u-padding"><a href="https://github.com/vanadium23"><i class="svg-icon github"/></a><a href="https://www.linkedin.com/in/vanadium23"><i class="svg-icon linkedin"/></a><a href="https://www.twitter.com/vanadium23"><i class="svg-icon twitter"/></a><a href="http://stackoverflow.com/users/4809450/vanadium23"><i class="svg-icon stackoverflow"/></a><a href="https://www.codewars.com/users/vanadium23"><i class="svg-icon codewars"/></a><a href="https://goodreads.com/vanadium23"><i class="svg-icon goodreads"/></a><a href="https://t.me/chernov_sharit"><i class="svg-icon telegram"/></a></div></div></footer></body></html></xsl:template></xsl:stylesheet><channel><title>Posts on vanadium23</title><link>https://vanadium23.me/posts/</link><description>Recent content in Posts on vanadium23</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Sun, 26 Mar 2023 09:00:00 +0300</lastBuildDate><atom:link href="https://vanadium23.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Дневники экспериментов</title><link>https://vanadium23.me/experiment-journals/</link><pubDate>Sun, 26 Mar 2023 09:00:00 +0300</pubDate><guid>https://vanadium23.me/experiment-journals/</guid><description>&lt;blockquote>
&lt;p>&amp;ldquo;в нашем мире не всё и всегда, а по чуть-чуть и иногда&amp;rdquo; (с) Путь Джедая&lt;/p>
&lt;/blockquote>
&lt;p>В блоге уже была статья про то, что [[2020-09-27-adapt-process|подходы требуют адапатации под себя]]. Теперь у меня набрался практический опыт рассказать как это можно делать.&lt;/p>
&lt;h2 id="описание">Описание&lt;/h2>
&lt;p>Подход прямолинеен - ведение дневников. Можно вести дневник проекта, можно вести дневник эмоций, а вот у меня прижились ещё дневники экспериментов. Слово эксперимент выбрано для того, чтобы можно было ошибиться и не переживать на этот счёт. В этом главное различие с дневником проекта - у проекта мы стремимся достичь результата с помощью последовательного приближения, в экспериментах - мы будем брать чужие подходы, следовать и делать выводы применимы они или нет.&lt;/p>
&lt;p>Я использую следующий шаблон в obsidian:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span># Название
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start_date::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>due_date::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>finish_date::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## Желаемый результат
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### Факт
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## Прохождение
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### &amp;lt;день/неделя/месяц&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## Задачи
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ценность из себя представляет первые три пункта:&lt;/p>
&lt;ul>
&lt;li>в желаемой результате мы фиксируем в самом начале к чему бы нам хотелось придти или какой результат нам обещают&lt;/li>
&lt;li>в факте по результату мы напишем реальные ожидания&lt;/li>
&lt;li>в прохождение - собственно, ведётся дневник на какой-то регулярной основе. Необязательно делать ежедневно, если эксперимент довольно длинный.&lt;/li>
&lt;/ul>
&lt;p>При планировании стоит ещё лимитировать походы по времени. То есть эксперимент на год вряд ли можно назвать экспериментом, скорее целью. У меня пока верхний предел был в полгода, но в реальности в интервале от 2 недель до 3 месяцев можно сделать для себя практические выводы.&lt;/p>
&lt;p>Таким образом мы форсируем два важных навыка: самонаблюдение и рефлексию. В случае самонаблюдения мы не можем полагаться только на нашу память, так как есть склонность приукрашать или менять действительно. А с рефлексией всё сложнее, когда она происходит в голове. Чтобы такого не было, необходимо выносить мышление в текст и спорить с самим собой пять минут назад.&lt;/p>
&lt;h2 id="примеры">Примеры&lt;/h2>
&lt;p>Сразу покажу, что больше половины не получалось, а то в статьях принято писать об успешном успехе.
![[Pasted image 20230407112410.png]]&lt;/p>
&lt;h3 id="пример-с-объединением-задач-и-заметок">Пример с объединением задач и заметок&lt;/h3>
&lt;p>Мой любимый пример - это переезд задач в заметки. Если пойти на сторонние ресурсы (даже тот же путь Джедая от Дорофеева), то будет написано не смешивать &lt;a href="https://www.youtube.com/watch?v=Kd0GLCSYVDc">справочную информацию&lt;/a> и простой список задач. Меня эта мысль не устраивала, и было сделано три захода на совмещения.&lt;/p>
&lt;p>Результаты из 2020 года, где я ещё не фиксировал для себя что хочу получить:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>Результаты:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Это оказалось не настолько плохо, как могло бы быть.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Очень не хватало автодополнения по проектам и прочему.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Нужно много внимания уделять синтаксису строки.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Это попытка сделать базу в текстовом файле, хотя там есть понятные столбцы: дата создания, дата зашедуленого, дата дедлайна и так далее.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Общий итог: можно жить, но не так удобно как могло бы быть.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Прикольно вести дневничок!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Вернулся на Todoist и оплатил годовую подписку (40$).
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Что потом перетекло в перенос физического ежедневника в электронный с помощью obsidian и плагина calendar.&lt;/p>
&lt;p>А это уже за прошлый год:
![[Pasted image 20230408114111.png]]&lt;/p>
&lt;p>Чуть больше деталей по успеху, и какое-то замечание что было бы прикольно добавить. Например, start_date (точнее created date) в obsidian завезли около месяца назад.&lt;/p>
&lt;h2 id="выводы">Выводы&lt;/h2>
&lt;ol>
&lt;li>Если вдруг что-то не получалось с первого раза, ничего страшного можно пробовать ещё раз, но с учётом предыдущего опыта.&lt;/li>
&lt;li>Для того, чтобы закрепить опыт и с большей вероятностью осмыслить, если лучше записать и обработать.&lt;/li>
&lt;li>Не бойтесь пробовать новое в экспериментальном режиме.&lt;/li>
&lt;/ol></description></item><item><title>Building a Second Brain</title><link>https://vanadium23.me/building-a-second-brain/</link><pubDate>Sun, 12 Feb 2023 10:00:00 +0300</pubDate><guid>https://vanadium23.me/building-a-second-brain/</guid><description>&lt;p>Несколько лет назад была написана статья про &lt;a href="https://vanadium23.me/para/">para&lt;/a>. С того момента прошло уже 4 года, и Тиаго Форте решил порадовать своей книгой про подход &amp;ldquo;building a second brain&amp;rdquo;. Пробежав по главам, понял что не хочу её читать, так как они содержали все известные статьи из блога. Это было ошибкой. Ведь свои подходы надо итерировать.&lt;/p>
&lt;!-- more -->
&lt;p>Начнём с того, что building a second brain - это методология по ведению персональной базы знаний. Она включает в себя приёмы по организации и обработке информации. В результате накопленный опыт аккумулируется в ней в виде отдельных промежуточных блоков / &lt;em>intermediate packets&lt;/em>. Эти блоки можно комбинировать как лего для новых проектов, чтобы не начинать с чистого листа&lt;/p>
&lt;p>Основной подхода служит принцип &lt;strong>CODE&lt;/strong>. Это акроним от первых букв слов: Capture, Organise, Distil и Exctract. Под капотом этот принцип использует подходы дивергентного и конвергентного мышления. В рамках дивергентного состояния надо быть открытым ко всему и не критиковать себя. А вот на конвергентной стадии надо собирать полученные знания в непротиворечивую модель.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020230211134034.png" alt="CODE diagram">&lt;/p>
&lt;h2 id="capture">Capture&lt;/h2>
&lt;p>Творческий процесс заключается не только в создание нового, но и в грамотном синтезе доступных знаний. Чтобы их не терять, стоит настроить приложения и интегрировать их с заметками:&lt;/p>
&lt;ul>
&lt;li>для чтения статей: getpocket, instapaper, wallabag;&lt;/li>
&lt;li>для чтения книг: kindle, koreader;&lt;/li>
&lt;li>для сохранения отдельных цитат: zotero, readwise;&lt;/li>
&lt;/ul>
&lt;p>Но приложения - это самая простая часть данного этапа.&lt;/p>
&lt;p>Основная сложность заключается в том, &lt;strong>что&lt;/strong> сохранять. Здесь могут быть две потенциальные проблемы: сохраняем всё подряд или не сохраняем ничего. Ответ автора на этот вопрос заключается в том, чтобы сохранять всё, что резонирует. Так как мы не очень понимаем, что нам понадобиться в дальнейшем. Момент с резонансом здесь самый тонкий. С одной стороны, интуиция человека выдаёт быстрое и, как правило, верное решение на основании поверхностного изучения. С другой стороны, можно &lt;a href="https://vanadium23.me/openbox/ne-bud-plyushkinym/">стать Плюшкиным&lt;/a>.&lt;/p>
&lt;h2 id="organize">Organize&lt;/h2>
&lt;p>Сохраняя большое количество информации нужно понимать, как они в итоге попадут в заметке. И здесь мы возвращаемся к подходу PARA. PARA &lt;em>опять&lt;/em> является акронимом от первых букв: Projects, Areas, Resources и Archive. Это название корневых директорий во всех инструментах, которыми вы пользуетесь будь это заметки, облачное хранилище или папки на компьютере.&lt;/p>
&lt;p>Из блога мне не хватило аналогий для понимания значения метода. Суть не только в том, чтобы информация лежала единообразно или что мы разделяем проекты от ресурсов. А в том, что мы сортируем контент по его применимости/actionability. Мы можем провести аналогию с кухней: запасы идут в погреб (Archive), то что будет нужно в течение полугода в морозилке (Resources), чуть более востребованное в холодильнике (Areas), а то к чему возвращаемся несколько раз в день непосредственно на столе (Projects). Продолжая аналогию, мы размещаем картинки дизайна квартир с пинтерест в Resources, так как сейчас никакого ремонта нет. А вот статья про налаживание сна у младенца нам пригодится в рамках проекта первого года жизни ребёнка.&lt;/p>
&lt;h2 id="distill">Distill&lt;/h2>
&lt;p>Для эффективного использования накопленных заметок необходимо их осмыслить. Это можно делать с помощью составления выдержек. Подходом автора для решения этой задачи является метод &amp;ldquo;прогрессивная суммаризация&amp;rdquo;. По названию и возможно сути перекликается с &lt;a href="https://www.artlebedev.ru/kovodstvo/sections/167/">прогрессивным jpeg&amp;rsquo;ом&lt;/a>.&lt;/p>
&lt;p>При прочтении статьи мы выделяем 3-5 абзацев, которые считаем наиболее важными. Потом в них мы выделяем предложения, которые являются важными. А потом мы составляем выдержку по тому, что выделили. Таким образом статью мы сможем вспомнить за несколько предложений, но ещё и пройтись по пути обратно, если нам нужно будет докопаться до сути. Эта идея перекликается из другой недавно прочтённой книгой Ackoff&amp;rsquo;s best, где были проведены исследования что &lt;a href="https://vanadium23.me/openbox/quotes/202302011212/">любой материал можно сократить в 3 раза&lt;/a>.&lt;/p>
&lt;p>Самое интересное, что автор показывал пример со статьёй из wikipedia. Что помогает понять, что таким образом можно держать и те статьи, что всегда доступны в интернете. Делается это для того, чтобы быстро вспомнить о чём речь.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Screen%20Shot%202023-02-12%20at%2011.29.33.png" alt="Пример wiki статьи">&lt;/p>
&lt;h2 id="express">Express&lt;/h2>
&lt;p>Полученные выдержки, мы можем начинать использовать в своих проектах. Это помогает избежать проблемы чистого листа. Стартуя новый проект, мы можем пробежаться по ключевым заметкам в ресурсах и соединить те, которые представляют интерес. Данный подход называется &lt;strong>архипелаг идей&lt;/strong>.&lt;/p>
&lt;p>Если после начального освящения, трудности с первым шагом, то можно не прыгать сразу к результату. Любой проект - это путь, где следующий шаг может быть очевидным, а фактический результат сильно расходится от запланированного. Главное оставлять себе хлебные крошки к следующему шагу: написали структуру поста &amp;ndash;&amp;gt; оставьте вопросы, которые хотелось бы осветить. Этот подход называется &lt;strong>Hemingway bridge&lt;/strong>.&lt;/p>
&lt;p>Проект выходит из под контроля - &lt;a href="https://bureau.ru/about/fff/">флексим&lt;/a>. В книге подход с уменьшением размера проекта назван &lt;strong>dial down&lt;/strong>. Но в прочтении от бюро Горбунова он выглядит более цельным, поэтому тут только порекомендую ознакомиться ссылкой.&lt;/p>
&lt;p>Но эти все подходы направлены на использование информации в проектах, в то время как основные знания мы получаем по их завершению. И тут building a second brain начинает работать. По завершению проекта мы должны провести его ревью. В связанных заметках, встречах и остальных материалах появиться новое знание, которое будет полезно для нас в будущем.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Screen%20Shot%202023-02-12%20at%2011.38.18.png" alt="Knowledge cycle">&lt;/p>
&lt;p>И эти обезличеные знания то, чем стоит делиться. Каждый человек - уникален и второго такого с такими же знаниями и опытом нет. Поэтому надо приходить в локальные сообщества и показывать результат своих мыслей. Ведь любой человек нуждается в самореализации.&lt;/p>
&lt;h2 id="что-поменялось-в-моих-подходах-после-прочтения">Что поменялось в моих подходах после прочтения?&lt;/h2>
&lt;p>После двух лет использования PARA, произошла реорганизация заметок. Ёкнуло у меня в тот момент, когда увидел репозиторий &lt;a href="https://github.com/uwidev/life-disciplines-projects">Life-Disciplines-Projects&lt;/a>. Это был уже третий подход в рамках obsidian, и пришло осознание, что не важно что ты используешь, гораздо важнее чтобы было самому удобнее. Сейчас корневые директории в своих заметках держу такие: Actions, Journal, Life, Knowledge, Trash. И для внешнего взгляда они &lt;em>наверное&lt;/em> ничего не значат. Но из книги увидел, что организация пошла точно так же по степени востребованности.&lt;/p>
&lt;p>Буду перерабатывать подходы к составлению заметок из статей. Сейчас они разбиваются на цитаты, а надо бы собирать их в одну атомарную заметку. Но дальше начинается вопрос переиспользовать ли этот подход для книг, и тут уже начинают плавать. В любом случае, прогрессивную суммаризацию точно стоит провести в виде эксперимента и адаптировать.&lt;/p>
&lt;p>По результатам мне хотелось бы уже переключиться на свои заметки вместо гугл поиска. Кстати, люди делали такой эксперимент и оно работает. Подробнее почитать можно &lt;a href="https://thesephist.com/posts/monocle/">тут&lt;/a>.&lt;/p>
&lt;h2 id="чеклист-внедрения-из-книги">Чеклист внедрения из книги&lt;/h2>
&lt;ol>
&lt;li>Выбрать для чего мы хотим вести заметки.&lt;/li>
&lt;li>Выбрать приложение для ведения заметок и остаться с ним на полгода.&lt;/li>
&lt;li>Выбрать приложение для сохранения статей.&lt;/li>
&lt;li>Сделать себе структуру папок с помощью PARA.&lt;/li>
&lt;li>Составить список открытых больших вопросов, с помощью которых можно будет фильтровать весь входящий контент.&lt;/li>
&lt;li>Настроить автоматическую синхронизацию заметок из книг в заметки.&lt;/li>
&lt;li>Практиковать progressive summarization на статьях из пункта 3.&lt;/li>
&lt;li>Начать писать атомарные заметки для себя в будущем.&lt;/li>
&lt;li>Начать использовать свои заметки на одном из проектов.&lt;/li>
&lt;li>Поставить себе еженедельное ревью с двумя шагами: просмотреть заметки за неделю и составить следующие шаги по проекту.&lt;/li>
&lt;li>Присоединиться к локальным сообществам по ведению заметок, чтобы находить новые идеи.
&lt;ul>
&lt;li>В русскоязычном телеграмме могу рекомендовать &lt;a href="https://t.me/Zettelkasten_ru/1">чат Zettelkasten&lt;/a> и &lt;a href="https://zttl.space/">их форум&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Advent of Code 2022</title><link>https://vanadium23.me/advent-of-code-2022/</link><pubDate>Sun, 25 Dec 2022 10:00:00 +0300</pubDate><guid>https://vanadium23.me/advent-of-code-2022/</guid><description>&lt;p>С подачи &lt;a href="https://twitter.com/webholt/">webholt&lt;/a> решил поучаствовать в Advent of Code. О мероприятие знал последние 2-3 года, но не доходил порешать задачи в момент проведения. При этом загадки можно решать и постфактум, что не так интересно как в момент проведения соревнований. Это не первые головомки, в которые меня затягивало, в 2017 году мы с Владом уже игрались в CodeWars. А где-то под конец 2020 меня увлекли задачи с leetcode.&lt;/p>
&lt;!-- more -->
&lt;p>&lt;strong>TL;DR:&lt;/strong> хорошее отвлечение мозгов от задачек на перекладывание json&amp;rsquo;ов.&lt;/p>
&lt;p>Начнём с приватного дашборда, так как в общем зачёте у нас по нулям:
&lt;img src="https://vanadium23.me/images/20221225182832.png" alt="Финальные результаты">&lt;/p>
&lt;p>Advent of code выделяется среди них следующими пунктами:&lt;/p>
&lt;ol>
&lt;li>Исходя из названия, используется структура &lt;a href="https://en.wikipedia.org/wiki/Advent_calendar">advent календаря&lt;/a>. Задачка появляется каждый день утром.&lt;/li>
&lt;li>Для задачек есть одна сквозная история, как оказалось с пасхалками.&lt;/li>
&lt;li>Все задачки деляться на две части, где вторая часть является усложнением первой.&lt;/li>
&lt;li>Для задачек даётся один тестовый пример для отладки и одни входные данные, которые необходимо решить.&lt;/li>
&lt;li>В качестве результата получается число. Ни программа, ни её оптимальности никого не интересует.&lt;/li>
&lt;li>Для соревнований используется время: первые 100 получают от 1 до 100 баллов в общем зачёте. Но можно участвовать и в приватных соревнованиях, так как уровень олимпиадников в общем зачёте &lt;del>удручает&lt;/del> вдохновляет.&lt;/li>
&lt;/ol>
&lt;p>Пункты 4 и 5 и отделяет advent of code от остальных площадок. Тебе не нужно задумываться о том, чтобы программа работала всегда. Нужно только чтобы работала на твоих данных. Минимум один раз в этом году, &lt;em>большинство&lt;/em> (судя по &lt;a href="https://www.reddit.com/r/adventofcode/comments/zsct8w/2022_day_22_solutions/">реддиту&lt;/a>) участников прибегли к &lt;strong>очень&lt;/strong> большому хардкоду.&lt;/p>
&lt;p>Не знаю, было ли так задумано автором головоломок, но общий тренд от задачек такой:&lt;/p>
&lt;ul>
&lt;li>первую неделю - полторы задачи, над которыми особо раздумывать не надо.&lt;/li>
&lt;li>где-то под конец второй недели начинаются знания алгоритмов, но тупой реализации достаточно.&lt;/li>
&lt;li>третья неделя - американские горки между простыми и задачами, где брутфорс перестаёт работать.&lt;/li>
&lt;li>четвертая неделя - пара сложных задачек, как комбинация предыдущих, и задачки на посошок.&lt;/li>
&lt;/ul>
&lt;p>Все задачки для меня упали в следующие категории:&lt;/p>
&lt;ol>
&lt;li>задачки на &amp;ldquo;пописать код&amp;rdquo;: никаких дополнительных знаний не нужно.&lt;/li>
&lt;li>задачки на поиск граф: волновой алгоритм, Дейкстра, A*.&lt;/li>
&lt;li>задачки на симуляцию: пописать код, но с поиском краевых кейсов и ошибок на 1 из-за нулевых индексов.&lt;/li>
&lt;li>задачки на математику: просто пописать не получится, надо понять какие кейсы заранее не валидны.&lt;/li>
&lt;li>задачки на поиск решений, как комбинация трёх предыдущих задач, надо построить граф по симуляции или симуляция по графу и понять как по нему оптимально бегать.&lt;/li>
&lt;/ol>
&lt;p>На последних задачах похоже срезалось большинство участников, а мне сильно помог внутренний чатик, где мы обсуждали кто как изголялся. Если хочется попасть сразу на них, то стоит глянуть дни &lt;a href="https://adventofcode.com/2022/day/16">16&lt;/a>, и &lt;a href="https://adventofcode.com/2022/day/19">19&lt;/a> как её усложнение.&lt;/p>
&lt;p>Так как все шли с разным темпам, переписка тоже превратилась в новогоднюю ёлку:
&lt;img src="https://vanadium23.me/images/20221225185715.png" alt="">&lt;/p>
&lt;p>После решения задачи не менее интересно идти читать чужие решения или смотреть визуализации с мемами. В первую очередь, конечно, мемы.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/20221225190426.png" alt="Ох уж эта рекурсия">&lt;/p>
&lt;p>Перед собой ставил задачу в этом году завершить 18 задач, так как посмотрел 20+ задачки из прошлых годов. Остался доволен, что получилось пройти всё. Большое спасибо скажем нарастающей сложности задач. Причём самые сложными оказались совсем не последние задачи.&lt;/p>
&lt;p>Собственный рейтинг наиболее сложных задач:&lt;/p>
&lt;ol>
&lt;li>Симуляция пути на кубике в &lt;a href="https://adventofcode.com/2022/day/22">22 дне&lt;/a>&lt;/li>
&lt;li>Симуляция ресурсов а ля RTS в &lt;a href="https://adventofcode.com/2022/day/19">19 дне&lt;/a>&lt;/li>
&lt;li>Симуляция двух коммивояжеров на графе в &lt;a href="https://adventofcode.com/2022/day/16">16 дне&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Поставил себе на начало следующего года ещё немного порешать на leetcode задачи на графы, так как увидел свои пробелы. А так же, что граф решений - это все ещё граф. (:&lt;/p></description></item><item><title>Вишлист на Д.Р. 2022</title><link>https://vanadium23.me/wishlist-2022/</link><pubDate>Sat, 10 Sep 2022 15:00:00 +0300</pubDate><guid>https://vanadium23.me/wishlist-2022/</guid><description>&lt;h2 id="wishlist-2022">Wishlist 2022&lt;/h2>
&lt;ol>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://www.ozon.ru/product/podushka-dlya-vanny-podushka-podgolovnik-dlya-vannoy-na-prisoskah-podushka-v-vannuyu-278217351/">Подушка для ванной&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://www.samura.ru/catalog/universalnyy_nozh/">Нож Samura любой&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://gadgetchef.ru/catalog/doski/8044/?oid=10977">Большую кулинарную доску&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://www.deadbrush.ru/catalog/games/homm3/">Маечки из героев (stronghold, inferno)&lt;/a> &lt;em>размер S&lt;/em>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://www.amazon.com/Balcony-Chic-architectural-Ukraines-balconies/dp/9665008307">Книга про киевские балконы&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://www.ozon.ru/product/igrovoy-kovrik-dlya-myshi-kovrik-dlya-myshi-razer-xxl-seryy-446225127/">Большой коврик под мышку&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="старое-доброе">Старое доброе&lt;/h3>
&lt;ol>
&lt;li>Настолки
&lt;ol>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://hobbyworld.ru/kosmicheskij-kontakt">Космический контакт&lt;/a>&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;a href="https://hobbyworld.ru/holst">Холст&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Steam
&lt;ol>
&lt;li>&lt;a href="https://store.steampowered.com/wishlist/id/chernoffivan/#sort=order">https://store.steampowered.com/wishlist/id/chernoffivan/#sort=order&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>Обработка входящей информации</title><link>https://vanadium23.me/superset-inbox/</link><pubDate>Sat, 22 Jan 2022 10:00:00 +0300</pubDate><guid>https://vanadium23.me/superset-inbox/</guid><description>&lt;blockquote>
&lt;p>Горе от ума&lt;/p>
&lt;/blockquote>
&lt;p>Эта заметка является продолжением трёх статей: &lt;a href="https://vanadium23.me/keep-pocket-clean/">чтение статей&lt;/a>, &lt;a href="https://vanadium23.me/active-reading/">чтения книг&lt;/a> и &lt;a href="https://vanadium23.me/jedi-book-experiments/">заметок по джедайским техникам&lt;/a>. Всё свелось к организации входящих и ритуалов вокруг них.&lt;/p>
&lt;!-- more -->
&lt;p>Общий алгоритм сводится к следующим шагам:&lt;/p>
&lt;ol>
&lt;li>Организовать место для сбора определённого медиа: статьи - Wallabag, книги - calibre.&lt;/li>
&lt;li>Разбирать его на регулярной основе и удалять всё старое раз в какой-то период.&lt;/li>
&lt;li>Собирать из разобранного цитаты, которые меня заставляют задуматься, в виде цитат в Obsidian.&lt;/li>
&lt;li>Разбирать цитаты и писать что-то своё на основе них.&lt;/li>
&lt;/ol>
&lt;p>Подход назвал &amp;ldquo;read - distill - read - write&amp;rdquo;, потому что он сводится к последовательному свёртыванию информации из окружения. Плюсом можно выделить то, что бегать по спектру можно в две стороны: как от самого ценного в виде одной строчки так к набору референсов откуда эта мысль появилась. Технология не новая и была описана, как в рамках &lt;a href="https://zettelkasten.de/posts/knowledge-cycle-efficiently-organize-writing-projects/">Zettelkasten&lt;/a>, так и &lt;a href="https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/">Progressive Summarization&lt;/a>.&lt;/p>
&lt;p>В рамках этого подхода есть две сложности: одна заключается в привычках, вторая - в накопительстве. Работа с входящими предполагает наличия только одного места, куда мы смотрим для следующего дела, а здесь получается их несколько. Проблем в этом нет, так как основным местом должен быть таск трекер. Работу с другими входящими можно организовать через неё. А вот как организовать борьбу с накопительством неизвестно. Пока мой ответ заключается в том, что необходимо раз в полгода-год выбрасывать весь необработанный состав. Если он не пригодился в течении полугода, значит либо не пригодится никода, либо всплывёт ещё раз.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/20220122103246.png" alt="Knowledge workflow">&lt;/p>
&lt;p>Стоит отдельно остановиться на книгах. Для них нет удобной программы для чтения: google play/kindle хранят заметки в проприетарном формате и выкачивают их в своё облако, calibre имеет очень медленную web читалку и в случае нескольких устройств может криво синхронизировать состояния заметок/прочтения. Итого после борьбы calibre осталась в качестве библиотеки и OPDS, а вот само чтение от него не зависит. На планшете появился Obsidian и цитаты копируются из книжки сразу в него. Этим мы получаем два плюса. Первое, они сразу хранятся в нужном формате, хотя форматирование может потеряться. Второе, не зависит от места или формата книги - работает даже с бумажными.&lt;/p>
&lt;p>Ответ на вопрос зачем остаётся на усмотрение читателя.&lt;/p></description></item><item><title>Выдержка из книги "Book of Why"</title><link>https://vanadium23.me/book-of-why/</link><pubDate>Sat, 15 Jan 2022 15:00:00 +0300</pubDate><guid>https://vanadium23.me/book-of-why/</guid><description>&lt;blockquote>
&lt;p>Mind over Data&lt;/p>
&lt;/blockquote>
&lt;!-- more -->
&lt;p>Книга рассказывает о революции в научном методе. Она случилась благодаря простым диаграммам причинно-следственной связи в стиле точек и стрелочек. Это напрямую противоречит концепции &amp;ldquo;correlation doesn’t imply causation&amp;rdquo;, которая доминировала с конца 19 века. Основной ответ статистиков на это было, что корреляцию можно прослеживать только на значимых переменных. Как определить значимость переменной - непонятно. На этот вопрос есть два решения: do-нотация и counterfactuals. Работа с этими вещами происходит ровно на этих самых диаграммах.&lt;/p>
&lt;p>Прежде, чем переходить непосредственно к диаграммам причинности необходимо заглянуть в процесс &amp;ldquo;а как мы делаем выводы&amp;rdquo;. Для этого можно ввести машинку выводов/inference machine. Она состоит из трёх вводных: допущения/assumptions, запрос/query и данные/дата. Сначала мы должны решить можно ли в принципе ответить на запрос. Дальше мы конструируем рецепт/estimand для генерации ответа. И с помощью этого рецепта добавляя к нему &lt;del>ингридиенты&lt;/del> данные мы можем дать ответ, и то приблизительный.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020220115183400.png" alt="">&lt;/p>
&lt;p>Разумные существа (и AI) могут понимать работу с причинами и следствиями (Casual model) на трёх разных уровнях. Это модель называется ladder of casuality:&lt;/p>
&lt;ol>
&lt;li>Seeing / Association - делаем выводы на основе данных, которые у нас есть.&lt;/li>
&lt;li>Doing / Intervention - выполняем действие для перехода в требуемое состояния.&lt;/li>
&lt;li>Imagining / Counterfactuals - представляем себе воображаемые миры для того, чтобы понять причину событий. Собственно, воображаемый аргумент - это и есть то что называют контрфактуалом/conterfactuals.&lt;/li>
&lt;/ol>
&lt;p>Самая первая диаграмма связей причины и следствия к исследованию окраса у морских свинок. Проблема была в игнорировании законов Грегоря Менделя при наследовании цвета окраса. В результате была выдвинута гипотеза о влиянии внешней среды на цвет. Для оценки влияния среды был проведён эксперимент, где в контрольной среде свинки оставили окраску своего родителя только в 3% случаях.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020220115184640.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>Sewall Wright’s first path diagram, illustrating the factors leading to coat color in guinea pigs. &lt;em>D&lt;/em> = developmental factors (after conception, before birth), &lt;em>E&lt;/em> = environmental factors (after birth), &lt;em>G&lt;/em> = genetic factors from each individual parent, &lt;em>H&lt;/em> = combined hereditary factors from both parents, &lt;em>O&lt;/em>, _O_ʹ = offspring. The objective of analysis was to estimate the strength of the effects of &lt;em>D&lt;/em>, &lt;em>E&lt;/em>, &lt;em>H&lt;/em> (written as &lt;em>d&lt;/em>, &lt;em>e&lt;/em>, &lt;em>h&lt;/em> in the diagram). (&lt;em>Source:&lt;/em> Sewall Wright, &lt;em>Proceedings of the National Academy of Sciences&lt;/em> [1920], 320–332.)&lt;/p>
&lt;/blockquote>
&lt;p>В диаграммах есть три базовые комбинации: соединение, разветвление и коллайдер.&lt;/p>
&lt;ol>
&lt;li>A-&amp;gt;B-&amp;gt;C - соединение/junction. Пример: датчик пожара на основе дыма (огонь -&amp;gt; дым -&amp;gt; тревога). Если мы зафиксируем параметр B, то мы исключим влияние первопричины на наш вывод, например: закурив в комнате.&lt;/li>
&lt;li>A&amp;lt;-B-&amp;gt;C - разветвление/fork. Пример: корреляция между способностью читать и размером ноги у детей, где первопричиной является возраст. Это первый пример того, как связь параметров может дать бессмыслицу в причине, но успех в корреляции. Мы можем убрать её, если зафиксируем возраст ребёнка в данных и посмотрев что разницы никакой нет.&lt;/li>
&lt;li>A-&amp;gt;B&amp;lt;-C - коллайдер/collider. Пример: считаем что успех актёра зависит от таланта и красоты. Опасность такого сочетания в диаграмме в том, что если мы зафиксируем параметр B, то будем делать исключающие выводы. Успешный актёр без таланта будет считаться только из-за красоты, и наоборот. Что наводит на мысли о связи красоты и таланта, тогда как мы посмотрели только на половину нужной выборки и сделали себе неправильные допущения.&lt;/li>
&lt;/ol>
&lt;p>Из этих комбинаций складываются все диаграммы необходимые для исследования причинных связей. Знать эти комбинации нужно для того, чтобы правильно выбирать значимые переменные, которые можно или наоборот нельзя варьировать. Если мы не учитываем причинно-следственные связи, то порождаем в своём решения предвзятость/bias. И это только кубики для постройки более сложных вещей.&lt;/p>
&lt;p>Рассмотрим парадокс Монти-Холла. В рамках этой игры за одной из трёх дверей есть автомобиль, и нам предлагают поменять своё решение после открытия одной из дверей. Внутренняя интуиция говорит о том, что шансы равны, но числа говорят об увеличении шансов на победу в случае смены. Происходит это по причине связи выбором двери ведущим и нашим выбором.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020220115190828.png" alt="">&lt;/p>
&lt;p>Фиксация на одном параметры в случае коллайдера создаёт в голове эффект исключающих выводов. И мы начинаем находить связь - там, где её нет.&lt;/p>
&lt;p>Если мы поменяем правила игры и разрешим ведущему открыть любую дверь из двух оставшихся, то парадокса не будет. Именно так контрфактуалы работают с диаграммами Мы в своей голове воображаем потенциальные миры. Воображение можно свести к изменению стрелок в диаграмме и валидации полученной идеи на основе известного опыта. Основная проблема заключается в том, какие стрелки можно убирать, а какие нет.&lt;/p>
&lt;p>Долгие дебаты касательно вреда курения состояли вокруг простого вопроса: было ли курение причиной для рака или была общая скрытая переменная. Статистически было известно, что шанс заболеть раком у курильщика был выше в 9 раз. При этом были и заболевшие из некурящих людей в виде 11% от общей выборки людей в рамках исследований. Допуская что общая причина генетика, мы можем сформулировать разницу в изменение одной стрелки в диаграмме.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020220115192134.png" alt="">&lt;/p>
&lt;p>Допустим связь только через общую причину. Тогда результаты наших выборок, где в 9 раз больше курящих с раком должна приводить к наличию гена у 99% курильщиков. Если мы сможем это опровергнуть, то вывод останется только в наличии связи между курением и раком. Правда гораздо позже было открыто, что рак вызывают смолы и так же что есть ген отвечающий за восприимчивость к ним.&lt;/p>
&lt;p>Допустим, что мы хотим провести исследование о том, как нам запускаться в новых городах. Для этого мы решили выбрать новый город, где будем проводить статистическое исследование и собрали данные из пяти предыдущих городов, где уже проводили разные типы исследований. На языке диаграмм мы провели следующие исследования:
&lt;img src="https://vanadium23.me/images/Pasted%20image%2020220113091415.png" alt="">&lt;/p>
&lt;p>Город &lt;em>c&lt;/em> - исследовался по независимой переменной, поэтому результаты его будут совпадать с нужным нам городом. Но мы не знаем насколько Z влияет на X и Y. С другой стороны исследование в городе &lt;em>e&lt;/em> с помощью рандомизации выборки убрало связь между рекламой и возрастом, а фиксация на количестве кликов смогло показать связь между рекламой и покупкой. Если мы сможем посчитать эти факторы в нужном городе, то сможем ответить на свой вопрос. Что делать с оставшимися исследованиями? В случае города f, мы видим что на покупку влияет и реклама, и возраст. Взяв результаты из города &lt;em>e&lt;/em>, мы можем попробовать дополнить наши результаты. Для этого в статистику была добавлена do-нотация. И сделала математика перевода do-нотаций в обычную теорию вероятности. С помощью неё в случае доказанных (точнее не опровергнутых) гипотез, мы можем давать себе качественные и количественные ответы в случае нескольких неполных/неправильных количественных исследований.&lt;/p>
&lt;p>Если на этих примерах из книги стало интересно, то для погружения рекомендую прочитать первоисточник. За кадром остались такие приёмы, как: &amp;ldquo;backdoor test&amp;rdquo;, &amp;ldquo;frontdoor test&amp;rdquo;, и небольшое количество математики по do-calculus.&lt;/p></description></item><item><title>Вишлист на Д.Р. 2021</title><link>https://vanadium23.me/wishlist-2021/</link><pubDate>Mon, 06 Sep 2021 15:00:00 +0300</pubDate><guid>https://vanadium23.me/wishlist-2021/</guid><description>&lt;h2 id="wishlist-2021">Wishlist 2021&lt;/h2>
&lt;ol>
&lt;li>Подушка для ванной.&lt;/li>
&lt;li>&lt;a href="https://sharipova.coffee/coffeeshop/tproduct/289000480-290164398771-nabor-vkusov">Набор для тестирования вкуса&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.deadbrush.ru/catalog/games/homm3/">Маечки из героев, любую кроме некрополиса и башни (:&lt;/a> &lt;em>размер S&lt;/em>&lt;/li>
&lt;li>Сковородка 26 см для индукционной и чтобы в посудомойке мыть.&lt;/li>
&lt;li>&lt;a href="https://market.yandex.ru/product--vakuumnyi-upakovshchik-kitfort-kt-1506/778005002?sku=101127177728&amp;amp;cpa=1&amp;amp;nid=54937">Вакууматор&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/Balcony-Chic-architectural-Ukraines-balconies/dp/9665008307">Книга про киевские балконы&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/Chew-Omnivore-4/dp/163215031X">4-й том комикса Жуй&lt;/a> &lt;em>на русском их нет&lt;/em>&lt;/li>
&lt;/ol>
&lt;h3 id="старое-доброе">Старое доброе&lt;/h3>
&lt;ol>
&lt;li>Настолки
&lt;ol>
&lt;li>&lt;a href="https://hobbyworld.ru/grani-sudbi-dice-forge">Dice Forge&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hobbyworld.ru/zhadjugi">Жадюги&lt;/a>&lt;/li>
&lt;li>Предзаказ &lt;a href="https://www.crowdgames.ru/collection/o-myshah-i-taynah">О мышах и тайнах&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>Выдержка из книги "Why Greatness cannot be planned"</title><link>https://vanadium23.me/the-myth-of-objective/</link><pubDate>Tue, 03 Aug 2021 09:00:00 +0300</pubDate><guid>https://vanadium23.me/the-myth-of-objective/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>TL;DR:&lt;/strong> амбициозные цели являются ложным компасом и вводят нас в заблуждение. Вместо амбициозных целей необходимо двигаться в направлении своей интуиции и коллекционирования промежуточных результатов.&lt;/p>
&lt;/blockquote>
&lt;p>Культура постановки целей повсеместна: начинается это со школьных оценок и заканчивается классическими фразами &amp;ldquo;дом-дерево-сын&amp;rdquo; или построить очередной стартап-единорог. Большинство считает что постановка цели является первым шагом к её достижению. Это правда работает для обозримых и понятных вещей.&lt;/p>
&lt;p>Однако если наши желания лежат в области инноваций или креативности, то они могут завести нас в тупик. В качестве примера можно привести изобретение СВЧ. Как вы знаете микроволновые диапазоны были изобретены для военных радаров. Только когда Percy Spencer заметил, что шоколадка расплавилась рядом с радаром, стало очевидно что микроволны так же могут и разогревать продукты. &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> Большинство инноваций приходит сбоку, откуда их не ждали.&lt;/p>
&lt;p>В качестве ещё одного примера можно привести игрушку &lt;a href="https://en.wikipedia.org/wiki/Chinese_finger_trap">&amp;ldquo;Chinese finger trap&amp;rdquo;&lt;/a>. Если мы поставим перед собой цель выбраться из неё, то начнём тянуть как можно сильнее в разные стороны. Только после нескольких попыток, человек догадывается что для выхода необходимо сомкнуть пальцы как можно ближе друг к другу, что диаметрально противоположно с поставленной целью. Почему пришла мысль сомкнуть пальцы? Как происходит поиск этого решения? В таком простом примере у нас просто нет других вариантов. С другой стороны, сомкнуть пальцы выглядит каким-то &lt;em>новым&lt;/em> подходом к проблеме.&lt;/p>
&lt;p>Давайте теперь представим, что перед нами стоит задача научить робота проходить через двери. Сам робот для упрощения будет состоять только из трёх частей: возможность пройти путь, память о состоянии на конец пути и поиск чего-то нового.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020210803104633.png" alt="пути робота">&lt;/p>
&lt;p>Как видно из картинки, робот может разбиться большим количеством способов, но после бесконечных попыток он находит дверь. Так как это новая ситуация, то робот приобретает знание как проходить через двери. Было ли заложен алгоритм поиска двери в робота? Нет. Почему он тогда его нашёл? Потому, что в природе есть ограничения (стены), а робот мог накапливать знания и пытался искать новизну. Здесь можно вспомнить &lt;a href="https://en.wikipedia.org/wiki/Infinite_monkey_theorem">теорему о бесконечных обезъянах&lt;/a>, но новизна - это относительная мера. iPhone в 2006 году выглядит инновацией, в 2021 году - обыденность. Тоже самое можно сказать и про отношения нашего робота со стенками.&lt;/p>
&lt;p>Для построения аналогичного механизма в инновациях авторы книги вводят две концепции: stepping stones и искатель сокровищ/treasure hunter. Первая — аналогия к поиску новых знаний для открытых проблем в виде перемещения по камушкам озера в тумане. Мы не видим, что будет на два шага вперёд и направление должны выбирать только на основе интуиции. Искатель сокровищ — это профессионал в выборе такого пути и рисования карты пройденной местности. Без достаточного количества нарисованной карты, мы не сможем оценить полную картинку. Это является одной из причин, почему если отправить современного гения в прошлое на несколько сотен лет назад, он не изобретёт компьютер. Просто не было исследовано достаточно предварительных вещей или более простым языком не хватает фундамента.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020210803104557.png" alt="Rob Gonsalves «Stepping Stones»">&lt;/p>
&lt;p>Но при осмыслении предложенной модели пришёл к выводу, что оба механизма неотделимы друг от друга. Поэтому в качестве аналогии можно привести классику настольных игр &lt;a href="https://en.wikipedia.org/wiki/Carcassonne_(board_game)">&amp;ldquo;Каркассон&amp;rdquo;&lt;/a>. Каждый ход в ней игрок открывает фишку и решает поставить ли своего рабочего для завоевания замка, земли или дороги. В конце игры накопленные очки за завершённые постройки суммируются для определения победителя.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020210803104029.png" alt="Rob Gonsalves «Stepping Stones»">&lt;/p>
&lt;p>Аналогия всегда работает до определённой степени. Жизнь гораздо разнообразнее — мы не знаем, что принесёт следующая открытая фишка, а правила подсчёта очков не существует. Поэтому попробуйте заняться чем-то интересным и уже потом посмотреть куда это приведёт.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>J. Levy, Really useful: the origins of everyday things. Firefly Books Ltd, 2002.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Консистентность - необходимое условие для мастерства</title><link>https://vanadium23.me/consistency-over-mastery/</link><pubDate>Mon, 19 Jul 2021 09:00:00 +0300</pubDate><guid>https://vanadium23.me/consistency-over-mastery/</guid><description>&lt;p>Читая недавно &lt;a href="https://www.freecodecamp.org/news/lessons-learned-after-11-years-coding/">заметку о том, что хотелось бы знать на уровне джуна&lt;/a> и параллельно заканчивая курс &amp;ldquo;&lt;a href="https://system-school.ru/introonline">Системное саморазвитие&lt;/a>&amp;rdquo;, глаз зацепился за фразу &amp;ldquo;Consistency &amp;gt; hard work&amp;rdquo;. Удивительным образом, именно постоянный подход с постепенным прогрессом приводит тебя к большим результатам с течением времени. И нет, это не очередная статья о том, что надо потратить &lt;a href="https://www.forbes.ru/forbes/issue/2009-04/7255-pravilo-10000-chasov">10000 часов&lt;/a>, точнее не только об этом.&lt;/p>
&lt;p>Для начала необходимо представить картинку с развитием любого навыка, который складывается из четырёх зон по осям некомпетентность и осознанность:&lt;/p>
&lt;ol>
&lt;li>Неосознанная некомпетентность — мы не знаем, что мы не умеем.&lt;/li>
&lt;li>Осознанная некомпетентность — мы знаем, что мы не умеем, то есть сместили наше внимание на некомпетентность. Обычно на этой стадии приступают к потреблению нужной информации.&lt;/li>
&lt;li>Осознанная компетентность — мы знаем, что умеем, но для применения нам необходимо внимание. Мы применяем полученные знания, но они требуют медленного мышления.&lt;/li>
&lt;li>Неосознанная компетентность — мы не знаем, что умеем, так как довели наши действия до автоматизма.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020210713154713.png" alt="Квадрат компетенций">&lt;/p>
&lt;p>Отсюда следуют два интересных вывода:&lt;/p>
&lt;ol>
&lt;li>Дурак и мастер находятся на одном уровне осознанности, но первый даже не догадывается о количество вложенных часов в реальные проекты, то есть не знает и не осознаёт.&lt;/li>
&lt;li>Мастера от любителя отличают автоматизмы в наработанном навыке.
&lt;ul>
&lt;li>&lt;em>(лирическое отступление)&lt;/em> Часто это является одной из причин, почему в разработке мало людей пишут статьи или ходят на конференции с выступлениям.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>На основе этой модели, можно понять, что без систематического прикладывания своей головы сначала к потреблению своей информации, потом к осознанию и наконец к её применению трудно освоить любой навык. При этом, есть исключения из этого правила, но они связаны с ранее заложенными знаниями от окружения или правильной наследственностью. Если вы не хотите играть в эту рулетку, то остаётся только вариант с постепенным продвижением.&lt;/p>
&lt;p>Сама по себе консистентность/систематичность/дисциплина — тоже является компетенцией, а это значит можно пройти тем же путём. Надеюсь, прочтя эти строчки, станет понятно, что вы уже точно не находитесь на первом уровне, значит мы можем пойти дальше. А дальше есть довольно много популярных путей, начиная от прямолинейной (но рабочей) техники Pomodoro до сложносоставных вещей в виде использования Jira для своего планирования. Если ранее не читали, то рекомендую обратить внимание на &lt;a href="https://vanadium23.me/jedi-book-experiments/">джедайские техники&lt;/a>, так как относительно недавно они начали проводить &lt;a href="https://hyls.ru/jedi_max">марафоны&lt;/a>.&lt;/p>
&lt;p>И последнее, но не по важности, компетенция по систематичности необходима для приобретения новых навыков, а не для применения в вакууме. Если вы в какой-то момент попали в ловушку постоянных задач, то сильно рекомендую &lt;a href="https://vas3k.ru/inside/43/">статью Вастрик.Инсайд&lt;/a>.&lt;/p>
&lt;h2 id="дополнительные-материалы">Дополнительные материалы&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://typesense.org/blog/the-unreasonable-effectiveness-of-just-showing-up-everyday/">https://typesense.org/blog/the-unreasonable-effectiveness-of-just-showing-up-everyday/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.deprocrastination.co/blog/put-yourself-on-the-productive-path">https://www.deprocrastination.co/blog/put-yourself-on-the-productive-path&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.deprocrastination.co/blog/stages-of-self-development">https://www.deprocrastination.co/blog/stages-of-self-development&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Что меня реально сейчас бесит</title><link>https://vanadium23.me/what-really-grinds-me/</link><pubDate>Fri, 25 Jun 2021 09:00:00 +0300</pubDate><guid>https://vanadium23.me/what-really-grinds-me/</guid><description>&lt;p>&lt;img src="https://vanadium23.me/images/20210625195211.png" alt="Иронично, что это мем про людей, которые дают советы">&lt;/p>
&lt;p>Просматривая периодически свои дневники понял, что раз за разом возвращаюсь к одной и той же практике. Решил, что пора описать этот подход.
Назвал я его &amp;ldquo;Что меня реально сейчас бесит&amp;rdquo; и, частично, он является отражением практики &amp;ldquo;спусковых крючков&amp;rdquo; из &lt;a href="https://vanadium23.me/jedi-book-experiments/">джедайских техник&lt;/a>.
Суть заключается в том, что иногда количество вещей, которые на тебя свалились немного вышли за пределы впихивания в голову/тудушку/заметки, и надо экстренно выгрузить своё негодование. Для этого просто начинаем выписать список вещей, которые тебя бесят не задумываясь на ними:&lt;/p>
&lt;ul>
&lt;li>Бесит, что в спальне жарко.&lt;/li>
&lt;/ul>
&lt;p>Дальше мы берём и добавляем к ним вопрос: &amp;ldquo;что я могу с этим сделать?&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>Бесит, что в спальне жарко.
&lt;ul>
&lt;li>Что я могу с этим сделать?
&lt;ul>
&lt;li>Установить в спальне кондиционер.&lt;/li>
&lt;li>Установить в спальне &amp;ldquo;дешевый кондей&amp;rdquo;: вентилятор с ведром.&lt;/li>
&lt;li>Спать в комнате с кондиционером.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Дальше задаём вопрос [[чтобы что]]?&lt;/p>
&lt;ul>
&lt;li>Бесит, что в спальне жарко.
&lt;ul>
&lt;li>Что я могу с этим сделать?
&lt;ul>
&lt;li>Установить в спальне кондиционер.
&lt;ul>
&lt;li>Чтобы что: навсегда решить проблемы с температурой в спальне.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Установить в спальне &amp;ldquo;дешевый кондей&amp;rdquo;: вентилятор с ведром.
&lt;ul>
&lt;li>Чтобы что: пережить текущую жару.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Спать в комнате с кондиционером.
&lt;ul>
&lt;li>Чтобы что: пережить текущую жару.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Дальше можно к каждому решению дописать предполагаемые расходы или минусы:&lt;/p>
&lt;ul>
&lt;li>Бесит, что в спальне жарко.
&lt;ul>
&lt;li>Что я могу с этим сделать?
&lt;ul>
&lt;li>Установить в спальне кондиционер.
&lt;ul>
&lt;li>Чтобы что: навсегда решить проблемы с температурой в спальне.&lt;/li>
&lt;li>Минусы: только сделали ремонт.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Установить в спальне &amp;ldquo;дешевый кондей&amp;rdquo;: вентилятор с тазиком.
&lt;ul>
&lt;li>Чтобы что: пережить текущую жару.&lt;/li>
&lt;li>Минусы: надо купить тазик, и повышается влажность.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Спать в комнате с кондиционером.
&lt;ul>
&lt;li>Чтобы что: пережить текущую жару.&lt;/li>
&lt;li>Минусы: не такая удобная постель.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>И финальный штрих написать вывод и что делаем дальше:&lt;/p>
&lt;ul>
&lt;li>Бесит, что в спальне жарко.
&lt;ul>
&lt;li>Что я могу с этим сделать?
&lt;ul>
&lt;li>Установить в спальне кондиционер.
&lt;ul>
&lt;li>Чтобы что: навсегда решить проблемы с температурой в спальне.&lt;/li>
&lt;li>Минусы: только сделали ремонт.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Установить в спальне &amp;ldquo;дешевый кондей&amp;rdquo;: вентилятор с тазиком.
&lt;ul>
&lt;li>Чтобы что: пережить текущую жару.&lt;/li>
&lt;li>Минусы: надо купить тазик, и повышается влажность.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Спать в комнате с кондиционером.
&lt;ul>
&lt;li>Чтобы что: пережить текущую жару.&lt;/li>
&lt;li>Минусы: не такая удобная постель.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Вывод:&lt;/strong> спим в комнате, чтобы пережить текущую жару. При следующей итерации ремонта обязательно ставить кондиционер в спальню.&lt;/li>
&lt;/ul>
&lt;p>Если проделать такую работу со всеми пунктами, которые прям сейчас торчат в голове, то получится снизить уровень стресса, иметь первоначальный план, а также чуть более ясную голову.&lt;/p></description></item><item><title>Как организовать активное чтение</title><link>https://vanadium23.me/active-reading/</link><pubDate>Tue, 27 Apr 2021 09:00:00 +0300</pubDate><guid>https://vanadium23.me/active-reading/</guid><description>&lt;p>В этой заметке хочу рассказать какие моим мысли по поводу большого чтения книг. Почему-то этот метод у меня в голове назвался активное чтение, но в гугле по нему находятся какие-то странные вещи. Суть простая: по ходу книги надо делать заметки, по заметкам надо писать свои мысли. Эти мысли пришли на основе книги &lt;a href="https://b-ok.cc/book/5008584/6864b9">&amp;ldquo;Как делать умные заметки&amp;rdquo;&lt;/a> и статьи &lt;a href="https://fortelabs.co/blog/how-to-take-smart-notes/">Progressive summarization&lt;/a>.&lt;/p>
&lt;p>Сейчас популярно гнаться за количеством прочтённой литературы, вероятно в попытках использовать парадигму &amp;ldquo;количество &amp;gt; качества&amp;rdquo;. Если честно сам грешу этим, потому что на goodreads за 2020 год у меня &lt;a href="https://www.goodreads.com/user_challenges/19459234">61 прочитанная книга&lt;/a>, что даёт бонус в хвастовстве перед друзьями, но при этом не помогает быть делать свою работу лучше. Если разделить прочитанную литературу на художественную, рабочую и остальную, то половина будет именно художественная. Не смотря на то, что &lt;a href="https://t.me/syncromechanica/344">читать художественную литературу полезно&lt;/a>, хотелось бы закрыть список литературы из &lt;a href="https://www.goodreads.com/review/list/31608537-ivan-chernov?shelf=felix-nice-to-read">разных проверенных подборок&lt;/a>. В связи с этим всем решил взять курс на 20 книг на этот год, при этом художественная не идёт в счёт.&lt;/p>
&lt;p>Две проблемы, с которыми сталкиваешься по завершению книги:&lt;/p>
&lt;ol>
&lt;li>знать не равно делать,&lt;/li>
&lt;li>нужно делать изложение, а не конспект.&lt;/li>
&lt;/ol>
&lt;p>Борьба со знанием в голове легко решается практическими задачками, если они есть в книге, то это великолепно. Если их нет, то придумать их на основе текста или поискать уже готовые не составляет труда. Большая проблема в лени, которую мозг порождает от того, что &amp;ldquo;ну вот прочитали, всё логично, всё понятно, давай дальше&amp;rdquo;. Поэтому рекомендую при выборе технической литературы отдавать предпочтение тем, что строятся на манер учебника. Это не показатель качества книги, но хотя бы есть шанс лучше уложить информацию в голове.&lt;/p>
&lt;p>А вот делать изложение оказалось не сложным способ при должной технике ведения заметок. Такой подход применяется традиционно применяется в академической деятельности, где необходима крепкая база референсов для проведения исследования, но довольно успешно переносится на ежедневную жизнь. У нас есть три возможных выбора: дословное цитирование, изложение на основе дословного цитирования, создание новых мыслей. Чтобы перейти к пониманию достаточно уйти от первого слоя ко второму, но одно не исключает другого.&lt;/p>
&lt;p>Мой подход в итоге выродился в следующую систему:&lt;/p>
&lt;ol>
&lt;li>Для чтения использую google play books, не самый удобный инструмент, но главное:
&lt;ol>
&lt;li>можно загружать свои книги,&lt;/li>
&lt;li>есть синхронизация между планшетом и телефоном,&lt;/li>
&lt;li>можно оставлять заметки, которые попадают на твой google drive.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>По окончанию главы пытаюсь пересказать себе своими словами, что из неё понял.&lt;/li>
&lt;li>По окончанию книги заглядываю в свои цитаты, и пытаюсь разделить на концепции, которые должны лечь в мои заметки.&lt;/li>
&lt;li>На основе заметок пробую писать изложение, но пока все ещё получаются конспекты, как было с &lt;a href="https://vanadium23.me/radical-candor/">&amp;ldquo;Радикальная прямота&amp;rdquo;&lt;/a>.&lt;/li>
&lt;/ol>
&lt;p>Чуть более хороший пример с книгой &amp;ldquo;Образование для образованных&amp;rdquo;:
&lt;img src="https://vanadium23.me/images/odo-concepts.png" alt="Концепции из ОдО">&lt;/p>
&lt;p>На этом всё, но ещё есть идеи подстроить процесс в рамках &lt;a href="https://vanadium23.me/adapt-process/">дальнейшей адаптации походов под себя&lt;/a> с помощью &lt;a href="https://www.zotero.org/">Zotero&lt;/a>.&lt;/p></description></item><item><title>Obsidian - моя следующая заметочница</title><link>https://vanadium23.me/obsidian/</link><pubDate>Sun, 21 Feb 2021 09:00:00 +0300</pubDate><guid>https://vanadium23.me/obsidian/</guid><description>&lt;p>В &lt;a href="https://vanadium23.me/notes-evolution/">прошлой статье&lt;/a> я писал о том, какой путь для выбора систем заметок пришлось пройти, чтобы остановится на Vs Code. Время не стоит на месте и выходят новые инструменты, которые стоит попробовать для решения задач ведения заметок. Это немного противоречит правилу [[сначала подход, потом инструмент]], но так как подход уже сформирован, то можно и поглядеть на новое.&lt;/p>
&lt;p>Мои требования к инструменту выглядят следующим образом.&lt;/p>
&lt;ol>
&lt;li>Файлы должны лежать локально:
&lt;ul>
&lt;li>Имея навык однострочников на bash, можно автоматизировать свою рутину.&lt;/li>
&lt;li>Локальные файлы будут работать на порядок быстрее любого решения поверх &amp;ldquo;облачных&amp;rdquo; поставщиков.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Из инструмента можно работать с git:
&lt;ul>
&lt;li>Так как у нас ничего не синхронизируется, то делаем это с помощью стандартных инструментов разработчика.&lt;/li>
&lt;li>В заметках не очень нужны сложные операции вида rebase, stash. Вся работа сводится к &lt;code>git add -A . &amp;amp;&amp;amp; git commit - m 'snapshot ``date``'&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Двунаправленные ссылки:
&lt;ul>
&lt;li>Неважно как они будут реализованы с помощью wiki-links или обычными.&lt;/li>
&lt;li>Важно, чтобы было отображение заметок, которые ссылаются на эту заметку.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Возможность расширения с помощью плагинов:
&lt;ul>
&lt;li>Хорошо иметь возможность настроить инструмент под себя.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Забыл дописать, естественно, это markdown:
&lt;ul>
&lt;li>Просто пока не нашёл более простой формат. (:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Как вы уже поняли из названия сегодня покажу, что такое &lt;a href="https://obsidian.md/">Obsidian&lt;/a>.&lt;/p>
&lt;h2 id="граф-и-связность">Граф и связность&lt;/h2>
&lt;p>&lt;img src="https://vanadium23.me/images/%D0%A1%D0%B2%D1%8F%D0%B7%D0%BD%D0%BE%D1%81%D1%82%D1%8C%20%D0%B7%D0%B0%D0%BC%D0%B5%D1%82%D0%BE%D0%BA.png" alt="Пример графа">&lt;/p>
&lt;p>Это граф моих заметок:&lt;/p>
&lt;ul>
&lt;li>фиолетовое - все записи по работе&lt;/li>
&lt;li>синее - записи по старой&lt;/li>
&lt;li>оранжевым - персональная база знаний&lt;/li>
&lt;li>красным - проекты&lt;/li>
&lt;li>бирюзовым - дневник
По поводу цветов, всё можно разукрасить на своё усмотрение по комбинации параметров: путь, тег, связи с файлом и так далее.&lt;/li>
&lt;/ul>
&lt;p>Зачем это нужно? Например, можно просматривать вещи и наблюдать за тем, как [[формируются знания вокруг концепций]].&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/20210221114859.png" alt="Кластер вокруг ведения заметок">&lt;/p>
&lt;h2 id="ведение-дневника">Ведение дневника&lt;/h2>
&lt;p>Ведение разного рода дневник и активная выгрузка мыслей из головы в какую-то письменную форму, повышает структурность понимания, что происходит вокруг и помогает связать это с каким-то событиями из прошлого, а ещё лучше сформировать ментальную модель, что может произойти дальше. Разных дневник довольно много: можно вести &lt;a href="https://blog.system-school.ru/2020/10/14/emotions-diary/">дневник эмоций&lt;/a>, можно вести &lt;a href="https://habr.com/ru/post/116251/">проектный дневник&lt;/a>, или просто сесть и написать всё, что лезет в голову. Особенно странно читать, как мысли прыгают с темы на тему, органически выделяя связи в потоке, но никак не связывая их если сесть и подумать. Мне тяжело давалась привычка вести текстовый дневник с мыслями, а не просто лог всех текущих встреч и обсуждений. В obsidian на помощь пришёл плагин с ежедневными заметками и календарём. Теперь когда вижу день без точечки, то мой внутренний задрот не может с этим смириться. Если вы обратили внимание на самый первый граф, то дневник находится посередине между работой и знаниями. Кроме того, obsidian автоматически находит все несвязанные заметки с таким же именем, поэтому можно довольно быстро найти все встречи или обсуждения, которые были в это день просто перейдя на нужную дату в календаре.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/20210221115634.png" alt="Пример календаря">
&lt;img src="https://vanadium23.me/images/20210221120213.png" alt="Простой день">&lt;/p>
&lt;h2 id="mind-map">Mind map&lt;/h2>
&lt;p>В markdown есть ряд вещей, которых не хватает: работа с мыслекартами, работа с таблицами (приходится делать это в Excel/Google Sheets), графики. Первую проблему можно решить с помощью &lt;a href="https://markmap.js.org/">markmap&lt;/a>, и плагин для неё есть и в Vs Code, и в Obsidian. Я привык просматривать свои годовые цели в этом формате:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/20210221120350.png" alt="Мыслекарта целей 2020">&lt;/p>
&lt;h2 id="git">Git&lt;/h2>
&lt;p>В Vs Code старался делать атомарные коммиты с подписями, а в итоге понял, что мне просто по кнопке нужно всё сохранить. Эту проблему решает &lt;a href="https://github.com/denolehov/obsidian-git">obsidian-git&lt;/a>.
Главное при работе с ним сделать &lt;code>.gitignore&lt;/code> с исключением файлов из &lt;code>.obsidian&lt;/code>, потому что там будут конфликты, а их разрешение через интерфейс не завезли и приходится открывать консоль.&lt;/p>
&lt;h2 id="картинки-pdf-и-остальное">Картинки, pdf и остальное&lt;/h2>
&lt;p>Всё работает с помощью drag&amp;rsquo;n&amp;rsquo;drop и самое прекрасное, что можно перетащить не только картинку, но и всякие бинарные данные. При отображение заметок, pdf будут отрисованы внутри неё и можно не переходить в стороннее приложение.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/20210221125122.png" alt="Как-то так">&lt;/p>
&lt;p>Pdf работает ещё и в сторону экспорта, что уже несколько раз позволило просто выгрузить заметку и переслать в случае, если это требовалось.&lt;/p>
&lt;h2 id="индексация-и-связность">Индексация и связность&lt;/h2>
&lt;p>Повторю ещё раз тезис про формирование знаний вокруг концепций, и добавлю противоречий в то, что иногда нужны заметки-оглавления, которая не несёт сама смысловой ценности, но помогает объединить всё вокруг конкретики, например: все заметки за 2020 год. Изначально проблему можно решить с помощью простого bash скрипта, но в Obsidian решили пойти дальше и позволили встраивать поиск в заметки. Выглядит это следующим образом:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/20210221122748.png" alt="Пример индекса">&lt;/p>
&lt;p>Но если возможностей не хватает, то есть на помощь опять приходят плагины с большим количеством возможностей: &lt;a href="https://github.com/jplattel/obsidian-query-language">obsidian-query-language&lt;/a>, &lt;a href="https://github.com/blacksmithgu/obsidian-dataview">obsidian-dataview&lt;/a>.&lt;/p>
&lt;h2 id="итого">Итого&lt;/h2>
&lt;p>Организованный подход привёл к тому, что начал переиспользовать практики работы с задачами в том, как работаю с заметками. Пришло больше осознанности по каким-то темам, самое главное книги стало читать интереснее, потому что появилась игра &lt;del>натягивание совы на глобус&lt;/del> соотнеси новую информацию со старыми концепциями. В этом плане сильно помогает &lt;a href="https://zettelkasten.de/posts/knowledge-cycle-efficiently-organize-writing-projects/">цикл знаний&lt;/a> из Zettelkasten и &lt;a href="https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/">прогрессивное подведение итогов&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/20210221124035.png" alt="Мой рабочий инструмент">&lt;/p>
&lt;p>P.s. всё это касается не только заметок, но и работы, потому что менеджмент - это не меньшая работа с текстом, чем разработка. Просто вместо формального кода, у тебя неформальные слова. (:&lt;/p>
&lt;h2 id="что-ещё-почитать">Что ещё почитать&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://publish.obsidian.md/lyt-kit/_Start+Here">Быстрый старт с разными подходами&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://forum.obsidian.md/t/meta-post-migration-workflows/768">Миграция с других инструментов&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://joshwin.imprint.to/post/how-i-use-obsidian-to-manage-my-goals-tasks-notes-and-software-development-knowledge-base">Как вести дела в Obsidian&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://nesslabs.com/how-to-choose-the-right-note-taking-app">Выбор заметочницы для себя&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Радикальная прямота</title><link>https://vanadium23.me/radical-candor/</link><pubDate>Sun, 07 Feb 2021 09:00:00 +0300</pubDate><guid>https://vanadium23.me/radical-candor/</guid><description>&lt;p>Книга посвящена тому, как организовать работу себя, как руководителя со своими подчинёнными, чтобы в результате получалась синергия.
Прежде всего, твоя цель, как руководителя, заключается в помощи людям под тобой и отгораживание их от лишней работы. В данном случае, можно подумать о концепции [[лидер как слуга]].
Сразу хочется отметить, что книга была написана в 2004 году, и&lt;/p>
&lt;h2 id="почему-же-в-книге-говорится-о-радикальное-прямоте">Почему же в книге говорится о радикальное прямоте?&lt;/h2>
&lt;p>Потому что без неё невозможно погрузиться в то, что человек хочет на самом деле. Все мы так или иначе приносим на работу свою личную жизнь, или наоборот. В этом плане книга мне сильно понравилась, потому что концепция профессионализма, в котором мы просто сидим по 8 часов 5 дней в неделю и не отдаём часть себя, выглядит несостоятельной. Это не означает, что на работе должны делать поблажки в случае проблем, хотя в последнее время развивается концепция рехабов (оздоровительных отпусков от выгораний), которая является следствием всё большей нагрузки на мыслительную деятельность, нежели чем на физические изменения. Радикальная прямота/честность здесь помогает в том, чтобы найти первопричины поведения и прийти к пониманию общей стратегии.&lt;/p>
&lt;h2 id="как-построить-радикальную-прямоту-с-сотрудником">Как построить радикальную прямоту с сотрудником?&lt;/h2>
&lt;p>Для дальнейших рассуждений необходимо предоставить следующую схему:
&lt;img src="https://vanadium23.me/images/Pasted%20image%2020210207124624.png" alt="Личное против требований">&lt;/p>
&lt;p>В схеме у меня большее отторжение вызывает левая половина, нежели чем нижняя. Конечная цель оказаться в правой верхней половине, которая подразумевает постановку амбициозных целей с учётом личного интереса к человеку. Левая половина представляет из себя жалость - вместо того, чтобы объяснить в чём работа была сделана плохо руководитель говорит: &amp;ldquo;молодец, продолжай&amp;rdquo;. Какое будет продолжение у таких отношений? В лучшем случае, это будет увольнение, в худшем, работа перераспределиться на руководителя, который под нагрузкой уйдёт сам.&lt;/p>
&lt;blockquote>
&lt;p>Предъявление требований друг к другу – основа не просто хорошей работы, но и прекрасных взаимоотношений.&lt;/p>
&lt;/blockquote>
&lt;p>Правда переходить сразу к требованиям не стоит, люди вполне могут записать вас босса-&amp;ldquo;козла&amp;rdquo;, который не учитывает вашего мнения, а главное положения вещей, который могут быть скрыты от него.
Для этого предлагается следующая схема:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020210207125758.png" alt="Цикл менеджмента">&lt;/p>
&lt;blockquote>
&lt;p>Слушайте, чтобы понять, а не ответить.&lt;/p>
&lt;/blockquote>
&lt;p>Прежде чем начинать предпринимать действия необходимо выслушать, а лучше выслушать и попробовать рассказать своими словами услышанное. Принимать одно мнение сразу за истину не стоит, поэтому стоит объяснить свою позицию, если есть большее количество информации и только после этого обсудить. По результатам обсуждения, &lt;em>всегда&lt;/em> должен быть план дальнейших действий - результаты, которого вы будете слушать в следующий раз и так по кругу. С очередным витком, можно повышать требования к человеку в сторону требуемого роста.&lt;/p>
&lt;h2 id="какой-рост-может-быть">Какой рост может быть?&lt;/h2>
&lt;p>&lt;img src="https://vanadium23.me/images/Pasted%20image%2020210207131442.png" alt="Уровни роста">&lt;/p>
&lt;p>Не всем нужен рост, но обязанность руководителя понять правда ли сотрудник его не хочет или же проблема в чём-то другом. Когда мы говорим выяснить, то речь идёт только о людях, которые находятся на траектории своего развития. Рано или поздно, человек упирается в поток своей текущей позиции и дальше ему решать: хочет ли он осесть и выдавать стабильный результат, или пойти пробовать себя на уровень выше. Грустная правда в том, что чаще всего на место тимлидов толкают и тех, и других. Пожалуйста, не делайте так.
Хорошим приёмом, чтобы избежать такого, будут разговоры о карьере, но стоит их устраивать только, когда вы уверены, что стеснения между вами нет.&lt;/p>
&lt;blockquote>
&lt;p>Не каждая «суперзвезда» хочет руководить. Отсутствие интереса к руководящим должностям и плавная траектория роста – не одно и то же. Менеджмент и рост не следует сравнивать.&lt;/p>
&lt;/blockquote>
&lt;p>Если вдруг вы тимлид тимлидов, то попробуйте по схеме выше раскидать людей и попросите сделать тоже самое тимлидов. Это откроет огромную область для обсуждения, почему данные не совпадают. (:&lt;/p>
&lt;h2 id="похвала-также-важна-как-и-критика">Похвала также важна, как и критика&lt;/h2>
&lt;p>Если под прямотой понимается только выставление требований, то это не так. Похвала должна быть и такой же регулярной, как и критика. Попробуйте пару недель посчитать сколько раз вы критиковали, а сколько хвалили. Если заметите перекосы, то можно наметить план по исправлению.&lt;/p>
&lt;p>Просто большинство умеет хвалить ещё хуже, чем критиковать.
Какие требования к критике мы предъявляем?&lt;/p>
&lt;ol>
&lt;li>Своевременность&lt;/li>
&lt;li>Основана на фактах&lt;/li>
&lt;li>Полнота картины&lt;/li>
&lt;/ol>
&lt;p>Так почему другого мы хотим от похвалы? (:&lt;/p>
&lt;p>Если решили похвалить, то делайте это своевременно и погружайтесь в детали: что получилось хорошо, какие навыки были продемонстрированы. И в критике, и в похвале надо рассказать о трех основных вещах:&lt;/p>
&lt;ul>
&lt;li>о ситуации, которую вы наблюдали;&lt;/li>
&lt;li>о поведении (то есть что человек сделал, хорошее или плохое);&lt;/li>
&lt;li>о действии, за которым вы наблюдали.&lt;/li>
&lt;/ul>
&lt;p>После этого перейдите в формат диалога, чтобы человек сам могу погрузиться в детали.&lt;/p>
&lt;p>Кроме того, публичная похвала может быть настолько же разрушительной, как и критика. Относитесь к этому внимательно, чтобы показать не тот пример для других, который хотели.&lt;/p>
&lt;p>Последняя табличка под конец:
&lt;img src="https://vanadium23.me/images/Pasted%20image%2020210207132728.png" alt="Микроменеджмент">&lt;/p></description></item><item><title>Ипотека: уменьшение платежа == уменьшение срока</title><link>https://vanadium23.me/mortgage-payments/</link><pubDate>Fri, 15 Jan 2021 09:00:00 +0300</pubDate><guid>https://vanadium23.me/mortgage-payments/</guid><description>&lt;p>Сегодня cian прислал &lt;a href="https://www.cian.ru/stati-dosrochnoe-pogashenie-ipoteki-vremja-dengi-312978/">очередную статью&lt;/a> о том, что плательщики совершают одну и ту же ошибку выбирая уменьшение платежа, а не срока.&lt;/p>
&lt;p>Для начала проясним разницу досрочного погашения между уменьшением срока и уменьшением платежа:&lt;/p>
&lt;ul>
&lt;li>Уменьшение срока - мы берём оставшийся долг и считаем за какое время вы его закроете без изменения размера платежа. Так как долг станет меньше, то и срок станет меньше.&lt;/li>
&lt;li>Уменьшение платежа - мы берём оставшийся долг и считаем за какое время вы его закроете без изменения срока платежа. Так как долг станет меньше, то и платёж станет меньше.&lt;/li>
&lt;/ul>
&lt;p>Возьмём их пример:&lt;/p>
&lt;blockquote>
&lt;p>Допустим, возьмем средний для России жилищный кредит 2,5 млн рублей, оформленный под 8% годовых в рублях на срок 16 лет. Ежемесячный платеж составляет 23 тыс. рублей.
Воспользуемся досрочным погашением и внесем 100 тыс. рублей вместе с очередным платежом на четвертый месяц пользования ипотекой.
При выборе сокращения срока кредита ипотеку удастся выплатить на 14 месяцев быстрее. Экономия составит 233 тыс. рублей.
При выборе сокращения ежемесячного взноса он уменьшится на 1 тыс. рублей. Экономия — около 76 тыс. рублей.&lt;/p>
&lt;/blockquote>
&lt;p>Что у нас есть в примере?&lt;/p>
&lt;ol>
&lt;li>Люди изначально готовы платить 23 тыс. рублей в месяц&lt;/li>
&lt;li>Есть 100 тыс. рублей для досрочного погашения.&lt;/li>
&lt;li>Утверждение, что выгоднее сделать выбор в пользу уменьшение срока.&lt;/li>
&lt;/ol>
&lt;p>Далее я буду оперировать вот этой &lt;a href="https://docs.google.com/spreadsheets/d/1255QOgEngi7gDiQviBLXm-OhimIgUVM1ERbaPHjaeM8/edit?usp=sharing">табличкой&lt;/a>, если хотите можете зайти и скопировать её к себе и поиграть с цифрами.&lt;/p>
&lt;p>Исходные данные, что за такой кредит мы переплатим ~2 млн:
&lt;img src="https://vanadium23.me/images/mortgage.png" alt="">&lt;/p>
&lt;p>Вносим 100 тысяч на 4 месяц и получаем, что на 3 месяца раньше закроем кредит и 230 тыс. сэкономим:
&lt;img src="https://vanadium23.me/images/mortgage-period.png" alt="">&lt;/p>
&lt;p>А теперь ловкость рук, вносим 100 тысяч и уменьшаем платёж:
&lt;img src="https://vanadium23.me/images/mortgage-payment.png" alt="">&lt;/p>
&lt;p>Получается, что опять на 3 месяца раньше и 230 тыс. экономии.&lt;/p>
&lt;blockquote>
&lt;p>В чём подвох?&lt;/p>
&lt;/blockquote>
&lt;p>В том, что все плательщики платят по присланному платежу в случае уменьшение, но если вы и так были готовы платить по 23 тысячи, то и продолжайте их платить.
Тогда срок окажется таким же как при уменьшение (удивительно, математика сошлась), только в запасе у вас останется манёвр в случае проблем с деньгами.&lt;/p>
&lt;blockquote>
&lt;p>Меня всегда удивляло что люди что-то там выбирают. У них есть остаток долга, кредит, который считается от остатка долга. Закончится он когда выплатишь его полностью. Других каких-то переменных вообще не видно!&lt;/p>
&lt;/blockquote>
&lt;p>(c) &lt;a href="https://twitter.com/strizhechenko/status/1350135629137534977">@strizhechenko&lt;/a>&lt;/p></description></item><item><title>Адаптация подходов под себя</title><link>https://vanadium23.me/adapt-process/</link><pubDate>Sun, 27 Sep 2020 09:00:00 +0300</pubDate><guid>https://vanadium23.me/adapt-process/</guid><description>&lt;p>Это первая заметка, которая попадает из приватной заметочницы в блог. Недавно допрошёл курс &amp;ldquo;Образование для образованных&amp;rdquo; и ознакомился с &lt;a href="https://en.wikipedia.org/wiki/Constructionism_(learning_theory)">теорией конструкционизма&lt;/a>. В рамках него знание, которое не было написано, не может считаться выученным. Все заметки, которые будут так попадать, будут иметь тег evergreen по имени &lt;a href="https://notes.andymatuschak.org/">одноимённой методики&lt;/a>. Можно считать это моей адаптаций данного подхода.&lt;/p>
&lt;p>Люди очень хотят быть продуктивными, но при этом не хотят тратить на это время. В итоге, вместо того, чтобы отделять важное от неважного, они ждут что это за них сделает программа. Часть из них уже и так дошла до этого, например в amazing marvin есть &amp;ldquo;стратегия&amp;rdquo;, которая даёт рандомную задачу из списка дел на сегодня.&lt;/p>
&lt;p>Более правильным подходом было бы осмысленние описаных дисциплин в переложение на себя или более простым языком метод проб и ошибок. Главное в этом не скатываться опять в крайности: перепроверять очевидные вещи раз за разом - не нравится ходить в спортзал, найдите более интересный спорт.&lt;/p>
&lt;p>Для себя решил вести дневники экспериментов, когда пытаюсь попробовать что-то новое:&lt;/p>
&lt;ul>
&lt;li>в них всегда есть проблема, цель и сроки эксперимента.&lt;/li>
&lt;li>дневник с описанием что удобно-неудобно и почему.&lt;/li>
&lt;li>в конце написаны выводы и либо внедряется, либо выбрасывается и пишется почему.&lt;/li>
&lt;/ul>
&lt;p>Выглядит вся эта система как продуктовый подход к себе, но нет. В данном случае не хватает метрик, да и думаю что никому они особо не нужны.
Скорее это всё направлено на накопления опыта и попытка сделать на основе него что-то новое при помещение известного в неизвестный контекст.&lt;/p></description></item><item><title>Про dotfiles</title><link>https://vanadium23.me/dotfiles/</link><pubDate>Sun, 13 Sep 2020 09:00:00 +0300</pubDate><guid>https://vanadium23.me/dotfiles/</guid><description>&lt;p>В мире есть два типа людей: те, которые пользуются настройками по умолчанию и те, кто всё настраивают под себя.
Первый подход имеет под собой мысль о том, что не важно на каком компьютере ты окажешься - всё для тебя будет привычно, но при этом запоминать всю фантазию авторов приложений.
С другой стороны, можно организовать окружение так, чтобы максимально быстро сделать его привычным.&lt;/p>
&lt;p>Можете начать с того, чтобы пойти в &lt;a href="https://github.com/search?q=dotfiles">поиск&lt;/a> на github и посмотреть сколько вообще есть таких репозиториев. Стоит на них посмотреть потому, что это хорошая отправная точка для того, чтобы начать писать свои. Почему это называется dotfiles? Всё просто - большинство настроек консольных (и не только) утилит делается с помощью скрытых файлов, которые начинаются с точки.
Дальше кратко, что можно настроить с кратким описанием.&lt;/p>
&lt;h3 id="консоль">Консоль&lt;/h3>
&lt;p>Первое надо определиться с шеллом, благо выбора теперь много: bash, zsh, fish и прочая эзотерика.
Мой выбор остановился на zsh и долго время использовал с oh-my-zsh, потом перешёл на presto, но понял что это всё дико замедляет старт консоли. В итоге, всё выкинул и просто написал с нуля.
Из полезных мыслей:&lt;/p>
&lt;ul>
&lt;li>Перекрашивать цвет консоли в зависимости по hostname.&lt;/li>
&lt;li>Иметь source .zshrc_local, чтобы иметь локальные настройки с приватными данными.&lt;/li>
&lt;/ul>
&lt;h3 id="git">Git&lt;/h3>
&lt;p>Git из довольно простой утилиты превратился в комбайн на любой случай. Вероятно из-за этого появляется куча обёрток (например, &lt;a href="https://jonas.github.io/tig/">tig&lt;/a>) или пользуются встроенным в IDE плагином (иногда не зная как оно работает). Какие проблемы можно выделить? Многословность команд по буковкам, и ещё хуже многословность по смыслам: checkout - и переключение между ветками, и по коммитам, и по рефлогам (не встречались с рефлогами? счастливый человек!). Соответственно, чтобы избежать этих проблем можно настроить себе алиасы в &lt;code>.gitconfig&lt;/code>.
Из полезных мыслей:&lt;/p>
&lt;ul>
&lt;li>В gitconfig есть include, то есть тоже можно сделать &lt;code>.gitconfig_local&lt;/code>.&lt;/li>
&lt;li>И что более важно есть &lt;a href="https://git-scm.com/docs/git-config#_conditional_includes">includeIf&lt;/a>, и можно по пути репозитория подменять ssh-ключи и email.&lt;/li>
&lt;li>Можно настроить &lt;code>.gitignore_global&lt;/code>, чтобы не добавлять всякие &lt;code>*.swp&lt;/code> в каждый репозиторий.&lt;/li>
&lt;/ul>
&lt;h3 id="config">.config&lt;/h3>
&lt;p>GUI приложения начали по аналоги с консольными складывать свои настройки, но так как их может быть много, то вместо одного файла используют папку &lt;code>.config/SOFTNAME/&lt;/code>. Туда можно положить настройки шрифтов, настройки текстового редактора (например, VS Code вместо settings sync который они выкатывали полгода) или используемого window managers.&lt;/p>
&lt;h3 id="итого">Итого&lt;/h3>
&lt;p>Последняя полезная команда на сегодня, который подсказал коллега на работе ссылаясь на &lt;a href="https://news.ycombinator.com/item?id=11070797">статью&lt;/a>, это как устанавливать на новый компьютер:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git --git-dir&lt;span style="color:#f92672">=&lt;/span>$HOME/.myconf/ --work-tree&lt;span style="color:#f92672">=&lt;/span>$HOME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>На этом всё. (:&lt;/p></description></item><item><title>Вишлист на Д.Р. 2020</title><link>https://vanadium23.me/wishlist-2020/</link><pubDate>Sun, 06 Sep 2020 17:00:00 +0300</pubDate><guid>https://vanadium23.me/wishlist-2020/</guid><description>&lt;h2 id="wishlist-2020">Wishlist 2020&lt;/h2>
&lt;ol start="0">
&lt;li>Термометр с выносным щупом, типа &lt;a href="https://gsmin.ru/catalog/dom_i_ofis/tovary_dlya_kukhni/kukhonnyy_termometr_so_shchupom_tekhmetr_t_01820_chernyy/">такого&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://msk.mirbeer.ru/catalog/samogonovarenie/bondarnie_izdeliya/bochka_iz_skalnogo_duba_beervingem_3_l/">Деревянная бочка 3л&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ikea.com/ru/ru/p/kalasfint-kuvshin-s-kranom-prozrachnoe-steklo-10446307/">Кувшин с краном&lt;/a>&lt;/li>
&lt;li>Сифон для газирования воды - не разобрался пока какой нужен, главное чтобы балончики продавались в России.&lt;/li>
&lt;li>&lt;a href="https://www.medspros.ru/shop/takasima_olimp_sk_1_2.html">Коленный стул (чёрный)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://foxpox.ru/shop/UID_1614.html">Xiaomi Universal IR Remote Controller Hub&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.deadbrush.ru/catalog/games/homm3/">Маечки из героев, лубую кроме оплота и некрополиса (:&lt;/a> &lt;em>размер S&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.ifixit.com/Store/Tools/Pro-Tech-Toolkit/IF145-307?o=4">iFixit toolkit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pretendstore.co/products/pocket-developer">d&amp;amp;d для разработки&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="старое-доброе">Старое доброе&lt;/h3>
&lt;ol>
&lt;li>Настолки
&lt;ol>
&lt;li>&lt;a href="https://boardgamegeek.com/boardgame/237182/root">Root&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tesera.ru/game/no-thanks/">Нет уж, спасибо.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://boardgamegeek.com/boardgame/244995/illusion">Illusion&lt;/a>&lt;/li>
&lt;li>Игра Престолов. Мать драконов&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>Эволюция заметочниц</title><link>https://vanadium23.me/notes-evolution/</link><pubDate>Sun, 29 Mar 2020 09:00:00 +0300</pubDate><guid>https://vanadium23.me/notes-evolution/</guid><description>&lt;p>У меня есть какая-то непонятная страсть сохранять, складировать и каталогизировать информацией, которую обладаю. Это не какие-нибудь случайные стикеры, прикреплённые к монитору, или бумажки разбросанные по столу.
В этой заметке (&lt;em>ха-ха&lt;/em>) хочу рассказать, что пробовал и к чему пришёл из цифровых заметочниц.&lt;/p>
&lt;p>Вдохновление для написания статьи появилось из-за статьи &lt;a href="https://kortina.nyc/essays/suping-up-vs-code-as-a-markdown-notebook/">&amp;ldquo;Suping Up VS Code as a Markdown Notebook&amp;rdquo;&lt;/a>&lt;/p>
&lt;!-- more -->
&lt;h2 id="evernotehttpsevernotecom">&lt;a href="https://evernote.com/">Evernote&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://evernote.com/img/footer/footer-logo.svg" alt="Evernote logo">&lt;/p>
&lt;p>Думаю, что все кто старается делать цифровые заметки сталкивались с этим приложением. До него я вёл дневники или блокноты, которые старательно писал с какого по какой год там лежат заметки. Теперь дневники лежат пыляться на чердаке у бабушки, а Evernote в виде бэкапа на NAS.
Во времена использования Evernote, его напарником был Google Reader, где просматривал 200 заголовков в день, чтобы выцепить чего же нового произошло в индустрии. После открытия нужной статьи, она прочитывалась и с помощью Web Clipper помещалась с нужным тегом в Evernote.&lt;/p>
&lt;blockquote>
&lt;p>Что мы получали в итоге?&lt;/p>
&lt;/blockquote>
&lt;p>Гору мусора, по которой максимум производился поиск и никак не использовался.&lt;/p>
&lt;blockquote>
&lt;p>Устраивало ли меня это?&lt;/p>
&lt;/blockquote>
&lt;p>По началу да, но после прочтения статьи про &lt;a href="https://habr.com/ru/company/redmadrobot/blog/241005/">университет в Evernote&lt;/a>, осознал что не использую и десятой возможности Evernote. И вот спустя пару-тройку месяц настроил кучу тегов, списка блокнотов куда помещал свои теперь электронные дневники и дела которые надо делать в ближайшее время.&lt;/p>
&lt;blockquote>
&lt;p>На этом всё?&lt;/p>
&lt;/blockquote>
&lt;p>Как бы нет, подстава подкралась незаметно, когда Evernote на бесплатной подписке запретил использовать больше двух устройств. Это было критично потому, что у меня был домашний комп, планшет и телефон. Я мог заплатить за премиум подписку, но меня начал беспокоить тот факт, что через некоторые время закрутят гайки или введут премиум для премиума и придёться платить ещё больше.&lt;/p>
&lt;h2 id="nimbushttpsnimbuswebme">&lt;a href="https://nimbusweb.me/">Nimbus&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://nimbusweb.me/new-style-img/nimbus-note-short-logo.svg" alt="Nimbus logo">&lt;/p>
&lt;p>В этот момент появился Nimbus, который хотел выехать на том, что Evernote поменяли свою политику. Кроме этого у них так же был клиппер, а мобильное приложение работало шустрее. Миграция не составила труда, так как они умели работать с бекапом Evernote в формате enex.
Потыкал в неё чисто ради интереса, так как проблемы с тем что надо платить она не решает.&lt;/p>
&lt;p>NB: сейчас происходит тоже самое только уже Nimbus vs Notion, судя по тому как быстро они добавили функциональность таблиц.&lt;/p>
&lt;h2 id="google-keephttpskeepgooglecom">&lt;a href="https://keep.google.com/">Google Keep&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://www.gstatic.com/images/branding/product/1x/keep_48dp.png" alt="Keep logo">&lt;/p>
&lt;p>Если мне не изменяет память, то вместе с обновлением до android 4 (или 4.1) прилетело приложение google keep. Оно не идёт ни в какое сравнение с предыдущими двумя программами, потому что ближе подходят к идеологии стикеров на монитор. Нет полноценного WYSIWYG редактора, карточное представление заметок, но зато в них можно рисовать или вставлять картинки.
Скорее всего задумка была в том, чтобы зайти через удобное мобильное приложение.&lt;/p>
&lt;h2 id="joplinhttpsjoplinapporg">&lt;a href="https://joplinapp.org/">Joplin&lt;/a>&lt;/h2>
&lt;p>Начал искать приложение, которое позволяло бы хранить заметки только у себя и своём сервере. Нашёл Joplin, который был не сильно хуже чем Nimbus, но хорошо отвечал требованиям для паранойи:&lt;/p>
&lt;ol>
&lt;li>файлы храняться в markdown заметках&lt;/li>
&lt;li>синхронизация идёт через Nextcloud (просто папку забекапить)&lt;/li>
&lt;li>вся дополнительная мета информация хранится в sqlite&lt;/li>
&lt;li>даже clipper есть (но он так себе)&lt;/li>
&lt;/ol>
&lt;p>На бумаге всё выглядело красиво, а вот в реализации подкачало: синхронизация доставляла лютую боль, потому что в Nextcloud всё время скапливались файлы с именем conflicted copy.&lt;/p>
&lt;h2 id="qownnoteshttpswwwqownnotesorg">&lt;a href="https://www.qownnotes.org/">QOwnNotes&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://www.qownnotes.org/bundles/pbeprojectwebpage/images/header-icon.png" alt="QOwnNotes logo">&lt;/p>
&lt;p>Тоже самое, что и Joplin, но в виду того что синхронизация для Nextcloud сделана в виде дополнения и имеет своё API, то работает получше. С другой стороны, сами приложения чуть хуже.&lt;/p>
&lt;h2 id="git-repository">Git repository&lt;/h2>
&lt;p>Ещё дольше попробовав разные приложения, я понял что складывать всё подряд довольно бесполезное занятие. С одной стороны ты можешь выжить в мире пандемии без интернета, потому что твоя подписка вот она хранится на локальном NAS, но с другой стороны это не дело заметочницы.
Исходный код программ разработчики хранят в системе контроля версий и я решил бить микроскопом по гвоздям, и использую для хранения заметок git, благо вариантов много: можно сделать себе приватный репозиторий на Gitlab или развернуть свой с помощью Gogs/Gitea.
Дальше дело остаётся только за выбором редактора.&lt;/p>
&lt;blockquote>
&lt;p>Это что мне надо будить коммитить каждый раз после написания заметки?&lt;/p>
&lt;/blockquote>
&lt;p>Ага, именно и писать к этому ещё и сообщение что же ты добавил.&lt;/p>
&lt;blockquote>
&lt;p>Стоп, а как же web clipper?&lt;/p>
&lt;/blockquote>
&lt;p>Можно использовать тот что идёт с Joplin, а можно просто писать выдержки по книгам или статьям.&lt;/p>
&lt;h3 id="vs-code">VS Code&lt;/h3>
&lt;p>Vs Code отлично подходит для написания markdown заметок с помощью нескольких расширений:&lt;/p>
&lt;ol>
&lt;li>Markdown all in one - полезные быстрые клавиши и автодополнение.&lt;/li>
&lt;li>markdownlint - потому что всё время забываю про переносы.&lt;/li>
&lt;li>Image preview - показывает изображения во время редактирования файла.&lt;/li>
&lt;li>Можно делать пользовательские сниппеты, чтобы вставить автоматически даты или заголовок в виде YAML.&lt;/li>
&lt;/ol>
&lt;p>Из минусов не нашёл хорошего плагина для проверки грамматики, поэтому пишу с ошибками в блоге и надеюсь, что при большом количестве чтения и писанины стану более грамотным. (:&lt;/p>
&lt;h3 id="организация-заметок">Организация заметок&lt;/h3>
&lt;p>Keep it simple stupid, а именно:&lt;/p>
&lt;ol>
&lt;li>Используй папки в качестве категорий или для группировки.&lt;/li>
&lt;li>Теги можно ставить в любом месте заметки с помощью @tag и потом искать с помощью &lt;code>grep&lt;/code>.&lt;/li>
&lt;li>Удобно организовать заметки с помощью &lt;a href="https://vanadium23.me/para/">P.A.R.A.&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>В целом, именно то что заметки это просто файлы по папкам даёт огромное спокойствие, что под капотом там нет 100500 вызовов синхронизаций поверх PouchDB с умными алгоритмами синхронизации конфликтов.&lt;/p>
&lt;h3 id="gitjournalhttpsgitjournalio">&lt;a href="https://gitjournal.io/">GitJournal&lt;/a>&lt;/h3>
&lt;p>Приложение, которое отлично дополняет этот подход на мобильном приложение. Ради него и была большая часть статьи, потому что раньше всегда отвечал, что веду заметки только на компе. Теперь можно комфортно заниматься этим и на телефоне. Попробуйте его и поделитесь своим впечатлением.&lt;/p>
&lt;h2 id="итого">Итого&lt;/h2>
&lt;p>Вот такая странная заметка о том, что можно использовать инструменты разработчика для ведения заметок и это получается даже удобно.&lt;/p>
&lt;p>P.s. А где notion? А dynalist и workflowy?&lt;/p>
&lt;ul>
&lt;li>Notion - он появился позже этого подхода и манит только тем, что может заменить заметки и ToDo. А потом я слышу что медленно работает, нет оффлайн и думаю зачем оно такое?&lt;/li>
&lt;li>Dynalist/Workflowy - братья-близнецы, которые представляют из себя бесконечный список из markdown, где можно углубляться бесконечно вглубь. Вот только проблема в том, что не всё в этом мире список. (:&lt;/li>
&lt;/ul></description></item><item><title>Немножко про модули в golang</title><link>https://vanadium23.me/golang-modules/</link><pubDate>Sun, 08 Mar 2020 09:00:00 +0300</pubDate><guid>https://vanadium23.me/golang-modules/</guid><description>&lt;blockquote>
&lt;p>“Before software can be reusable, it first has to be usable.” – &lt;a href="https://en.wikipedia.org/wiki/Ralph_Johnson_(computer_scientist)">Ralph Johnson&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Это статья скорее для себя, нежели чем хотелось чем-то поделиться. Идея её написания висела довольно давно, но сейчас сподвигло её написать статья &lt;a href="https://fasterthanli.me/blog/2020/i-want-off-mr-golangs-wild-ride/">&amp;ldquo;I want off Mr. Golang&amp;rsquo;s Wild Ride&amp;rdquo;&lt;/a>. Мысленно можно разделить эту статью на две части: первая, в которой идёт обсуждение объединения или нормализации API между разными операционными системами, и вторая, в которой идёт речь про модули и их реализацию. Russ Cox на &lt;a href="https://research.swtch.com/">своём сайте&lt;/a> сделал серию из 11 (!) статей, чтобы объяснить почему модули это не так просто, как казалось. Давайте кратко пройдёмся по истории работы с библиотеками в golang.&lt;/p>
&lt;!-- more -->
&lt;h2 id="ненавистный-gopath">Ненавистный GOPATH&lt;/h2>
&lt;p>Первое, что тебе нужно было сделать прежде, чем начать работу с golang - это установить переменную GOPATH. Она была нужна для того, чтобы команда &lt;code>go get&lt;/code> знала куда складывать пакеты. Сейчас есть значение по умолчанию равное &lt;code>$HOME/go&lt;/code>, что немножко упрощает работу, но не сильно. В качестве неймспейса для всех библиотек используется формат &lt;code>host/namespace/lib&lt;/code>, например: &lt;code>github.com/xo/usql&lt;/code>.
Пробуем поставить утилиту &lt;code>usql&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>% time go get github.com/xo/usql
56.93s user 6.39s system 85% cpu 1:13.98 total
% tree -d -L 3 ~/go/src
├── github.com
│   ├── alecthomas
│   │   ├── chroma
│   │   ├── kingpin
│   │   ├── template
│   │   └── units
│   ├── danwakefield
│   │   └── fnmatch
│   ├── denisenkom
│   │   └── go-mssqldb
│   ├── dlclark
│   │   └── regexp2
│   ├── gohxs
│   │   └── readline
│   ├── golang-sql
│   │   └── civil
│   ├── go-sql-driver
│   │   └── mysql
│   ├── lib
│   │   └── pq
│   ├── mattn
│   │   ├── go-isatty
│   │   ├── go-runewidth
│   │   └── go-sqlite3
│   ├── xo
│   │   ├── dburl
│   │   ├── tblfmt
│   │   ├── terminfo
│   │   ├── usql
│   │   └── xoutil
│   └── zaf
│   └── temp
└── golang.org
└── x
├── crypto
└── sys
% du -h --max-depth=1 ~/go/src/
77M ./github.com
35M ./golang.org
111M .
&lt;/code>&lt;/pre>&lt;p>Утилита предназначена для работы с разными базами данных и ожидаемо ей требуется много библиотек-драйверов для работы, но 111 мегабайт и минута на скачивание выглядит, как перебор. Если вам нужна только сама утилита, всегда можно использовать опцию &lt;code>-u&lt;/code>. В защиту такого подхода, хочу сказать что использование прямого соответствия между импортом библиотеки и пути по которому она находится удобно. Так как язык разработал Google, то сразу был сделан вывод о том, что вся эта система работала поверх монорепозитория внутри компании и такое использование было логично. Но как только язык вышел публично, сразу стало понятно что использовать хост сервиса в пути не самое удобное решение. В случае, если проект был перемещён в другое пространство, ничего страшного не происходит, но вот если поменялся хост, то труба. Об этом подумали несколько людей и началась вторая эпоха.&lt;/p>
&lt;h2 id="средневековый-vendor">Средневековый vendor&lt;/h2>
&lt;p>Когда node.js только набирал популярность (версии 0.8-0.12), шёл довольно большой холивар на тему вендоринга зависимостей. Были люди, которые говорили, что нужно складывать всю папку node_modules в репозиторий и при обновлении комиттить изменения, но в итоге сообщество пришло к тому, что это приносит только лишние расходы и отказались. Как мы все потом знаем, это привело к трагедии &lt;strike>Дарта Плегаса&lt;/strike> &lt;a href="https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm">leftpad&lt;/a>. В Golang решили пойти тем же путём и появилась папка vendor, правда чтобы её использовать необходимо было перезаписать GOPATH в текущую директорую и тогда начинались пляски с тем, что в директории должна была быть папка src, а в &lt;code>.gitignore&lt;/code> шли директории &lt;code>bin/&lt;/code> и &lt;code>pkg/&lt;/code>. Эту проблему надо было автоматизировать и появились инструменты, чтобы с таким подходом было работать удобно, а именно &lt;a href="https://github.com/Masterminds/glide">glider&lt;/a>, а в последствии &lt;a href="https://github.com/golang/dep">dep&lt;/a>. Более того, &lt;code>dep&lt;/code> был сделан как официальный эксперимент группы разработки языка, и в итоге именно он дал толчок развитию модулей в go 1.11. Из-за данных инструментов в репозиториях пропали папки &lt;code>vendor&lt;/code>, так как они создавали lock-файлы и можно было воспроизвести среду. А вот проблемы были в том, что каждый инструмент делал свой формат. :(&lt;/p>
&lt;h2 id="современный-gomod">Современный go.mod&lt;/h2>
&lt;p>И здесь мы возвращаемся к модулям с которых началась эта статья. В go 1.11 можно было с помощью переменной GO111MODULE=on, а с недавним релизом go 1.14 данное поведение стало по умолчанию. Что нужно сделать для того, чтобы его использовать прекрасно описано в &lt;a href="https://blog.golang.org/using-go-modules">The Go Blog&lt;/a> в 4 (!) частях. Здесь бы хотелось сосредоточиться на том, почему это не современная штука.&lt;/p>
&lt;h3 id="проблема-1-перейти-надо-всем">Проблема №1. Перейти надо всем&lt;/h3>
&lt;p>Разработчики golang молодцы, что дали 3 минорные версии для того, чтобы авторы библиотек могли перейти на go.mod и судя по тому, что из &lt;a href="https://github.com/search?q=go.mod&amp;amp;type=Issues">21000 открытых issues&lt;/a> на гитхабе закрыто 18000 все были нацелены на использование данного инструмента.&lt;/p>
&lt;h3 id="проблема-2-формат-mod-в-gomod">Проблема №2. Формат mod в go.mod&lt;/h3>
&lt;p>Долго бомбило после прочтения &lt;a href="https://www.python.org/dev/peps/pep-0518/">PEP 518&lt;/a>, что выбрали формат toml. Главное, что его выбрали потому что json слишком вербозный, а yaml имеет слишком сложную спецификацию. В golang решили просто пойти своим путём и сделать формат, который надо парсить. Можете пойти почитать, как он устроен &lt;a href="https://github.com/golang/go/wiki/Modules#gomod">тут&lt;/a>. Уверен, что выбор был сделан исходя из принципа упрощения: зачем брать известное, если можно сделать своё простое? Более того, этот файл нельзя трогать руками. Всё взаимодействие с ним идёт через команду &lt;code>go get&lt;/code>, так что частично мы откатились к прежнему решению с GOPATH, просто теперь все пакеты лежат в &lt;code>GOPATH/pkg&lt;/code>.&lt;/p>
&lt;h3 id="проблема-3-версионирование">Проблема №3. Версионирование&lt;/h3>
&lt;p>Все мы оказывались в ситуации, когда автор библиотеки не удосужился указать версии своих зависимостей и занимаешься бинарным поиском совместимых пакетов. В golang решили пойти дальше и сказать, что изменение мажорной версии должно приводить к изменении путей. Тема хорошая, но реализация полагается на рациональность людей, который будут эту мажорную версию менять. А как мы знаем, у этой проблему есть две крайности: Chrome,который имеет 80 версию на данный момент, и PostgresQL, который долгое время жил на 9.x номенклатуре и утверждал, что вторая цифра - это тоже мажорный релиз. Справился ли подход golang с тем, чтобы пакеты всегда собирались при обновлении пакетов? Нет, для примера вы можете взять обновление пакета &lt;a href="https://github.com/mbobakov/grpc-consul-resolver/issues/15">grpc-consul-resolver&lt;/a> из-за того, что в минорной версии сменился интерфейс, и это библиотека от google.&lt;/p>
&lt;h3 id="проблема-4-настройки">Проблема №4. Настройки&lt;/h3>
&lt;p>Ладно, тут я просто напишу GOSUMDB=off, GOPRIVATE=*example.com* и обязательно GO111MODULE=on.&lt;/p>
&lt;h2 id="итого">Итого&lt;/h2>
&lt;p>Немножко грустно от того, что в мире уже десяток популярных языков программирования, а понятной и простой системы по работе с пакетами так до сих пор и изобретают с нуля.&lt;/p>
&lt;p>P.s. а может быть и не с нуля, но осадочек остался.&lt;/p>
&lt;p>P.p.s. кстати, с модулями не отказались от вендоринга, даже комманду сделали для этого &lt;code>go mod vendor&lt;/code>.&lt;/p></description></item><item><title>Переезд с Google analytics на Cloudflare workers</title><link>https://vanadium23.me/remove-google-analytics/</link><pubDate>Sat, 15 Feb 2020 09:00:00 +0300</pubDate><guid>https://vanadium23.me/remove-google-analytics/</guid><description>&lt;p>Прошёл почти год с того момента, как &lt;a href="https://vanadium23.me/migrating-to-hugo/">я перевёз этот блог с jekyll на hugo&lt;/a>. В той статье всё закончилось на том, что половина веса страницы занимает гугл аналитика. Меня это немножко волновало, но потом я добавил скрипт для шаринга в соцсети и понеслось. Напоминает занятие по уборке дома, сколько раз тебе это не сделать, то рано или поздно придёться к этому вернуться.&lt;/p>
&lt;p>Не смотря на то, что в этот блог заходит не так много людей, терять числа куда и сколько не очень хотелось. Самым простым вариантом было бы расположить блог на личной VDS и смотреть в логи nginx, но не хотелось отказываться от бесплатного хостинга Github Pages.
Поэтому я перевёл блог за Cloudflare, что немножко шило на мыло, но в нём есть дашборд с заходами.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/cloudflare-analytics.png" alt="Cloudflare analytics">&lt;/p>
&lt;p>Всё что она показывает - это количество заходов в разбивке по странам, а хочется смотреть за хитами по страницам. И тут вспомнил, что в прошлом году Cloudflare представили свой новый продукт Workers.&lt;/p>
&lt;h3 id="как-он-работает">Как он работает?&lt;/h3>
&lt;p>Cloudflare Workers - это javascript (или Rust) код, который они деплоят в свои датацентры и вызывают на каждый запрос домена, который находится за CDN. Наверное, можно это отнести к классу serverless. Бесплатный тариф не очень большой: 100000 запросов в месяц и один бесплатный поддомен в зоне workers.dev, но для начала вполне хватит. Помимо кода, есть Key-Value хранилище в которое можно положить какие-то данные.
Если вы ещё не смотрели на них, то можете посмотреть их &lt;a href="https://developers.cloudflare.com/workers/tutorials/build-a-todo-list/">руководства&lt;/a>, может что-нибудь понравиться.&lt;/p>
&lt;h3 id="influxdb--grafana--3">InfluxDB + Grafana = &amp;lt;3&lt;/h3>
&lt;p>Дело оставалось за малым, складывать все запросы в какую-нибудь TSDB. На работе мы вовсю используем InfluxDB, поэтому выбор остался за ней. Она имеет довольно простой протокол по массовой записи в базу с помощью &lt;a href="https://docs.influxdata.com/influxdb/v1.7/tools/api/#examples-6">HTTP API&lt;/a>. За вечер был написан код на js, который на каждый входящий запрос проксировал его ниже, а также писал метрику. Около 3 часов было убито на то, почему в редакторе Cloudflare метрики отправляются, а на блоге нет. Оказалось, что worker может работать только с определенными портами и порт по умолчанию InfluxDB не входит в этот список. Пришлось перезапустить его на стандартном http порту. Естевственно, когда вся схема заработала, захотелось посчитать не приносит ли это большого оверхеда и цифры оказались в районе 50-150 ms. Если честно, по сравнению с первоначальным ответом - это очень много, с другой стороны мы удаляем 40 кб js скриптов с клиента, поэтому решил что это приемлемо. В запасе остаётся вариант, что его можно уменьшить за счёт переписывания кода на Rust.&lt;/p>
&lt;p>Финальный дашборд в графане выглядит так:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/grafana-blog.png" alt="Grafana blog">&lt;/p>
&lt;p>Если у вас похожий стек, то можете подключить себе этого же воркера из репозитория &lt;a href="https://github.com/vanadium23/cf-metrics">cf-metrics&lt;/a>.&lt;/p>
&lt;p>P.s. с удивленим обнаружил, что мой перевод по Laravel ещё жив и раздаётся с &lt;a href="http://www.laravelbestpractices.com/">www.laravelbestpractices.com&lt;/a>.&lt;/p>
&lt;p>P.p.s. В скрипте учитываю заголовок Do Not Track, просто потому что захотелось.&lt;/p></description></item><item><title>Выдержка из книги "Building microservices"</title><link>https://vanadium23.me/building-microservices/</link><pubDate>Sun, 02 Feb 2020 09:00:00 +0300</pubDate><guid>https://vanadium23.me/building-microservices/</guid><description>&lt;p>Книга разбирает типовой способ разбора монолитов на микросервисы. Ничего супер нового не рассказывает, скорее объединяет все известные практики при написаниии микросервисов. Понравилось разделение по главам и их слабая связь, можно открыть любую и читать рецепты. С другой стороны, все рецепты опять написаны про типичный магазин и разные сложности с обратной совместимостью или миграциями были задвинуты на второй план. Далее краткий пересказ каждой главы.&lt;/p>
&lt;h2 id="microservices">Microservices&lt;/h2>
&lt;p>Микросервис - маленький сервис, который делает один бизнес домен и делает его хорошо.
При этом команда должна быть максимально автономной. Их делают чтобы:&lt;/p>
&lt;ul>
&lt;li>выбрать наиболее подходящую технологию&lt;/li>
&lt;li>независимо разрабатывать/деплоить&lt;/li>
&lt;li>отваливась только часть функциональность&lt;/li>
&lt;li>независимо маштабировать&lt;/li>
&lt;/ul>
&lt;p>В чем разница с SOA?&lt;/p>
&lt;ul>
&lt;li>SOA была хорошей идеей, но она не прижилась. (&lt;strong>Примечание: спорное утверждение&lt;/strong>)&lt;/li>
&lt;/ul>
&lt;p>Другие способы распила:&lt;/p>
&lt;ul>
&lt;li>Шаренные либы - путь в никуда, не можем менять технологию&lt;/li>
&lt;li>Модули - отличие от либ, что можно делать hot-reloads, e.g.: Erlang modules. Но такой же путь вникуда.&lt;/li>
&lt;/ul>
&lt;h2 id="the-evolutionary-architect">The Evolutionary Architect&lt;/h2>
&lt;p>Архитектура происходит из стратегии. Если у вас нет стратегии развития, то и хорошей архитектуры не построить.
Чтобы сделать хорошую архитектуру на основе стратегии необходимо:&lt;/p>
&lt;ul>
&lt;li>Предоставить принципы, с помощью которых идёт выбор технических решений&lt;/li>
&lt;li>Сделать набор практик на основе этих принципов&lt;/li>
&lt;li>Создать команду &amp;ldquo;управления&amp;rdquo;, которая следит что выбранные практики и принципы применяются в системах.&lt;/li>
&lt;/ul>
&lt;p>При этом нужно не забывать, что мы хотим автономности и команды могут расширять практики, если требуется.
Если слишком много команд не используют практики или принципы - их необходимо пересмотреть.&lt;/p>
&lt;h2 id="how-to-model-service">How to model service&lt;/h2>
&lt;p>В качестве примера предложили MusicCorp - онлайн-магазин по продаже музыкальных альбомов.
Сервисы должны быть слабо связаными (loose coupling) между собой, высоко сцепленными (high cohesion) внутри себя.
Магазин разбили на две части: склад и финансы.
Склад поделили на три микросервиса: заказы, логистика, инвентарь.
Дальше ситуации:&lt;/p>
&lt;ul>
&lt;li>Финансы лезут в базу инвентаря - всё плохо, протекло&lt;/li>
&lt;li>Финансы получают сообщения из склада - всё плохо, одна и та же модель значит разное для сервисов.&lt;/li>
&lt;li>Финансы идут в API микросервиса инвентаря - всё плохо, склад потерял свои границы.&lt;/li>
&lt;/ul>
&lt;p>Предложенный вариант строить фасад перед складом, тогда будет проще тестить, проще следить что во воне и т.д.&lt;/p>
&lt;h2 id="integration">Integration&lt;/h2>
&lt;p>Как можно между собой микросервисы интегрировать:&lt;/p>
&lt;ul>
&lt;li>Шаренная база данных - никогда так не делайте, изменения одного микросервиса сломают остальные.&lt;/li>
&lt;li>RPC - сервис посылает запрос на выполнение команды. Провоцирует каскадные падения :(&lt;/li>
&lt;li>Event-based - сервис создаёт события в шины, остальные сервисы подписываются и делают нужное. Низкая связность, но сложно тестировать.&lt;/li>
&lt;/ul>
&lt;p>Как жить фронту при этом?&lt;/p>
&lt;ul>
&lt;li>Один фронт используют несколько API при построение страницы&lt;/li>
&lt;li>Фронты пилят виджеты, которые могут встраиваться и каждый использует своё API&lt;/li>
&lt;li>Ставим API gateway для всех&lt;/li>
&lt;li>Ставим API gateway под каждого консьюмера - BFF&lt;/li>
&lt;/ul>
&lt;p>Рекомендую прочитать эту главу целиком, если доберётесь до книжки.&lt;/p>
&lt;h2 id="splitting-the-monolith">Splitting the Monolith&lt;/h2>
&lt;p>Находим куски кода, которые могут работать максимально независимо (seams, см. Working with legacy code).
Для начала мы можем разнести их в разную схему базы данных, но живут они в монолите. Каждый модуль может ходить в свою схему.
MusicCorp разбили на customers, finance, inventory. Плюс остался reporting, который может ходить везде.&lt;/p>
&lt;p>Дальше начинаются пляски с reporting, варианты:&lt;/p>
&lt;ul>
&lt;li>Репортинг использует реплику базы - плохой путь, потому что шаренные модели&lt;/li>
&lt;li>Кастомеры делают дамп в своём формате для репортинга - вполне норм, но могут быть не реалтайм данные.&lt;/li>
&lt;li>Кастомеры делают API, которая делает дамп ondemand - лучший вариант, при этом много говорилось как его праивльно запроектировать.&lt;/li>
&lt;li>Последний вариант, кастомеры пишут все изменения в шину и есть сервис который аггрерует это для репортинга.&lt;/li>
&lt;/ul>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;p>CI/CD, билды, образы, контейнеры. Скорее всего и так всё знаете.&lt;/p>
&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>Пирамида тестирования - юнитов как можно больше, UI как можно меньше.
Владельцы микросервисов должны писать юнит и сервис тесты с моками/стаббами сервисов, которые он использует.
End-to-end тесты должны писаться отдельно, запускаться отдельно и тестировать все микросервисы вживую.
Если тесты часто падают либо чиним, либо выкидываем.&lt;/p>
&lt;p>Со стабами можно очень сильно прогореть, поэтому лучше инвертировать зависимость, чтобы клиенты писали стабы для сервера.
Тогда будут готовые сервис-тесты для сервера, которые отдаёт данные. Подробнее смотри &lt;a href="https://docs.pact.io/">PACT&lt;/a>.&lt;/p>
&lt;h2 id="monitoring">Monitoring&lt;/h2>
&lt;ul>
&lt;li>Сначала собирайте низкоуровневые метрики: request rate, response timing, потом переходите на уровень приложения&lt;/li>
&lt;li>Трекайте что нижележащие сервисы живы, используйте circuit breakers.&lt;/li>
&lt;li>Стандартизируйте как вы собираете метрики.&lt;/li>
&lt;li>Все должны логировать в стандартное место. Так как их потом надо аггрегировать, то ещё и в стандартном формате&lt;/li>
&lt;li>Мониторьте всё что ниже приложения: OS, CPU, MEM.&lt;/li>
&lt;li>Делайте дашборды и call-to-action алерты.&lt;/li>
&lt;li>Прокидывайте ID между сервисами.&lt;/li>
&lt;/ul>
&lt;h2 id="security">Security&lt;/h2>
&lt;p>Api ключи
Клиентские сертификаты
Разделение по сеткам
Для пользователей SSO&lt;/p>
&lt;h2 id="conways-law">Conway&amp;rsquo;s law&lt;/h2>
&lt;p>&lt;strong>Trivia&lt;/strong>: Windows Vista получилось такой какой есть, потому что там были feature based команды. Не делайти команды по фичам, делайте по доменам.
Ничего не будет работать, если команды будут друг на друга завязаны, или кто-то с кем-то не будет договариваться.
За один сервис - отвечает одна команда.&lt;/p>
&lt;h2 id="microservices-at-scale">Microservices at Scale&lt;/h2>
&lt;p>Нужно быть готовым к тому, что всё может упасть, поэтому CAP теорема нам в помощь и выбирайте два из трёх:&lt;/p>
&lt;ul>
&lt;li>Response time/latency&lt;/li>
&lt;li>Availibility&lt;/li>
&lt;li>Durability of data&lt;/li>
&lt;/ul>
&lt;p>Предусматривайте graceful degradation.
Лучше отвалиться, чем тормозить и старайтесь знать ограничения сервисов.
Timeout&amp;rsquo;ы, пуллинг, идемподентность - наше всё.&lt;/p>
&lt;p>Не забудьте делать документацию по API!&lt;/p>
&lt;h2 id="итого">Итого&lt;/h2>
&lt;ul>
&lt;li>Моделируйте микросервисы вокруг бизнес-концепта&lt;/li>
&lt;li>Пропогандируйте культуру автоматизации&lt;/li>
&lt;li>Скрывайте сложность внутри: схему базы, язык, фреймворк, всё что можете, - для этого и нужно API&lt;/li>
&lt;li>Децентрилизируйте: предпочитайте тупые миддлвари и умные ручки&lt;/li>
&lt;li>Независимые релизы&lt;/li>
&lt;li>Назависимые падения&lt;/li>
&lt;li>Прозрачность: метрики, логи, вот это вот всё.&lt;/li>
&lt;/ul></description></item><item><title>Выдержка из книги "Просто космос"</title><link>https://vanadium23.me/just-space/</link><pubDate>Sun, 26 Jan 2020 16:00:00 +0300</pubDate><guid>https://vanadium23.me/just-space/</guid><description>&lt;p>&amp;ldquo;Манн, Иванов и Фербер&amp;rdquo; - хитрое издательство. К каждой покупке они не только прикладывают вкладыш с описаниями последних новинок, но и вставляют в начало по пять книг, которые дополняют только что полученную книжку. Так и произошло с книгой &amp;ldquo;Просто космос&amp;rdquo;, которая была рекомендована в &amp;ldquo;Путь джедая&amp;rdquo; Дорофеева. Более того, в одной из сносок Дорофеев уже сам напомнил об этой книге.
Книга хороша подходит для новичков, кто хочет систематизировать свою жизнь, но ничего нового по сравнению с &lt;a href="https://vanadium23.me/jedi-book-experiments/">&amp;ldquo;Джедайскими техниками&amp;rdquo;&lt;/a> вы там не найдёте. Вместо покупки книги, лучше купить ежедневник от автора Катерины Ленгольд, поскольку больше подтолкнёт к применению свежих навыков.&lt;/p>
&lt;!-- more -->
&lt;p>Итак, что нам пишут в книге:&lt;/p>
&lt;ol>
&lt;li>Ставим цели на спринт длинной в 9 недель.
&lt;ol>
&lt;li>9 недель выбранны, потому что это не слишком мало, но и не слишком много.&lt;/li>
&lt;li>Достаточно детальная цель: не &amp;ldquo;заняться здоровьем&amp;rdquo;, а &amp;ldquo;обойти 6 врачей и сдать показатели крови&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Выбираем себе морковки, то есть мотивируем себя ценным вознаграждением.
&lt;ol>
&lt;li>Тут предлагается упражнение по тому, чтобы их придумать себе в большом количестве.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Планируем день и неделю
&lt;ol>
&lt;li>Вместо ToDo листов разбиваем день на 4 блока по 4 часа: утро, день до обеда, после обеда и вечера.&lt;/li>
&lt;li>Разбиваем задачи на помидорки и понимаем, что времени не так много. Важные дела стараемся делать в первой половине дня.&lt;/li>
&lt;li>&lt;em>Учимся говорить &amp;ldquo;нет&amp;rdquo;&lt;/em>.&lt;/li>
&lt;li>Аналогично стараемся более крупными мазками распланировать неделю&lt;/li>
&lt;li>В конце недели идёт обязательное отслеживание прогресса по пункту 1.1&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Составьте список полезной прокрастинации
&lt;ol>
&lt;li>Одна из немногих полезных глав в книге, не поленился поискать чужие аналогичные &lt;a href="https://www.reddit.com/r/productivity/comments/eh5o6j/my_procrastination_cheatsheet/">списки&lt;/a>.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Формируйте полезные привычки и избавляйтесь от вредных&lt;/li>
&lt;li>Хорошо спите и не забывайте отдыхать&lt;/li>
&lt;li>Хорошо и правильно питайтесь&lt;/li>
&lt;li>Не забывайте про свои эмоции&lt;/li>
&lt;/ol>
&lt;p>На этом всё.
Общая оценка: круто, что всё по делу, но где же ты была раньше.&lt;/p></description></item><item><title>PaperWM для Gnome</title><link>https://vanadium23.me/gnome-paperwm/</link><pubDate>Sun, 19 Jan 2020 11:00:00 +0300</pubDate><guid>https://vanadium23.me/gnome-paperwm/</guid><description>&lt;p>Среди всех рабочих окружений, мой выбор остановился на Gnome 3. Использую его уже около четырёх лет, с переменным успехом пробую другие оконные менеджеры и окружения.После первого релиза Gnome 3, его не ругал только ленивый: новый интерфейс тормозил, требовал кучу ресурсов, да и к тому же сломал обратную совместимость с расширениями вторых версий. Но спустя 34 релиза, перехода Ubuntu со своей надстройки на чистый Gnome, можно смело утвержать, что он победил.&lt;/p>
&lt;p>Если размышлять почему, то ответом окажется комбайн с GUI. Всё в рабочем окружение имеет интерфейс для настройки мышкой, что так непривычно для пользователей Linux: от сети (спасибо, NetworkManager) до онлайн аккаунтов (для синхронизации календаря-почты) и принтеров.На этом плюсы не заканчиваются, потому что его можно расширять с помощью js. Зайдите на сайт &lt;a href="https://extensions.gnome.org/">extensions.gnome.org&lt;/a>, чтобы посмотреть доступные. Ниже опишу какими пользуюсь сейчас.&lt;/p>
&lt;h2 id="paperwmhttpsgithubcompaperwmpaperwm">&lt;a href="https://github.com/paperwm/PaperWM">PaperWM&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://github.com/paperwm/media/raw/master/tiling.png" alt="PaperWM">&lt;/p>
&lt;p>Расширение для Gnome, которое делает отображение окон тайловым.Я несколько раз пробовал для себя тайловые менеджеры окон: это был и &lt;a href="https://github.com/vanadium23/awesome-config">awesome&lt;/a>, и &lt;a href="https://github.com/vanadium23/dotfiles/blob/master/.config/i3/config">i3&lt;/a>, но каждый раз немного бездумно копировал чужие конфиги, после чего путался в комбинации клавиш. PaperWM у меня прижился больше, потому что он просто расширяет известные комбинации. Зачем использовать тайловые менеджеры? С помощью них, можно распологать окна в пропорциях экрана, а не только 50-50, как в дефолтном гноме.&lt;/p>
&lt;h2 id="auto-move-windows">Auto move windows&lt;/h2>
&lt;p>Второй плюс, если вы не хотите помнить, где какое окно располагается, то можно настроить правила для их расположения.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/automove.png" alt="Auto move">&lt;/p>
&lt;p>В моём случае получается 3 рабочих стола:&lt;/p>
&lt;ol>
&lt;li>Рабочий хром с рабочими аккаунтами, и если что-то окрывается из загрузок, то оно идёт туда.&lt;/li>
&lt;li>VS Code + Terminal &amp;ndash;&amp;gt; рабочий стол для разработки.&lt;/li>
&lt;li>Firefox + telegram &amp;ndash;&amp;gt; личное пространство.&lt;/li>
&lt;/ol>
&lt;p>Заодно, в PaperWM они были раскрашены в разные цвета, что отражается на границах приложений.&lt;/p>
&lt;h2 id="switcherhttpsgithubcomdaniellandauswitcher">&lt;a href="https://github.com/daniellandau/switcher">Switcher&lt;/a>&lt;/h2>
&lt;p>Нет, нет, это не Ведьмак на switch. Это расширение на Gnome, который позволяет переключаться между приложениями по заголовку. Полезно когда находишься в рабочем пространстве, а надо уйти на телеграм по тем или иным причинам.&lt;/p>
&lt;p>&lt;img src="https://github.com/daniellandau/switcher/raw/master/running.gif" alt="Switcher">&lt;/p>
&lt;h2 id="dash-to-dockhttpsmicheleggithubiodash-to-dock">&lt;a href="https://micheleg.github.io/dash-to-dock/">Dash to dock&lt;/a>&lt;/h2>
&lt;p>Ладно, надо было в статью вставить что-то, что косит под MacOS. Выбор пал на dash to dock, который переносит панель любимых и запущенных приложений вниз экрана.&lt;/p>
&lt;p>&lt;img src="https://github.com/micheleg/dash-to-dock/raw/master/media/screenshot.jpg" alt="Dash to dock">&lt;/p>
&lt;p>Кроме того, появляется быстрые комбинации формата Super + число для переключения на эти приложения.Активно пользуюсь только при старте ноутбука, чтобы всё нужное запустить, хотя осталось немного чтобы воткнуть это всё в автозагрузку.&lt;/p></description></item><item><title>Выдержка из книги "Digital minimalism"</title><link>https://vanadium23.me/digital-minimalism/</link><pubDate>Sun, 12 Jan 2020 16:00:00 +0300</pubDate><guid>https://vanadium23.me/digital-minimalism/</guid><description>&lt;p>В декабре прочитал книжку &amp;ldquo;Цифровой минимализм&amp;rdquo;. Автор чем-то напоминает луддитов и пытается бороться с &lt;strike>ветряными мельницами&lt;/strike> смартфонами.
У себя не чувствую проблему с тем, что телефон отнимает слишком много времени. Социальные сети, на который идёт упор в книге, давно выброшены.
Остался только Twitter, но им стараюсь пользоваться только на компьютере через tweetdeck. С другой стороны, книга была высоко оценена в голосование goodreads.com за 2019 год: пятое место в жанре нон-фикшн.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/digital-wellbeing.jpg" alt="Digital wellbeing на андроид телефонах">&lt;/p>
&lt;p>Так как книга про минимализм, сделал минималистичную выдержку:&lt;/p>
&lt;ul>
&lt;li>Экономика внимания - бич 21 века, придуманный в конце 19 газетой New York Times.&lt;/li>
&lt;li>Цифровой минимализм - это не борьба со смартфоном, а использование современных технологий только себе на пользу.
&lt;ul>
&lt;li>Принцип №1: цифровой мусор затратен.
&lt;ul>
&lt;li>Аргумент - &lt;a href="https://ru.wikipedia.org/wiki/%D0%A2%D0%BE%D1%80%D0%BE,_%D0%93%D0%B5%D0%BD%D1%80%D0%B8">экономика Торо&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Принцип №2: оптимизация важна.
&lt;ul>
&lt;li>Аргумент - &lt;a href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D1%83%D0%B1%D1%8B%D0%B2%D0%B0%D1%8E%D1%89%D0%B5%D0%B9_%D0%B4%D0%BE%D1%85%D0%BE%D0%B4%D0%BD%D0%BE%D1%81%D1%82%D0%B8">закон убывающей отдачи&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Принцип №3: преднамеренность приносит удовольствие.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Цифровая уборка
&lt;ul>
&lt;li>Составить свод чётких правил, чем можно пользоваться и сколько во время цифрового шабата.&lt;/li>
&lt;li>Отказ от смартфона на 30 дней или хотя бы от части приложений, которые приносят наибольший вред.&lt;/li>
&lt;li>Найти себе увлечение для образовавшегося свободного времени.&lt;/li>
&lt;li>Вернуться к использованию телефона, но начать с нуля: обдумывая каждое приложение.
&lt;ul>
&lt;li>Отвечать вашим главным ценностям.&lt;/li>
&lt;li>Делать это наилучшим образом.&lt;/li>
&lt;li>Быть инструментом для достижения целей.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Люди стало мало уделять внимания к уединению с самим собой из-за борьбы со скукой.
&lt;ul>
&lt;li>Аргумент - много полезных вещей рождалось именно в уединение.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Практика: использовать мессенджеры только в определенное время или для определенных целей.&lt;/li>
&lt;li>Чем заменить досуг?
&lt;ul>
&lt;li>Прогулки - без музыки и подкастов, потому что это тоже потребление.&lt;/li>
&lt;li>Писать письма самому себе в будущем.&lt;/li>
&lt;li>Делать что-то руками, так как ремесло несёт удовлетворение.&lt;/li>
&lt;li>Социализация в жизни: клубы или встречи с друзьями.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Кроме планирования работы, люди забывают планировать отдых.
&lt;ul>
&lt;li>Квартальный план - большой отпуск с поездками.&lt;/li>
&lt;li>Недельный план - досуг на выходные.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>TickTick</title><link>https://vanadium23.me/ticktick/</link><pubDate>Mon, 16 Dec 2019 12:00:00 +0300</pubDate><guid>https://vanadium23.me/ticktick/</guid><description>&lt;p>Около двух месяцев назад Todoist разродился глобальным обновлением, которое явно направлено на уход в корпоративный сегмент. Выглядит так, что они хотят вытеснить Asana с позиции Todo-листов для команд. Поэтому пришло время снова вернутся к выбору инструмента.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Disclaimer:&lt;/strong> важен не инструмент, а подход. Приложение не решает никакую проблему, но задротство вокруг этого может приносить некое удовольствие.&lt;/p>
&lt;/blockquote>
&lt;p>Вместо использования Google решил спросить чем пользуются народ и получился такой список:&lt;/p>
&lt;ul>
&lt;li>Notion&lt;/li>
&lt;li>Microsoft To Do (он же Wunderlist)&lt;/li>
&lt;li>Things 3&lt;/li>
&lt;li>TickTick&lt;/li>
&lt;li>MeisterTask&lt;/li>
&lt;/ul>
&lt;p>Немного посмотрев на превью приложений, выбрал TickTick, сразу оплатил премиум на месяц и пошёл его изучать.&lt;/p>
&lt;p>&lt;strong>TL;DR:&lt;/strong> Todoist - простой, TickTick - комбайн, выбирайте сами.&lt;/p>
&lt;h2 id="плюсы">Плюсы&lt;/h2>
&lt;p>Todoist имеет типичную современную вёрстку, когда контент идёт узкой полоской посередине с двумя полосками по бокам. TickTick же выглядит как отличный рабочий стол, в котором тот же список растянули на 2/3 экрана и добавили ещё большое белое место под описание задач:
&lt;img src="https://vanadium23.me/images/ticktick.png" alt="Desktop view">&lt;/p>
&lt;p>Рассмотрим, что у них получилось сделать из-за этого хорошо:&lt;/p>
&lt;ol>
&lt;li>Можно подключить внешний календарь и он попадает не в виде задач. У них стоит маленький значок, того что это событие и есть встроенный вид календаря. Он сильно помогает при планировании дня.&lt;/li>
&lt;li>Вместо проектов в TickTick есть списки и объединяются они в папки. Выглядят как проекты в Todoist, но мы знаем что именование одна из двух проблем программирования. Поэтому их приятней раскладывать по &lt;a href="https://vanadium23.me/para/">P.A.R.A&lt;/a>.&lt;/li>
&lt;li>Снизу есть кнопка Summary, где можно сразу посмотреть сделанное за день, неделю или месяц. Это очень удобно для проведения обзора, что было сделано. В Todoist использовал Google Spreadsheet через IFTTT для этого.&lt;/li>
&lt;li>И в левом нижнем углу есть таймер помидорок. Помимо этого, можно ткнуть правой кнопкой и начать помидорку на конкретной задачи, и после этого увидеть сколько времени было потрачено.&lt;/li>
&lt;/ol>
&lt;p>Помимо удобство связанных с рабочий столом, есть другие удачные вещи:&lt;/p>
&lt;ol>
&lt;li>Встроенная статистика: можно смотреть неделя к неделе количество задачек, считать помидорки, много всего. Очень приятно, что успеваемость за неделю они считают по формуле - количество сделанного поделить на запланированное, даже с учётом перенесенных задач.&lt;/li>
&lt;li>Чеклисты внутри задач - это бомба, которой так не хватает Todoist. Они не отображаются как подзадачи в общем списке дел, и при отметке пункта как выполненного, то отмечается как прогресс 1/N.&lt;/li>
&lt;li>Любой список (проект) можно перевести в вид канбан доски. Не знаю зачем, но некоторые ведут задачи в Trello и это важная функциональность.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://vanadium23.me/images/ticktick-stats.png" alt="Пример встроенной статистики">&lt;/p>
&lt;h2 id="минусы">Минусы&lt;/h2>
&lt;p>Первую неделя была эйфория, которая &lt;em>конечно&lt;/em> сменилась разочарованием от некоторых элементов:&lt;/p>
&lt;ol>
&lt;li>Всё (большинство) надо делать через правую кнопку мыши. Для браузера - это спорное решение, пару миллиметров выше или ниже и уже выпадет контекстное меню.&lt;/li>
&lt;li>Умный разбор строки с задачей: даты, теги и списки. Оказалось, что всё можно сделать только при добавлении задачи, а дальше уже меняй через меню по правой клавише мыши.&lt;/li>
&lt;li>В мобильном приложении можно стряхнуть событие из календаря, чтобы не мешало. В браузере так сделать нельзя, и этого сильно не хватает.&lt;/li>
&lt;li>Горячие клавиши через TAB, вот уж где Asana меня настигла. Не стоит говорить, что браузер начинает скакать по элементам.&lt;/li>
&lt;/ol>
&lt;h2 id="выводы">Выводы&lt;/h2>
&lt;p>Вернусь обратно на Todoist, потому что сложно перебить их разбор строчки задания - в своём роде, это хорошая командная строка. И надо ныть в поддержку о добавлении чеклистов.&lt;/p></description></item><item><title>Mission teams</title><link>https://vanadium23.me/mission-teams/</link><pubDate>Sat, 30 Nov 2019 12:00:00 +0300</pubDate><guid>https://vanadium23.me/mission-teams/</guid><description>&lt;p>My presentation about cross functional teams from IndexTech 2019 @ Technopolis.&lt;/p>
&lt;p>Video is in Russian:&lt;/p>
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/EuvtmH6TA-M" frameborder="0" allowfullscreen>&lt;/iframe></description></item><item><title>Заметки по поездке в Лондон</title><link>https://vanadium23.me/london/</link><pubDate>Sat, 23 Nov 2019 12:00:00 +0300</pubDate><guid>https://vanadium23.me/london/</guid><description>&lt;p>London is the capital of Great Britain, its political, economic and cultural centre. It’s one of the largest cities in the world. Ох уж эти уроки английского языка, так или иначе с большей частью Лондона вы знакомы через медиакультуру: Биг Бен, Бейкер стрит, Вестминстерское аббатство.&lt;/p>
&lt;h2 id="что-делатьсмотреть">Что делать/смотреть&lt;/h2>
&lt;ul>
&lt;li>Погулять по южной набережной Темзы от Тауэр-бридж до Лондонского глаза (колесо обозрения).&lt;/li>
&lt;li>По пути будет Tate museum, в нём есть смотровая площадка на мост Миллениума, а так же несколько этажей бесплатных экспозиций.&lt;/li>
&lt;li>Дойдя до колеса обозрения, можно перебраться на северный берег и там будет закрытый на реконструкцию Биг Бен.&lt;/li>
&lt;li>Площадь музеев:
&lt;ul>
&lt;li>Victoria &amp;amp; Albert - музей реплик, где всё рассортировано по континентам и эпохам.&lt;/li>
&lt;li>Музей естественных наук - не дошли, но должно быть круто.&lt;/li>
&lt;li>Политех - ^ аналогично.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>От площади можно дойти до гайд парка и поглядеть на белок. Белки в Лондоне есть в каждом парке, в огромном количестве.&lt;/li>
&lt;li>Национальный музей не рекомендую, потому что напоминает Третьяковскую галерею. Посещать, только если вам нравится классическая живопись.&lt;/li>
&lt;li>Лондонский зоопарк - с одной стороны, там нет крупных животных. С другой, там есть место со съёмок первого Гарри Поттера (сцена со змеёй и стеклом) и павильоны, где бабочки/птицы летают рядом с тобой.&lt;/li>
&lt;/ul>
&lt;h2 id="еда">Еда&lt;/h2>
&lt;p>Что меня больше всего расстроило, так то, что нигде вкусно поесть не удалось из-за этого мало мест. Поесть:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.kipferl.co.uk/menus">Kipferl&lt;/a> - крутой завтрак Bauernfruehstueck (яичница с картошкой и беконом), а также вкусный шницель.&lt;/li>
&lt;li>Chipotle - недорогая сеть из США с буррито/тако и прочей мексиканской кухней. Отличается тем, что можно дешево поесть.&lt;/li>
&lt;li>&lt;a href="http://lapatagonia.co.uk/menu/tags/mains/">La Patagonia&lt;/a> - аргентинская кухня, много вкусного мяса.&lt;/li>
&lt;/ul>
&lt;p>Англия знаменита пабами, но крафтовые барчики в Москве лучше. Паб место куда приходишь выпить две-три пинты и пойти дальше. Удивило наличие ограждений на улице, чтобы люди совсем не расползались от паба и вне его нельзя пить. Особенных мест нет, заходите в любой паб там всё стандартно. Мои ожидания были завышены компанией Brewdog, которая начала крафтовый бум в Европе. По итогу всё что пьют в пабах это: Camden Town Lager (пиво Хамовники), стауты и IPA. Барчики:&lt;/p>
&lt;ul>
&lt;li>Brewdog - типичный крафтовый паб. Лучше чем в Берлине, но всего 6 кранов из которых местных микропивоварен 2 штуки.&lt;/li>
&lt;li>Euston Tap - здесь уже лучше представлен местный выбор (спасибо другу, переехавшему в Лондон (: ). Ещё интересно, что паб располагается в парке и поделён на два здания: один с пивом, второй с сидром.&lt;/li>
&lt;/ul>
&lt;h2 id="бюджет-на-2-людей">Бюджет на 2 людей&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Билеты&lt;/strong> - регулярные перелёты WizzAir Внуково-Лутон. 15000 рублей на одного в две стороны.&lt;/li>
&lt;li>&lt;strong>Жильё&lt;/strong> - на двоих можно найти апартаменты за 4000-5000 рублей за ночь.&lt;/li>
&lt;li>&lt;strong>Транспорт&lt;/strong> - тут всё зависит от того, как далеко хотите кататься. Безлимитный билет на неделю в зоны 1-2 (считай весь центр) 40 фунтов. Лучше всего брать oyster карт - это местный аналог тройки. Если не угадаете с зонами, то просто положите, как на кошёлек. Ещё в связи с зонами, прикладывать карту надо на входе и на выходе.&lt;/li>
&lt;li>&lt;strong>Поглазеть&lt;/strong> - большая часть музеев бесплатная, если смотреть платные экспозиции, то 15 фунтов с человека.&lt;/li>
&lt;li>&lt;strong>Еда&lt;/strong> - цена на горячее блюдо варьируется от 12 до 25 фунтов. На двоих получалось около 40-50 фунтов за один приём пищи.&lt;/li>
&lt;/ul>
&lt;p>На момент написания статьи 1 фунт ~ 83 рубля.&lt;/p></description></item><item><title>Методология P.A.R.A.</title><link>https://vanadium23.me/para/</link><pubDate>Sun, 10 Nov 2019 12:00:00 +0300</pubDate><guid>https://vanadium23.me/para/</guid><description>&lt;p>Наткнулся в твиттере на статью про организацию структуры папок на компьютере с помощью &lt;a href="https://johnnydecimal.com/">десятичной системы&lt;/a> и решил поделиться ещё одним способом. Частично - это &lt;a href="https://praxis.fortelabs.co/the-p-a-r-a-method-a-universal-system-for-organizing-digital-information-75a9da8bfb37/">пересказ статьи&lt;/a> с личными комментариями на практике.&lt;/p>
&lt;h2 id="para-в-двух-словах">P.A.R.A в двух словах&lt;/h2>
&lt;p>Начнём с расшифровки, в которой и кроется система организации:&lt;/p>
&lt;ul>
&lt;li>Projects - проекты, которые сейчас в работе. Важно, чтобы у них был дедлайн и конечная цель.&lt;/li>
&lt;li>Areas - зона ответственности (или образ жизни, если знакомы с джедайскими техниками). Отличие от проекта в том, что тут нет конечной цели, например: здоровье или у меня есть раздел Work: People.&lt;/li>
&lt;li>Resources - зона идей и/или база знаний. Здесь должно находиться всё, что может пригодиться или вы хотите изучить.&lt;/li>
&lt;li>Archive - архив: завершенные проекты, выброшенные идеи и прочее.&lt;/li>
&lt;/ul>
&lt;p>Главная суть заключается в том, что по этой системе необходимо организовать все места: от Todo-листа до папок. Тогда при переходе с личного компьютера в условный Google Drive вам не надо будет вспомнить куда вы положили очередную заметку.&lt;/p>
&lt;h2 id="процесс-внедрения">Процесс внедрения&lt;/h2>
&lt;ol>
&lt;li>Выбираем место с которого хотим начать - это может быть Documents, рабочий стол, какое-нибудь облако, заметки в Evernote, любое цифровое место, где можете пока сломать.&lt;/li>
&lt;li>Создаём четыре новых папки/блокнота: 1-projects, 2-areas, 3-resources, 4-archive. Цифры нужны, чтобы сортировка была верная.&lt;/li>
&lt;li>Всё что было до этого перемещаем в 4-archive. Пока нет никаких проблем, потому что когда нужно что-то найти мы всегда идём в архив.&lt;/li>
&lt;li>Когда идём в архив, начинаем думать к какому проекту или зоне относится данная заметка и добавляем новые блокноты по мере необходимости.&lt;/li>
&lt;li>Можно сесть и за один момент всё разобрать, но практика показала, что это плохой подход.&lt;/li>
&lt;li>???&lt;/li>
&lt;li>PROFIT&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://vanadium23.me/images/PARA.png" alt="Пример P.A.R.A">&lt;/p>
&lt;h2 id="личные-заметки">Личные заметки&lt;/h2>
&lt;ul>
&lt;li>Заметки не должны оставаться в одном и том же месте всё время. Проект может перерасти в зону, зона может уйти в архив, а какая-нибудь идея проектом. Не бойтесь перекладывать (:&lt;/li>
&lt;li>Когда система раскатается везде, то ориентироваться становится суперлегко, но если честно напоминает задротство с cabelporn.&lt;/li>
&lt;li>Никто не запрещает делать сколь угодно большую вложенность. Но если с этим есть проблемы (например, Evernote) придётся придумывать костыли. Я привык делать, как в Todoist: #Project.&lt;/li>
&lt;li>В Areas можно попробовать использовать &lt;a href="https://codescale.wordpress.com/2017/04/27/wheel-of-life/">колесо жизни&lt;/a>.&lt;/li>
&lt;li>Выглядит это как впихивание жизни в некое дерево, но она гораздо разнообразнее. Хотелось бы иметь тегирование везде, но на уровне дефолтных FS проблемы пока не решили.&lt;/li>
&lt;li>Полностью сломался список дел в Todoist. Настолько сломался, что пришлось только в ней откатиться обратно.&lt;/li>
&lt;/ul>
&lt;p>Если подвести итог, то скорее переход был положительным, хоть и не без проблем.&lt;/p></description></item><item><title>Вишлист на Д.Р. 2019</title><link>https://vanadium23.me/wishlist-2019/</link><pubDate>Thu, 05 Sep 2019 17:00:00 +0300</pubDate><guid>https://vanadium23.me/wishlist-2019/</guid><description>&lt;h2 id="wishlist-2019">Wishlist 2019&lt;/h2>
&lt;ol start="0">
&lt;li>Airpods&lt;/li>
&lt;li>&lt;a href="https://www.deadbrush.ru/catalog/games/homm3/">Маечки из героев, лубую кроме оплота (:&lt;/a> &lt;em>размер S&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://www.ikea.com/ru/ru/catalog/products/60445230/">Икеа ивриг&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://geektankgames.com/">Всякие ништяки для D&amp;amp;D&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://afisha.yandex.ru/moscow/concert/neiromonakh-feofan-2019-12">Билет на Нейромонаха&lt;/a> &lt;em>нужен один (:&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://beru.ru/product/braslet-xiaomi-mi-band-4-graphite-black/100672549793">Mi band 4&lt;/a>&lt;/li>
&lt;li>Кресло но не знаю какое и как вообще :(&lt;/li>
&lt;li>Ирригатор&lt;/li>
&lt;/ol>
&lt;h3 id="старое-доброе">Старое доброе&lt;/h3>
&lt;ol>
&lt;li>Настолки
&lt;ol>
&lt;li>&lt;a href="https://super01.ru/products/nastolnaya-igra-garri-potter-bitva-za-khogvarts-hogwarts-battle-1">Гарри Поттер&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://boardgamegeek.com/boardgame/237182/root">Root&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Книги
&lt;ol>
&lt;li>&lt;a href="http://www.chookandgeek.ru/search?q=%D0%A1%D0%9A%D0%9E%D0%A2%D0%A2+%D0%9F%D0%98%D0%9B%D0%98%D0%93%D0%A0%D0%98%D0%9C">Скотт Пилигрим&lt;/a> начиная с 5 тома включительно&lt;/li>
&lt;li>&lt;a href="https://www.chookandgeek.ru/product/rik-i-morti-istorii-za-kadrom">Рик и морти, книга 3&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.chookandgeek.ru/product/maus">Маус&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Игры
&lt;ol>
&lt;li>&lt;a href="https://www.mvideo.ru/products/ps4-igra-take-two-red-dead-redemption-2-40070013">Red Dead Redemption 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.mvideo.ru/products/ps4-igra-focus-home-greedfall-40072204">Greedfall&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.mvideo.ru/products/ps4-igra-capcom-devil-may-cry-5-40070811">Devil May Cry 5&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.mvideo.ru/products/switch-igra-nintendo-astral-chain-40071640">Astral chain&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.mvideo.ru/products/switch-igra-nintendo-mario-kart-8-deluxe-40065934">Mario Kart 8 Deluxe&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nintendo.ru/-/Nintendo-Switch/Sid-Meier-s-Civilization-VI-1460609.html">Sid Meier&amp;rsquo;s Civilization VI&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>Заметки по поездке в Берлин</title><link>https://vanadium23.me/berlin/</link><pubDate>Fri, 03 May 2019 12:00:00 +0300</pubDate><guid>https://vanadium23.me/berlin/</guid><description>&lt;p>Берлин - это странная интерпретация Москвы. С одной стороны всё есть: общественный транспорт, велосипеды, музеи, жральни. С другой стороны - как-то скучновато.&lt;/p>
&lt;h2 id="что-делатьсмотреть">Что делать/смотреть&lt;/h2>
&lt;ul>
&lt;li>Берлинская стена - она везде, вот совсем везде:
&lt;ul>
&lt;li>Чекпойнт Чарли - имитация КПП с одетыми солдатами.&lt;/li>
&lt;li>Мемориальный парк - ходим по парку и читаем истории людей, которые пытались перелезть стену.&lt;/li>
&lt;li>Панорама на potsdamer platz - смотрим на огромный транспортный узел, и читаем как тут начали возводить стену.&lt;/li>
&lt;li>Галерея на восточном берегу - огромный кусок стены, на котором всё разрисовано граффити.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Зоопарк - очень большой и клёвый, а ещё там две панды.&lt;/li>
&lt;li>Музеи
&lt;ul>
&lt;li>Hamburger bahnhof - бывший автобусный парк, переделанный в музей современного искусства. Постоянные экспозиции лучше временных.&lt;/li>
&lt;li>Urban nation - маленький неприметный музей стрит-арта. Вышли на него случайно, но экспозиция красивая, плюс бесплатная.&lt;/li>
&lt;li>Музей естественных наук - скелеты динозавров, заспиртованные баночки с рыбами и конечно же &lt;a href="https://www.museumfuernaturkunde.berlin/en/museum/ausstellungen/tristan-otto">Тристан&lt;/a>.&lt;/li>
&lt;li>Музей видеоигр - посетить, чтобы читать как развивалась индустрия видеоигр. Увидел первые издания по D&amp;amp;D.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ещё есть музейный остров недалеко от Alexandrplatz, но там достаточно просто погулять.&lt;/li>
&lt;li>Много исторических мест, но вы их и так знаете.&lt;/li>
&lt;li>Potsdam - это город в пригороде Берлина. На электричке (Sbahn) дорога занимает полчаса.
&lt;ul>
&lt;li>Музей Barberini - попали на выставку ранних работ Пикассо.&lt;/li>
&lt;li>Sanssouice Palace - огромный лесопарковый массив, по которому приятно гулять и посетить дворцы.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="еда">Еда&lt;/h2>
&lt;p>Завтраки:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://houseofsmallwonder.de/pages/brunch">House of the small wonder&lt;/a> - божественный бенедикт.&lt;/li>
&lt;li>&lt;a href="https://factorygirl.net/pdf/FG-Menu-Website.pdf">Factory girl&lt;/a> - завтраки целый день, порции большие.&lt;/li>
&lt;/ul>
&lt;p>Поесть:&lt;/p>
&lt;ul>
&lt;li>Ottenthal restaraunt - вкусный шницель, но очень дорого.&lt;/li>
&lt;li>Botzow privat - настолько же вкусный шницель, но подешевле.&lt;/li>
&lt;li>Chupenga - собери себе буритто сам, дешево и сердито.&lt;/li>
&lt;li>Barcomi&amp;rsquo;s Deli - дешевая и хорошая индийская кухня, за наводку спасибо &lt;a href="https://twitter.com/amureki">@amureki&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Барчики:&lt;/p>
&lt;ul>
&lt;li>Mikkeller Craft Beer Bar - очень уютный бар с небольшим количеством народу и большим выбором пива от Mikkeller.&lt;/li>
&lt;li>Protokoll - бар от русской пивоварни Zagovor на восточном берегу Берлина.&lt;/li>
&lt;li>Brewdog Mitte - не ходите туда, потому что слишком много людей.&lt;/li>
&lt;/ul>
&lt;h2 id="бюджет-на-2-людей">Бюджет на 2 людей&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Билеты&lt;/strong> - туда летает победа, поэтому вышло ~7000₽ на одного с докупкой багажа.&lt;/li>
&lt;li>&lt;strong>Жильё&lt;/strong> - ~3000₽ за ночь на двоих.&lt;/li>
&lt;li>&lt;strong>Транспорт&lt;/strong> - безлимитный проездной на день ~500₽ (7 евро).&lt;/li>
&lt;li>&lt;strong>Поглазеть&lt;/strong> - билеты, как правило, стоят по 1000 рублей за человека (15 евро).&lt;/li>
&lt;li>&lt;strong>Еда&lt;/strong> - хорошо поесть на двоих ~1800₽ (24 евро).&lt;/li>
&lt;/ul></description></item><item><title>Эксперименты на основе книги "Джедайские техники"</title><link>https://vanadium23.me/jedi-book-experiments/</link><pubDate>Sun, 31 Mar 2019 15:00:00 +0300</pubDate><guid>https://vanadium23.me/jedi-book-experiments/</guid><description>&lt;p>Последние два месяца внедряю в жизнь &amp;ldquo;Джедайские техники&amp;rdquo;. Не скажу что успешно, из-за чего делюсь заметками, где пошло не по плану.
Если хотите краткий пересказ книги, то посмотрите &lt;a href="https://www.mindmeister.com/426089298/">мыслекарту автора&lt;/a>.&lt;/p>
&lt;p>Для начала, схема техник из книги для понимания контекста:
&lt;img src="https://vanadium23.me/images/thinking-economy.png" alt="Схема экономии мыслетоплива">&lt;/p>
&lt;h2 id="обработка-входящих-aka-инбоксы">Обработка входящих (a.k.a инбоксы)&lt;/h2>
&lt;h3 id="предлагается">Предлагается:&lt;/h3>
&lt;ul>
&lt;li>Не использовать фильтры почты, если это не справочная информация. Если используете фильтры, то отмечайте письма как прочитанные, чтобы не отвлекаться лишний раз.&lt;/li>
&lt;li>Не использовать входящую почту, как ещё один список задач.&lt;/li>
&lt;li>Отключить уведомления, кроме особо важных.&lt;/li>
&lt;li>Добавить в список дел регулярную задачу по обработке входящих.&lt;/li>
&lt;/ul>
&lt;h3 id="работает">Работает:&lt;/h3>
&lt;ul>
&lt;li>Собирать почту скопом.&lt;/li>
&lt;li>Отключение уведомлений.&lt;/li>
&lt;/ul>
&lt;h3 id="не-работает">Не работает:&lt;/h3>
&lt;ul>
&lt;li>Не придумал, что делать со слаком: dnd не меняет счётчик сообщений, а ещё люди приучились к мгновенному ответу в нём.&lt;/li>
&lt;li>Фильтры в почте искоренить не удалось. А если проставлять прочитанное, то копиться слишком много и не хочется уже разбирать.&lt;/li>
&lt;/ul>
&lt;h2 id="список-задач">Список задач&lt;/h2>
&lt;h3 id="предлагается-1">Предлагается:&lt;/h3>
&lt;ul>
&lt;li>Формулировать задачи так, чтобы понял любой человек.&lt;/li>
&lt;li>Формулировка должна содержать детальный следующий шаг.&lt;/li>
&lt;li>Запрещено использовать слова &amp;ldquo;придумать&amp;rdquo;, &amp;ldquo;подумать&amp;rdquo;, &amp;ldquo;понять&amp;rdquo;.&lt;/li>
&lt;li>Иметь понятную и простую систему приоритезации, какую задачу брать следующей.&lt;/li>
&lt;li>&lt;em>желательно&lt;/em> Вести личный и рабочие дела в одном списке задач, чтобы понимать баланс между ними.&lt;/li>
&lt;/ul>
&lt;h3 id="работает-1">Работает:&lt;/h3>
&lt;ul>
&lt;li>Да, и ещё раз да на запрет слов &amp;ldquo;подумать&amp;rdquo; и &amp;ldquo;придумать&amp;rdquo;. Сразу работает голова, какой же первый шаг для решения задачи.&lt;/li>
&lt;li>Формулировка задач нарабатывается с трудом. Но когда входишь во вкус становится приятно потратить 15-30 секунд и записать полностью мысль, чтобы не думать потом несколько раз.&lt;/li>
&lt;li>Начал использовать приоритеты в Todoist.&lt;/li>
&lt;/ul>
&lt;h3 id="не-работает-1">Не работает:&lt;/h3>
&lt;ul>
&lt;li>Непонятно, где держать приблизительный план по проекту. :(&lt;/li>
&lt;/ul>
&lt;h3 id="_лирическое-отступление_">&lt;em>Лирическое отступление&lt;/em>&lt;/h3>
&lt;p>Важно уточнить, что в книге провели границу между следующими вещами:&lt;/p>
&lt;ul>
&lt;li>Список задач - последовательность точных действий.&lt;/li>
&lt;li>Проект - конечная во времени цель, которую известно &lt;em>как примерно&lt;/em> достичь.&lt;/li>
&lt;li>Образ жизни - бесконечная во времени цель, например: здоровье, язык, спорт.&lt;/li>
&lt;li>Справочная информация - ссылочки, мыслекарты, заметки и прочее.&lt;/li>
&lt;/ul>
&lt;p>У меня была смесь из всех пунктов в Todoist, из-за чего копились задачи и вызывало тревожность.&lt;/p>
&lt;h2 id="обзор-системы">Обзор системы&lt;/h2>
&lt;h3 id="предлагается-2">Предлагается:&lt;/h3>
&lt;ul>
&lt;li>Делать ежедневный обзор по выполненным задачам и планировать завтра.&lt;/li>
&lt;li>Делать еженедельный обзор с просмотром движения по проектам и планировать следующие шаги.&lt;/li>
&lt;li>Спонтанные обзоры для выявления узких частей.&lt;/li>
&lt;li>Для идей без плана использовать схему по аналогии с вещами: шкаф-балкон-дача.&lt;/li>
&lt;li>Брать меньше задач, чтобы потом либо отдыхать, либо что-то брать из следующих на неделю.&lt;/li>
&lt;/ul>
&lt;h3 id="работает-2">Работает:&lt;/h3>
&lt;ul>
&lt;li>Проблем не обнаружено. :)&lt;/li>
&lt;/ul>
&lt;h2 id="случайные-факты">Случайные факты&lt;/h2>
&lt;ul>
&lt;li>Удалось разгрести старьё, которое лежали мёртвым грузом.&lt;/li>
&lt;li>Уровень стресса и тревожности стал меньше, потому что вот они задачи - лежат в списочке.&lt;/li>
&lt;li>Стало проще выкидывать задачи, потому что это не задача, а это не важно.&lt;/li>
&lt;li>Да, для этого требуется щепетильность, усидчивость &lt;strike>и задротство&lt;/strike>.&lt;/li>
&lt;li>Да, всем этим можно и не заниматься. :)&lt;/li>
&lt;/ul>
&lt;p>Вот вам графичек по количеству завершённых задач в Todoist за 3 последних года:
&lt;img src="https://vanadium23.me/images/tasks-count-by-month-q1-2019.png" alt="Количество тасочек по месяцам">
Надеюсь, что тенденцию последних двух лет с помощью новых техник удастся побороть.&lt;/p>
&lt;p>P.S. прикрутил тут кнопочки для того, чтобы пошарить статью, поэтому если понравилось поделитесь статьёй. :)&lt;/p></description></item><item><title>Переезд блога с jekyll на hugo</title><link>https://vanadium23.me/migrating-to-hugo/</link><pubDate>Sun, 24 Mar 2019 14:00:00 +0300</pubDate><guid>https://vanadium23.me/migrating-to-hugo/</guid><description>&lt;p>Недавно прочитал статью про &lt;a href="https://dev.to/winduptoy/a-javascript-free-frontend-2d3e">фронтенд без javascript&amp;rsquo;a&lt;/a> и решил, что пора переделать бложик на старый манер: только html, только css. А раз начну переделывать, то заодно можно съехать с jekyll.&lt;/p>
&lt;p>&lt;strong>TL;DR&lt;/strong>: страница блога похудела в 3 раза: было 237 килобайт, стало 83. Можно порезать гуглоаналитику и станет ещё в 2 раза легче.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/pagespeed100.png" alt="PageSpeed 100">&lt;/p>
&lt;h3 id="причины-большого-веса-страниц">Причины большого веса страниц.&lt;/h3>
&lt;ul>
&lt;li>Грузил никому ненужную аватарку прямиком с гитхаба.&lt;/li>
&lt;li>Подключал highlight js, хотя это можно делать на этапе сборки странички.&lt;/li>
&lt;li>Использовал стороннюю тему и там было много всего, хотя сейчас есть flex и CSS grid, поэтому можно половину выкинуть.&lt;/li>
&lt;/ul>
&lt;h3 id="причины-миграции-на-hugo-вместо-jekyll">Причины миграции на hugo вместо jekyll.&lt;/h3>
&lt;p>Плюсы:&lt;/p>
&lt;ul>
&lt;li>Hugo использует бонус golang в виде компиляции в один бинарник, и не надо мучаться с настройкой rvm-ruby-bundler-jekyll.&lt;/li>
&lt;li>Hugo умеет импортировать jekyll репозиторий: &lt;code>hugo import jekyll /path/to/src&lt;/code>.&lt;/li>
&lt;li>Hugo получил поддержку общества, поэтому уже есть и темы, и всякие ништячки локализации.&lt;/li>
&lt;li>В hugo &lt;a href="https://gohugo.io/content-management/">много настроек&lt;/a> и &lt;a href="https://gohugo.io/hugo-pipes/bundling/">собирает css/js&lt;/a> самостоятельно без помощи внешних утилит.&lt;/li>
&lt;/ul>
&lt;p>Минусы:&lt;/p>
&lt;ul>
&lt;li>Go templates - это худший шаблонизатор в мире. Уверен, что кто пользовались jinja2 сразу поймут боль.&lt;/li>
&lt;li>Слишком много настроек из-за чего иногда сложно найти, как сделать что-то простое.&lt;/li>
&lt;/ul>
&lt;h3 id="подводные-камни-при-переезде">Подводные камни при переезде.&lt;/h3>
&lt;ol>
&lt;li>Если вы используете Github User Page, а не Github Project Page, то вам не повезло и папку docs/ в репозитории вы использовать не можете. Вместо этого придеться в репозиторий &lt;username>.github.io класть сразу сгенерированную статику. То есть, необходимо создать ещё один репозиторий, где будет hugo, а предыдущий подключить в качестве сабмодуля гита.&lt;/li>
&lt;li>Если вы мигрируете с jekyll, то не забудьте удалить предыдущий config.yaml из репозитория, иначе gihub будет считать, что это jekyll репозиторий и попробует его собрать.&lt;/li>
&lt;li>По-умолчанию, jekyll использует название файла в качестве пути, а hugo повторяет иерархию папок. Для того, чтобы повторить поведение, можно в config.yaml прописать опцию permalinks, или же в каждом файле использовать опцию alias.&lt;/li>
&lt;/ol>
&lt;h3 id="доделки-доделочки">Доделки-доделочки.&lt;/h3>
&lt;ul>
&lt;li>Надо отказаться от google analytics, так как это от лукавого. Сначала думал сделать свой пиксель, а сейчас думаю зачем мне трекать кто читает?&lt;/li>
&lt;li>Добавить переключалку на ночную тему. Задача со звёздочкой сделать это без js :)&lt;/li>
&lt;/ul></description></item><item><title>Выдержка из книги "Architecturing for Scale"</title><link>https://vanadium23.me/architecting-for-scale/</link><pubDate>Fri, 15 Mar 2019 17:00:00 +0300</pubDate><guid>https://vanadium23.me/architecting-for-scale/</guid><description>&lt;p>&lt;a href="https://www.goodreads.com/book/show/38096544">Книга&lt;/a> мне понравилась своей лаконичностью так, что советую прочитать чеклист на основе её и сделать вывод хотите ли вы читать её полностью. Весь чек лист разбит на основе оглавления из книги, поэтому можете читать выборочно.&lt;/p>
&lt;p>&lt;em>Здесь и далее следует понимать, что все примеры старались проводиться либо из опыта, либо на основе типичного магазина по продаже футболок&lt;/em>&lt;/p>
&lt;h2 id="доступность">Доступность&lt;/h2>
&lt;h3 id="в-чем-разница-между-надежностью-и-доступностью">В чем разница между надежностью и доступностью?&lt;/h3>
&lt;ul>
&lt;li>Надежность - способность системы выполнять требуемые действия, не допуская ошибок.&lt;/li>
&lt;li>Доступность - готовность системы к работе при необходимости выполнить требуемые действия.&lt;/li>
&lt;/ul>
&lt;h3 id="как-улучшить-доступность">Как улучшить доступность?&lt;/h3>
&lt;ol>
&lt;li>Учитывайте возможные отказы&lt;/li>
&lt;li>Всегда помните о масштабировании (прим. от меня и ограничениях)&lt;/li>
&lt;li>Смягчайте последствия рисков (понравился пример что если не работает поиск на сайте футболок, выдавайте временно топ предложения)&lt;/li>
&lt;li>Контролируйте доступность (== мониторинг)&lt;/li>
&lt;li>Disaster recovery policy (прим. от меня старайтесь строить self-recovering processes в системах)&lt;/li>
&lt;/ol>
&lt;h3 id="какая-доступность-является-нормальная">Какая доступность является нормальная?&lt;/h3>
&lt;p>Определите сами на основе таблицы:
99% - 432 минуты даунтайма в месяц
99,9% - 43 минуты
99,99% - 4 минуты
99,999% - 26 секунд&lt;/p>
&lt;h2 id="управление-рисками">Управление рисками&lt;/h2>
&lt;h3 id="принцип-управления-рисками">Принцип управления рисками&lt;/h3>
&lt;ol>
&lt;li>Составить матрицу рисков (&lt;a href="https://www.architectingforscale.com/files/Risk%20Matrix%20Template.xlsx">шаблон&lt;/a>)
&lt;ul>
&lt;li>Важно понимать, что у риска есть вероятность и критичность, для этого примеры:
&lt;ul>
&lt;li>Список топ-10 футболок: низкая вероятность и низкая критичность.&lt;/li>
&lt;li>База данных с заказами: низкая вероятность и высокая критичность.&lt;/li>
&lt;li>Загрузка сторонних шрифтов: высокая вероятность и низкая критичность.&lt;/li>
&lt;li>Фотографии футболок: высокая вероятность и высокая критичность.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ликвидация самых опасных рисков.&lt;/li>
&lt;li>Смягчение последствий рисков, которые нельзя исключить.&lt;/li>
&lt;li>Итерируй матрицу рисков или см п.1&lt;/li>
&lt;/ol>
&lt;p>Дальше в главе написано примеры конкретных действий по каждому из пунктов.
Из интересного забавным показалось, что можем сделать запас на 6 серверов приложения, но они все в одной стойке/питании и на самом деле это не резервирование. (Привет, Selectel)&lt;/p>
&lt;h2 id="сервисы">Сервисы&lt;/h2>
&lt;h3 id="что-такое-сервис">Что такое сервис&lt;/h3>
&lt;ol>
&lt;li>Собственная кодовая база&lt;/li>
&lt;li>Управлять собственными данными&lt;/li>
&lt;li>Предоставлять возможности другим сервисам&lt;/li>
&lt;li>Пользоваться возможностями других сервисов&lt;/li>
&lt;li>Иметь единственного владельца-команду.
&lt;ul>
&lt;li>В книге уточняется что одна команда может владеть несколькими сервисами, но не наоборот. (P.s. не согласен полностью)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="как-делить">Как делить&lt;/h3>
&lt;ol>
&lt;li>Разделение по бизнес-требованиям (legal, security)&lt;/li>
&lt;li>Разделение по зонам ответственности (management)&lt;/li>
&lt;li>Разделение по роду данных (domain)&lt;/li>
&lt;li>Разделение возможностей или информации (reusable apps)&lt;/li>
&lt;/ol>
&lt;h3 id="сложности">Сложности&lt;/h3>
&lt;ol>
&lt;li>Нет общей картины&lt;/li>
&lt;li>Благоприятная среда для сбоев и ошибок&lt;/li>
&lt;li>Сложно внести изменения&lt;/li>
&lt;li>Возрастает количество зависимостей&lt;/li>
&lt;/ol>
&lt;p>Была отдельная большая глава про обработку ошибок от сервисов и постепенной деградации.&lt;/p>
&lt;h2 id="масштабирование-сервисов">Масштабирование сервисов&lt;/h2>
&lt;h3 id="запас-на-две-ошибки">Запас на две ошибки&lt;/h3>
&lt;p>Правило лётчиков в том, что если ты не можешь сделать манёвр, то у тебя должен быть запас высоты на две ошибки.
Очень клёвое правило и дальше были простые вычисления для примера:
Есть сервис на 300 rps, сколько нужно узлов для 1000 rps?
Очевидный ответ - 4 (1000/300 ~ 3.33, ближайшее целое 4), но в этой ситуации при выходе из строя ноды каждая получает 333 rps и это вызовет каскадный отказ. При 5 узлах мы начинаем работать когда вышибает одну ноду, но если идёт деплой и вышибло одну ноду, то снова скатываемся в предыдущую ситуацию, поэтому идеально иметь запас на две ошибки.&lt;/p>
&lt;h3 id="домашка">Домашка&lt;/h3>
&lt;p>Сколько нужно узлов для обработки 10000 rps, если одна нода обрабатывает 300 rps?
Если у нас два датацентра и нам необходимо обеспечить отказ на уровне датацентра?
А если у нас 6 дата центров? :)&lt;/p>
&lt;h3 id="владение-сервисами">Владение сервисами&lt;/h3>
&lt;ul>
&lt;li>Все сервисы закреплены за командами разработки&lt;/li>
&lt;li>Ни один сервис не закреплен за несколькими командами&lt;/li>
&lt;li>Команда может отвечать за несколько сервисов&lt;/li>
&lt;li>На командах полный цикл: от архитектуры до мониторинга и решения проблем&lt;/li>
&lt;li>Между сервисами есть четкие границы и документированное API&lt;/li>
&lt;li>Между сервисами установлено SLA, о нарушениях которых оповещается команда-владелец&lt;/li>
&lt;/ul>
&lt;h3 id="классы-сервисов">Классы сервисов&lt;/h3>
&lt;p>Класс сервиса - это метка присвоенная, сервису которая означает насколько важен данный сервис для функционирования бизнеса.&lt;/p>
&lt;ul>
&lt;li>Класс 1 - тяжелые последствия, пример: сервис обработки заказов&lt;/li>
&lt;li>Класс 2 - неприятное взаимодействие с сервисом для клиента, пример: сервис поиска&lt;/li>
&lt;li>Класс 3 - незаметное или почти незаметное взаимодействие, пример: сервис рекомендаций&lt;/li>
&lt;li>Класс 4 - никакого негативного влияния на клиентов, пример: сервис генерации отчётов&lt;/li>
&lt;/ul>
&lt;h3 id="использование-классов-сервисов">Использование классов сервисов&lt;/h3>
&lt;ul>
&lt;li>Ожидания - какая у сервиса должна быть надёжность и доступность?&lt;/li>
&lt;li>Реагирование - насколько быстро надо реагировать на проблему в сервисе?&lt;/li>
&lt;li>Зависимости - какие классы у сервисов от которых зависите? Как мы должны обрабатывать отказы: деградировать или умирать?&lt;/li>
&lt;/ul>
&lt;h3 id="sla">SLA&lt;/h3>
&lt;p>Почему SLA важны и особенно внутренние?&lt;/p>
&lt;ul>
&lt;li>Создание доверия&lt;/li>
&lt;li>Упрощение диагностики проблем&lt;/li>
&lt;li>Измерение производительности&lt;/li>
&lt;/ul>
&lt;p>Как ставить SLA?&lt;/p>
&lt;ul>
&lt;li>SLA должны быть релевантны потребителям иначе они не SLA&lt;/li>
&lt;li>Желательно, иметь как можно меньше метрик&lt;/li>
&lt;li>Желательно, иметь одни SLA на всех потребителей&lt;/li>
&lt;/ul>
&lt;p>Примеры SLA про магазин высокоуровнего:&lt;/p>
&lt;ul>
&lt;li>Доступность - &amp;ldquo;наш магазин доступен не менее чем 99,4% времени&amp;rdquo;&lt;/li>
&lt;li>Время загрузки - &amp;ldquo;страницы открываются менее чем за 4 с в 99% случаях&amp;rdquo;&lt;/li>
&lt;li>Продукты - &amp;ldquo;как минимум 80% наших товаров в каталоге находится на складе&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h2 id="облачные-сервисы">Облачные сервисы&lt;/h2>
&lt;p>Там было про AWS, Lambda и прочее. Похоже на маркетинговый булшит, ничего полезного.&lt;/p>
&lt;h2 id="вопросы-к-сервисам-на-основе-предложенной-книги">Вопросы к сервисам на основе предложенной книги&lt;/h2>
&lt;ol>
&lt;li>Есть ли у вас матрица рисков?&lt;/li>
&lt;li>Есть ли SLA для сервисов?&lt;/li>
&lt;li>Есть ли несколько команд, которые владеют одним сервисом?&lt;/li>
&lt;/ol></description></item><item><title>Календарь в списке задач</title><link>https://vanadium23.me/calendar-in-tasklist/</link><pubDate>Sat, 23 Feb 2019 17:00:00 +0300</pubDate><guid>https://vanadium23.me/calendar-in-tasklist/</guid><description>&lt;p>Для понимая проблемы прочитайте прошлую &lt;a href="https://vanadium23.me/calendar-as-tasklist/">статью&lt;/a>. Эта статья об обратной ситуации, когда календарь, точнее встречи, копируются в список задач.&lt;/p>
&lt;p>&lt;strong>TL;DR:&lt;/strong> &lt;em>ещё раз&lt;/em> используйте календарь, как календарь, а список дел, как список дел. Нет ничего плохого в том, что они лежат в двух разных системах.&lt;/p>
&lt;p>Итак, мы просыпаемся утром и пытаемся распланировать день. Исходя из предыдущей, мы начинаем не расставлять время, когда что будем делать, но в списке задач у нас уже висит 2-3-5 задач со временем.
Догадались что это? Это встречи, которые у нас сегодня будут. Может быть я не знаю о какой-то функциональности Todoist&amp;rsquo;a, но неважно какую сортировку выбрать - эти задачи будут выше других.
Это плохо тем, что они вечно висят перед глазами и уменьшают возможность планирования на сегодня. С одной стороны хорошо, что они перед глазами и не надо сверяться, с другой стороны всё что нужно - это не то сколько у нас встреч и во сколько, а сколько у нас остаётся свободного времени. Для этого достаточно один раз свериться с календарём.&lt;/p>
&lt;p>В итоге, копирование событий из рабочего календаря в личный было отключено. Более удобной оказалась схема с предоставлением доступа из рабочей почты в личную по ссылке, спасибо гуглокалендарю.
За последние две недели единственный косяк был найден в том, что уведомления от календаря я могу упустить, но было закостылено с помощью &lt;a href="https://play.google.com/store/apps/details?id=cz.zdenekhorak.mibandtools">tools &amp;amp; mi band&lt;/a>.&lt;/p></description></item><item><title>Календарь в качестве списка задач</title><link>https://vanadium23.me/calendar-as-tasklist/</link><pubDate>Sat, 16 Feb 2019 17:00:00 +0300</pubDate><guid>https://vanadium23.me/calendar-as-tasklist/</guid><description>&lt;p>В прошлом году у меня были странные эксперименты по тому как вести списки дел. В качестве основной платформы последние пару лет остаётся Todoist, но покопавшись в FAQ, обнаружил, что есть двухстороняя синхронизация с &lt;a href="https://doist.com/blog/google-calendar-todoist-integration/">гугл календарём&lt;/a> и тут понеслось.&lt;/p>
&lt;p>&lt;strong>TL;DR:&lt;/strong> используйте календарь, как календарь, а список дел, как список дел. Нет ничего плохого в том, что они лежат в двух разных системах.&lt;/p>
&lt;p>Итак, в какой-то момент времени у вас становится много встреч на неделе, точнее больше чем хотелось бы. Мне их хотелось не больше 2 в день, и не больше 5 в неделю. К сожалению, не всё совпадает с нашими желаниями:
&lt;img src="https://vanadium23.me/images/calendar-overflow.png" alt="Зачееееееем">&lt;/p>
&lt;p>Ситуация усугубляется тем, что к каким-то из встреч надо подготовиться. Мне показалось, что хорошим решением будет делать следующее:&lt;/p>
&lt;ol>
&lt;li>Вести встречи в списке дел&lt;/li>
&lt;li>Пытаться впихнуть остальные дела между этими встречами&lt;/li>
&lt;/ol>
&lt;p>Ручки зачесались и настроили синхронизацию с гугл календарём, и всё заработало из коробки. Надо отметить, что у Todoist хорошо проработана синхронизация: при добавлении задачи со временем, она ставится и в календарь, а если в названии напишешь [25m], то ещё и продолжительность будет корректная. Правда пары вещей мне не хватило:&lt;/p>
&lt;ol>
&lt;li>Он не умеет работать с двумя календарями.&lt;/li>
&lt;li>Нельзя прописать у уже созданной задачи продолжительность. Оно не синхронизирует по обновлению названия.&lt;/li>
&lt;/ol>
&lt;p>На помощь нам приходит ifttt, знакомый по статье с &lt;a href="https://vanadium23.me/keep-pocket-clean">getpocket&lt;/a>. В нём мы можем настроить синхронизацию вновь созданных событий между двумя календарями. &lt;a href="https://ifttt.com/applets/126824p-copy-events-between-calendars">тыц&lt;/a>
Двумя вечерами позднее я был во все оружие и решил, что буду:&lt;/p>
&lt;ol>
&lt;li>Смотреть список задач и теперь встреч каждое утро в тудуисте&lt;/li>
&lt;li>Расставлять время, когда буду делать задачу между ними&lt;/li>
&lt;li>Для пущей убедительности буду красить в разные цвета, чтобы не путать встречи и дела.&lt;/li>
&lt;/ol>
&lt;p>Выглядело это как-то так:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/calendar-overflow-more.png" alt="Тут надо было уже понять, что есть проблема">&lt;/p>
&lt;p>В таком режиме успел пожить недельку, но пришло осознание, что не хватает контроля всё делать. А если не хватает контроля - надо добавить больше контроля! Проблема заключалась в том, что если откладывать задачу в тудуисте, она откладывалась и в календаре и никак нельзя было сравнить план с фактом. Значит, надо добавить бэкап изначального календарь. Берём и делаем ещё один календарь, который называем Plan и каждое утро в 10 бекапим в него какие у нас были события. Можно было напилить скрипт в крон, но лень взяла вверх и была найдена приложенька &lt;a href="https://play.google.com/store/apps/details?id=com.applisto.copyevents">Copy Calendar Events&lt;/a>.
&lt;img src="https://vanadium23.me/images/calendar-plan-fact.png" alt="Всё идёт по плааану">&lt;/p>
&lt;p>Синим отмечен план и как сразу можно заметить, в час всё стало идти не по плану. На какие только ухищрения не приходилось идти, чтобы всё сходилось, но жизнь оказалась проще: не надо планировать дела с точностью до минуты, достаточно планировать день с учётом сил и оставлять чуть-чуть для себя любимого. Тогда вы не будет в состояние &amp;ldquo;ох ты, не успел&amp;rdquo;, потом сами себе скажите спасибо.&lt;/p>
&lt;p>P.s. Копирование встреч в личный календарь + Todoist так и осталось, и это тоже плохая практика. Напишу об этом как-нибудь.&lt;/p></description></item><item><title>Заметки по поездке в Тайланд</title><link>https://vanadium23.me/thailand/</link><pubDate>Sat, 19 Jan 2019 17:00:00 +0300</pubDate><guid>https://vanadium23.me/thailand/</guid><description>&lt;p>Тайланд - это когда хочешь в лето зимой, но чтобы ещё было дешево. Во всяком случае, так мы думали с друзьями, когда решали где справить Новый год.
Как оказалось, Тайланд - это когда ешь рис весь отпуск.&lt;/p>
&lt;h2 id="маршрут-поездки">Маршрут поездки&lt;/h2>
&lt;p>Бангкок &amp;ndash;&amp;gt; Ао Нанг (Краби) &amp;ndash;&amp;gt; остров Пхи-Пхи &amp;ndash;&amp;gt; Ао Нанг (Краби) &amp;ndash;&amp;gt; Бангкок&lt;/p>
&lt;h2 id="про-еду">Про еду&lt;/h2>
&lt;p>Так как не являюсь любителем острого, то еда в Тайланде строилась по одному принципу:&lt;/p>
&lt;ol>
&lt;li>Выбери рис или рисовую лапшу.&lt;/li>
&lt;li>Добавьте овощи по выбору.&lt;/li>
&lt;li>Добавьте мясо: курица, говядина, свинина или морепродукты.&lt;/li>
&lt;li>&lt;strike>(опционально) Добавить соус на основе пасты из чили.&lt;/strike>&lt;/li>
&lt;/ol>
&lt;p>Кроме этого из достойных упоминаний - спринг роллы, тайский омлет с п.3, маленькие шашлычки.
Если рис в конец надоел, то везде можно найти европейские ресторанчики, но с чуть более высоким ценником.
Ещё есть ночные маркеты, где можно найти крошку картошку или мексиканские блюда, но они будут на ~3+.
И последнее о чём хотелось бы упомянуть, что макдак и бургер кинг - очень дорогие места: один чизбургер стоит ~140 рублей.&lt;/p>
&lt;h3 id="ао-нанг-краби">Ао Нанг (Краби)&lt;/h3>
&lt;ul>
&lt;li>Маленькая деревня&lt;/li>
&lt;li>Есть три пляжа
&lt;ul>
&lt;li>при отеле Centara - супер чистый, мелкий песок, всё отлично, кроме факта что надо добираться через тропу сквозь лес.&lt;/li>
&lt;li>пляж Ао Нанга - тут толпа людей и лодок, но при отливе возможно купаться.&lt;/li>
&lt;li>пляж Nopparat Thara - меньше людей, мельче вода, людей не так много, но при отливе вода уходит метров на 100. Зато появляются крабики в огромных количествах.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>В городе есть всё для туристов - ночные маркеты, массажи, лодочки.&lt;/li>
&lt;li>А вот мест для посещения так себе - храм на горе, треккинг, слоны и острова.&lt;/li>
&lt;/ul>
&lt;h3 id="остров-пхи-пхи">Остров Пхи-Пхи&lt;/h3>
&lt;ul>
&lt;li>Маленькая деревня доверху наполненная туристами.&lt;/li>
&lt;li>Куча кафешек с более приятной едой:
&lt;ul>
&lt;li>Конструктор бургеров Monster Burger.&lt;/li>
&lt;li>Местный ресторан Garlic, в котором подают &lt;a href="https://ru.wikipedia.org/wiki/%D0%A0%D1%91%D1%88%D1%82%D0%B8">рёшти (rösti)&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>В большинстве мест наливают ведёрко коктейля за 600 рублей.&lt;/li>
&lt;li>Из достопримечательностей - смотровая площадка, пляжи острова и соседние острова.&lt;/li>
&lt;li>Ещё можно поплавать на каяках.&lt;/li>
&lt;/ul>
&lt;h3 id="бангкок">Бангкок&lt;/h3>
&lt;ul>
&lt;li>Мегаполис с кучей дорог, которые идут на уровне 5 этажа и выше.&lt;/li>
&lt;li>Достопримечательности на любой вкус:
&lt;ul>
&lt;li>Есть старый город с статуями Будды, дворец, гробницы.&lt;/li>
&lt;li>Есть музеи, в том числе и &lt;a href="https://www.tripadvisor.ru/Attraction_Review-g293916-d1210675-Reviews-Bangkok_Art_Culture_Centre_BACC-Bangkok.html">современного искусства&lt;/a>.&lt;/li>
&lt;li>Есть парк с варанами в центре города.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>В бангкоке после 2 недель лагеров успешно был найден &lt;a href="https://www.facebook.com/mitrcraft/">крафтовый бар&lt;/a> с местной медовухой. Она была просто отличная.
&lt;ul>
&lt;li>Заодно познакомились с основателями крафта в Тае и узнали, что его так мало, потому что варить на продажу и для себя запрещено. Подробнее можете в &lt;a href="https://www.youtube.com/watch?v=kpbBlyIKQMQ">видео&lt;/a> посмотреть.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="бюджет-на-2-людей">Бюджет на 2 людей&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Билеты&lt;/strong> - на новогодние праздники не смогли найти дешевле 30000₽ за одного.&lt;/li>
&lt;li>&lt;strong>Жильё&lt;/strong> - ~3000₽ за ночь на двоих.&lt;/li>
&lt;li>&lt;strong>Транспорт:&lt;/strong> - берите байк, если это деревня. Стоит 400₽/сутки.&lt;/li>
&lt;li>&lt;strong>Еда:&lt;/strong> - порция риса с мясом 150₽ :)&lt;/li>
&lt;/ul>
&lt;h3 id="ps">P.s.&lt;/h3>
&lt;p>В этой поездке было много смешных и не очень историй:&lt;/p>
&lt;ol>
&lt;li>Мы летели China Southern и опоздали на пересадку в Гуанчжоу. Опоздали, потому что китайская таможня не очень расторопна и техническая остановка вместо часа заняла 2 или 3. Так как это произошло в первый раз, поэтому что делать было непонятно. В итоге билеты поменяли на стойке регистрации без доплаты на следующий рейс через 5 часов.&lt;/li>
&lt;li>Следите за едой, особенно морепродуктами. Не забудьте взять с собой аптечку.&lt;/li>
&lt;/ol>
&lt;p>P.p.s. Спасибо моим друзьям за то, что так клёво встретили и провели Новый год. &amp;lt;3&lt;/p></description></item><item><title>Вишлист на Д.Р. 2018</title><link>https://vanadium23.me/wishlist-2018/</link><pubDate>Sun, 09 Sep 2018 17:00:00 +0300</pubDate><guid>https://vanadium23.me/wishlist-2018/</guid><description>&lt;h2 id="wishlist-2018">Wishlist 2018&lt;/h2>
&lt;ol start="0">
&lt;li>&lt;a href="https://www.mvideo.ru/products/videoigra-dlya-ps4-chelovek-pauk-40068884">Человек-паук&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.deadbrush.ru/catalog/games/homm3/">Маечки из героев, лубую кроме оплота (:&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://market.yandex.ru/product/13067065?show-uid=050641276356821320016002&amp;amp;nid=55410&amp;amp;track=product_card_analog">Мобильный роутер&lt;/a>&lt;/li>
&lt;li>Джойстик к Ps4&lt;/li>
&lt;li>&lt;a href="https://www.razer.com/gaming-accessories/razer-chroma-hdk">Комплект из LED шнурков к монитору&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.gearbest.com/living-appliances/pp_557543.html?lkid=10721409">Xiaomi Smart Air Quality Monitor&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pretendstore.co/products/pocket-developer">Кубик для разработчика&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="старое-доброе">Старое доброе&lt;/h3>
&lt;ol>
&lt;li>Настолки
&lt;ol>
&lt;li>&lt;a href="https://hobbygames.ru/igra-prestolov-vtoroe-izdanie">Игра престолов&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hobbygames.ru/jekonomikus">Экономикус&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Книги
&lt;ol>
&lt;li>&lt;a href="https://www.mann-ivanov-ferber.ru/books/kontrakt-s-bogom/">Контракт с Богом&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.chookandgeek.ru/search?q=%D0%A1%D0%9A%D0%9E%D0%A2%D0%A2+%D0%9F%D0%98%D0%9B%D0%98%D0%93%D0%A0%D0%98%D0%9C">Скотт Пилигрим&lt;/a> начиная с 5 тома включительно&lt;/li>
&lt;li>&lt;a href="http://www.chookandgeek.ru/product/saga-tom-1-2">Сага&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>Заметки по поездке в Черногорию</title><link>https://vanadium23.me/montenegro/</link><pubDate>Mon, 06 Aug 2018 17:00:00 +0300</pubDate><guid>https://vanadium23.me/montenegro/</guid><description>&lt;p>Черногория - это как Крым, только цены в евро. А если серьёзно, то так оно и есть, просто погуглите фоточки.&lt;/p>
&lt;h2 id="что-делатьсмотреть">Что делать/смотреть&lt;/h2>
&lt;p>Возьмите тачку, по округам можно поездить и посмотреть как на горы, так и на море.
По климату - если ехать в сезон (июль), то днём пекло, а утром/вечером жара, но терпимая.&lt;/p>
&lt;h3 id="тиват">Тиват&lt;/h3>
&lt;ul>
&lt;li>Деревня рядом с аэропортом.&lt;/li>
&lt;li>Есть пару/тройку пляжей - либо галька, либо бетонка.&lt;/li>
&lt;li>Порт монтенегро - местный богатый район с кафешками и ресторанами.&lt;/li>
&lt;li>Хорошее расположение до других городов и пляжей в Черногории.&lt;/li>
&lt;/ul>
&lt;h3 id="котор">Котор&lt;/h3>
&lt;ul>
&lt;li>Старый город - похоже на медины в &lt;a href="https://vanadium23.me/marocco/">Марокко&lt;/a>.&lt;/li>
&lt;li>Можно подняться на гору рядом и сделать панораму на весь город.&lt;/li>
&lt;/ul>
&lt;h3 id="будва">Будва&lt;/h3>
&lt;ul>
&lt;li>Опять же старый город.&lt;/li>
&lt;li>Тут собрались все ночные развлечения.&lt;/li>
&lt;/ul>
&lt;h3 id="жабляк">Жабляк&lt;/h3>
&lt;ul>
&lt;li>Город в горах (150 км от Тивата), где самый клёвый ресторан на Черногорию. Называется он Oro.&lt;/li>
&lt;li>Парк Дурмитор с черным озером.&lt;/li>
&lt;li>Недалеко от города (~20 км) - мост Джурджевича, там красивый вид на каньон реки и есть тарзанки/зиплайны.&lt;/li>
&lt;li>Там много гор, куда есть пешие тропы.&lt;/li>
&lt;li>Ещё там не так жарко, как везде, поэтому берите тёплые вещи.&lt;/li>
&lt;/ul>
&lt;h3 id="пераст">Пераст&lt;/h3>
&lt;ul>
&lt;li>Маленький пеший город.&lt;/li>
&lt;li>Можно доплыть до монастыря на островке.&lt;/li>
&lt;/ul>
&lt;h3 id="пляжи">Пляжи&lt;/h3>
&lt;ul>
&lt;li>Яз (Jaz) - мелкая галька, не сильно отличается от городских. Народу много.&lt;/li>
&lt;li>Бечичи (Becici) - посёлок-отель, так же мелкая галька, но почище.&lt;/li>
&lt;li>Плави Хоризонти (Plavi Horizonti) - имхо, лучший пляж. Песок + очень пологий вход, как на Азовском море.&lt;/li>
&lt;/ul>
&lt;h2 id="что-поесть">Что поесть&lt;/h2>
&lt;p>Все кафе и рестораны по качеству плюс-минус одинаковые, поэтому расскажу про кухню:&lt;/p>
&lt;ul>
&lt;li>Плескавица - мясо с мясом и полито сверху мясом.&lt;/li>
&lt;li>Чевапчичи - местный вид кебаба.&lt;/li>
&lt;li>Телячья чорба - местный вид супа, ещё он есть с курицей.&lt;/li>
&lt;li>Карагеоргиев шницель - огромная такая котлета по-киевски. Внезапно погуглил и это правда &lt;a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%80%D0%B0%D0%B3%D0%B5%D0%BE%D1%80%D0%B3%D0%B8%D0%B5%D0%B2_%D1%88%D0%BD%D0%B8%D1%86%D0%B5%D0%BB%D1%8C">неудачная котлета&lt;/a>.&lt;/li>
&lt;li>Каймак - густые сливки, похожие на сыр.&lt;/li>
&lt;li>Приганица - пончики на завтрак, подаются с мёдом/джемом.&lt;/li>
&lt;/ul>
&lt;h2 id="бюджет-на-2-людей">Бюджет на 2 людей&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Билеты&lt;/strong> - можно найти за 8000-10000₽ за одного.&lt;/li>
&lt;li>&lt;strong>Жильё&lt;/strong> - ~45-50 евро за ночь на двоих.&lt;/li>
&lt;li>&lt;strong>Транспорт:&lt;/strong> - берите тачку, у нас вышло 40 евро/день за автомат с полным КАСКО.&lt;/li>
&lt;li>&lt;strong>Еда:&lt;/strong> - хорошо поесть на двоих ~20 евро.&lt;/li>
&lt;/ul>
&lt;p>P.s. хотелось бы отметить, что черногорцы - очень гостеприимный народ. А владелец наших апартаментов бесплатно довёз нас до аэропорта и обратно. (:&lt;/p></description></item><item><title>Заметки по поездке в Будапешт</title><link>https://vanadium23.me/budapest/</link><pubDate>Sat, 02 Jun 2018 17:00:00 +0300</pubDate><guid>https://vanadium23.me/budapest/</guid><description>&lt;p>Будапешт - не очень большой город, поэтому на то, чтобы его обойти хватит 3-4 дней. Состоит он из двух частей: холмистый район Буда и равнинный Пешт.&lt;/p>
&lt;h2 id="что-делатьсмотреть">Что делать/смотреть&lt;/h2>
&lt;h3 id="буда">Буда&lt;/h3>
&lt;ul>
&lt;li>Бани &amp;ldquo;Геллерт&amp;rdquo; - в Будапеште очень много бань, хотя скорее это тёплые бассейны. В Геллерте огромный комплекс, где есть и сауна, и множество купален с температурой от 30 градусов до 40.&lt;/li>
&lt;li>Статуя свободы (быв. Родина-мать) - рядом с банями распологается холм Геллерт (точнее наоборот), на вершине которого стоит статуя свободы. Отличная смотровая площадка.&lt;/li>
&lt;li>Королевский дворец/Рыбацкий бастион - чуть дальше на север располагаются бастионы Буды. Ничего интересного там нет, кроме вида на Пешт.&lt;/li>
&lt;li>Ещё там есть фуникулёр и национальный музей, но они были закрыты.&lt;/li>
&lt;/ul>
&lt;h3 id="пешт">Пешт&lt;/h3>
&lt;ul>
&lt;li>Зоопарк - очень большой и клёвый.&lt;/li>
&lt;li>Рядом с зоопарком располагаются два музея: музей изобразительных искусств и Мючарнок.&lt;/li>
&lt;li>До зоопарка надо ехать на первой линии метро в континентальной Европе. Там очень маленькие платформы и вагоны на 20 человек максимум.&lt;/li>
&lt;li>Музей пинбольных автоматов - около 100 автоматов, самые старые с конца 19 века. Можно залипнуть на час-полтора.&lt;/li>
&lt;li>Остров-парк Маргит - огромный остров в русле реки Дуная, который является одним большим парком.&lt;/li>
&lt;li>Смотровая площадь на Базилике.&lt;/li>
&lt;li>Ещё в воскресенье на площаде рядом с Базиликой проходит что-то типа ламбада маркета, на котором можно урвать ништячки.&lt;/li>
&lt;li>Музей уникума. Уникум - это местный егермастер в Венгрии, в музее показывают фильм-рекламу, проводят по комнатам, где происходит изготовление напитка, а также угощают им.&lt;/li>
&lt;li>Музей современного искусства Людвига - он располагается очень далеко от центра, но доехать до него стоит. Мы попали на выставку украинского искусства, с критикой майдана.&lt;/li>
&lt;/ul>
&lt;h2 id="еда">Еда&lt;/h2>
&lt;ul>
&lt;li>For sale pub - господи, там продают литровую порцию добротного гуляша. Берите одну на двоих.&lt;/li>
&lt;li>Budapest bagels - маленькая палатка с самыми вкусными бейглами в Будапеште. М-м-м, яйцо/бекон/творожный сыр/салат и всё на свежеиспеченном бейгле.&lt;/li>
&lt;li>есть квартал &amp;ldquo;ruin pubs&amp;rdquo;, но если честно ничего не приглянулось.&lt;/li>
&lt;/ul>
&lt;h2 id="бюджет-на-2-людей">Бюджет на 2 людей&lt;/h2>
&lt;p>Местная валюта - форинт. На момент поездки 1 евро = ~300 форинтов.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Билеты&lt;/strong> - можно найти за 6000-8000₽ за одного.&lt;/li>
&lt;li>&lt;strong>Жильё&lt;/strong> - ~3000₽ за ночь на двоих&lt;/li>
&lt;li>&lt;strong>Транспорт:&lt;/strong> - всё в пешей доступности, лучше взять карточку Будапешта (~1500₽ за одну).&lt;/li>
&lt;li>&lt;strong>Поглазеть:&lt;/strong> - с карточкой большая часть бесплатна, там где платить стоимисть билета ~500₽ на одного.&lt;/li>
&lt;li>&lt;strong>Еда:&lt;/strong> - хорошо поесть на двоих ~700₽.&lt;/li>
&lt;/ul></description></item><item><title>Держи кармашек в чистоте</title><link>https://vanadium23.me/keep-pocket-clean/</link><pubDate>Sat, 31 Mar 2018 17:00:00 +0300</pubDate><guid>https://vanadium23.me/keep-pocket-clean/</guid><description>&lt;p>Ретроспектива о том, как я организовал свой список чтения. (Спойлер: getpocket.com и не только).&lt;/p>
&lt;p>Итак, первый симптом болезни застал меня, когда я увидел следующую картину на рабочем компьютере:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/too-many-tabs.png" alt="Слишком много вкладок">&lt;/p>
&lt;p>Настолько распространённая ситуация, что даже в мобильном хроме есть шутка на эту тему при 100+ вкладках:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/100-tabs-mobile-only.png" alt="Слишком много вкладок на мобильном">&lt;/p>
&lt;p>И когда вкладок так много, то вам приходится держать большой контекст в голове где рабочее, а где &lt;em>просто посмотреть&lt;/em>. У кого-то с этим нет проблем, у кого-то есть и я, к сожалению, из второго числа. К этому добавлялось желание не только успевать читать (что, забегая вперед, невозможно и не нужно), но и следить за новостями. И я открыл для себя RSS, а точнее чудесный на тот момент Google Reader:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/greader.png" alt="Google Reader">&lt;/p>
&lt;p>Сервис был дико удобным, т.к. позволял собрать поток со всех сайтов в одну большую ленту к &lt;strike>чтению&lt;/strike> просмотру. Именно просмотру, поскольку большая часть отбрасывалась по заголовку и выдержке. Правда оставались лонгриды или просто тяжелые к прочтению статьи, что возвращало нас к картинке:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/too-many-tabs.png" alt="Слишком много вкладок">&lt;/p>
&lt;p>Дальнейшее исследование этой проблемы привело меня к тому, что есть сервисы по сохранению вкладок. На слуху было два: instapaper и pocket, но первый был только под яблоко, поэтому не подходил. Оставалось решить как туда складывать статьи без копирования ссылок или открытия их в браузере. В feedly (пришедшем на замену Google Reader) такую возможность сделали в Pro-версии, но это не наш путь. Здесь на помощь к нам приходит сервис ifttt.com.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/ifttt.png" alt="Ifttt - это изолента между сервисами">&lt;/p>
&lt;p>С помощью него мы можем сделать автоматический перенос статей с меткой &amp;ldquo;Saved for later&amp;rdquo; из Feedly в Pocket. И как вишенка на торте, статьи, которые помечены как прочтённые в Pocket, переносились в Evernote.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/read-flow.png" alt="Поток чтения">&lt;/p>
&lt;p>Вот тут была допущена первая ошибка - не надо было использовать Evernote, хватало самого Pocket&amp;rsquo;a. Внутри него у статьи есть три состояния: к прочтению, в архиве и любимая. Вместо того, чтобы помещать статью в архив, я её удалял, т.к. архивирование засоряло Evernote. И теперь по данным из сервиса невозможно восстановить количество статей в очереди на тот или иной день. Остаются только скриншоты из твиттера. :(
Не смотря на эту ошибку, схема принесла следующие удобства:&lt;/p>
&lt;ul>
&lt;li>статьи обрабатывались для чтения: вырезалась вся вёрстка сайта и оставался только текст&lt;/li>
&lt;li>оффлайн чтение на планшете&lt;/li>
&lt;li>уменьшение времени на просмотр статей в Feedly&lt;/li>
&lt;/ul>
&lt;p>И это было настолько удобно, что добавил ещё несколько правил: различные email weekly (например: &lt;a href="https://postgresweekly.com/">https://postgresweekly.com/&lt;/a>) и ссылки из твиттера работали точно так же.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/read-flow-2.png" alt="Поток чтения 2">&lt;/p>
&lt;p>К чему это привело, догадаться не трудно. Мы просто перенесли проблему из одного места в другое:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/pocket-first-half-2016.png" alt="У тебя проблемы">&lt;/p>
&lt;p>Сама картинка до боли напоминает схему с производителем и потребителем, которые общаются через очередь.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/producer-consumer.png" alt="Слишком много производителей">&lt;/p>
&lt;p>С одной стороны, потребителем в этой схеме являюсь я и можно точно сказать, что просто докупить железа не получится. С другой стороны, производителей контента со временем будет только больше. Как закономерный результат, мы и получаем забивание очереди.&lt;/p>
&lt;blockquote>
&lt;p>Что же делать?&lt;/p>
&lt;/blockquote>
&lt;p>Ничего нового: дисциплинировать себя и больше фильтровать входную информацию.&lt;/p>
&lt;blockquote>
&lt;p>Как это сделать?&lt;/p>
&lt;/blockquote>
&lt;p>Тут уже есть вариации. Для начала можно устроить информационный детокс и перестать читать вообще, чтобы понять чего ты хочешь. После этого сократить количество источников, оставив только девять. Почему девять? Если честно, я не помню, это было в какой-то статье. (:
Возвращаясь к 2016 году, мне помогло добавление ежедневной задачи &amp;ldquo;разобрать 10 статей&amp;rdquo;. То есть у меня образовалась привычка накопления без прочтения, от которой мне удалось избавиться.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/pocket-second-half-2016.png" alt="Решились проблемы">&lt;/p>
&lt;p>На этом хотелось бы закончить историю, но в прошлом году древнее зло пробудилось:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/pocket-second-half-2017.png" alt="Вернулись проблемы">&lt;/p>
&lt;p>Пришлось изобретать собственную алгоритмическую ленту, о которой расскажу в следующей статье.&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;ul>
&lt;li>Если используете очередь чтения статей, держите их количество близким к нулю.&lt;/li>
&lt;li>Думайте &lt;em>что&lt;/em> и &lt;em>зачем&lt;/em> вы читаете, не усложняйте себе жизнь ненужным.&lt;/li>
&lt;li>Если ушли в накопительство, не бойтесь выкинуть всё и начать сначала.&lt;/li>
&lt;/ul>
&lt;h2 id="полезные-расширения-для-pocket">Полезные расширения для Pocket&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://chrome.google.com/webstore/detail/accelereader-power-up-you/ndaldjfflhocdageglcnflfanmdhgfbi">AcceleReader&lt;/a> для Chrome Desktop&lt;/li>
&lt;li>&lt;a href="https://play.google.com/store/apps/details?id=dev.emmaguy.pocketwidget">DashClock Extension for Pocket&lt;/a> для Android&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/vanadium23/d9ea3b7c2e8f3265ff209cb7358127fb">Мой скрипт&lt;/a> для TamperMonkey, чтобы показывать статистику в разрезе дня/недели/всего&lt;/li>
&lt;/ul></description></item><item><title>План действий после книги «Куда уходят деньги? Как грамотно управлять семейным бюджетом»</title><link>https://vanadium23.me/financial-planning/</link><pubDate>Sat, 24 Mar 2018 17:00:00 +0300</pubDate><guid>https://vanadium23.me/financial-planning/</guid><description>&lt;p>На днях дочитал книжку «Куда уходят деньги? Как грамотно управлять семейным бюджетом» за авторством Юлии Сахаровской. Несмотря на то, что книжка была издана в 2012 году (когда один доллар был ещё по 30 рублей, а я только-только вышел на первую работу) книга содержит ряд &lt;em>возможно капитанских&lt;/em>, но очень важных для жизни советов. Давайте их перечислим:&lt;/p>
&lt;ul>
&lt;li>Выпишите &amp;ldquo;список счастья&amp;rdquo; - крупные покупки, которые вы хотите совершить в ближайшие 5 лет (например: ипотека, машина, ремонт или отпуска)&lt;/li>
&lt;li>Осознайте сколько у вас осталось трудовых лет&lt;/li>
&lt;li>Поймите, что помимо больших покупок, вам придется поддерживать родителей и детей, а на пенсии и себя&lt;/li>
&lt;li>Занимайтесь учётом расходов в разбивке по категориям&lt;/li>
&lt;li>Имейте финансовую подушку в размере 3-6-12 месяцев * на ваши ежемесячные расходы&lt;/li>
&lt;li>Попробуйте составить финансовый план на 3-5 лет, а лучше на 10&lt;/li>
&lt;li>Переведите пенсию в негосударственный фонд&lt;/li>
&lt;li>Застрахуйте свою жизнь, если доля вашего дохода в семье самая большая&lt;/li>
&lt;/ul>
&lt;p>Пункты выглядят немножко вразнобой, но основная мысль в том, что времени не так уж и много, и если у вас нет лайфхака &amp;ldquo;богатые родители&amp;rdquo;, то относиться к ресурсам надо с умом.&lt;/p>
&lt;h2 id="мой-план-действий">Мой план действий&lt;/h2>
&lt;h3 id="список-счастья">Список счастья&lt;/h3>
&lt;p>Список счастья довольно тривиальный: да, ипотека; да, потом ремонт там; да, дети; да, хотелось бы ещё и отдыхать где-нибудь, то есть консерватизм и гедонизм. Пункт про ипотеку довольно подробно описывался в книге, точнее что это плохой инструмент для получения прибыли: если у вас уже есть жильё, и ипотеку вы рассматриваете в качестве инвестиций, то на аренде вряд ли отобъёте без грамотного планирования и понимания ситуации на рынке недвижимости. А можно просто завести трактор и куда-нибудь уехать, но будем честными в это тоже надо довольно много вкладываться причём как и деньгами, так и временем.&lt;/p>
&lt;h3 id="учёт-расходов">Учёт расходов&lt;/h3>
&lt;p>Глава об учёте расписывала преимущества использования интернет-банков со встроенной аналитикой, что, как мне кажется, сейчас все и так используют. Сам же с ~2013 года использую &lt;a href="https://zenmoney.ru/">zenmoney&lt;/a>. В книжке среди программ она была упомянута, поэтому был рад, что сделал правильный выбор.&lt;/p>
&lt;p>Плюсы Zenmoney:&lt;/p>
&lt;ul>
&lt;li>Умеет парсить SMS, поэтому вы не зависите от конкретного банка и его категорий&lt;/li>
&lt;li>Запоминает связку между категорией и получателем платежа, т.е. пару тройку раз вводишь сам, а потом уже автоматом&lt;/li>
&lt;li>Автоматизацию можно настраивать самостоятельно, например: если получатель перекрёсток и сумма меньше 100 рублей, то ставь подкатегорию &amp;ldquo;газировка&amp;rdquo;, а не просто &amp;ldquo;продукты&amp;rdquo;&lt;/li>
&lt;li>Богатые инструменты для финансового планирования: бюджет, цели, работа с депозитами, будущими платежами и начислениями&lt;/li>
&lt;/ul>
&lt;p>Минусы:&lt;/p>
&lt;ul>
&lt;li>Парсинг SMS работает только на android&lt;/li>
&lt;li>Интеграций с интернет-банками очень мало&lt;/li>
&lt;li>Всё это хранится в облаке, поэтому не подходит тем, кто боится за сохранность своих данных&lt;/li>
&lt;li>Надо оплачивать подписку&lt;/li>
&lt;/ul>
&lt;p>И зря пропустил эту главу, потому что там была хорошая таблица какие категории расходов у вас должны быть:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Категория&lt;/th>
&lt;th style="text-align:center">Подкатегория&lt;/th>
&lt;th style="text-align:center">Процент&lt;/th>
&lt;th style="text-align:center">Комментарий&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Счета, связанные с квартирой&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">5%&lt;/td>
&lt;td style="text-align:center">Оптимизировать сложно&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Бытовые&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">10%&lt;/td>
&lt;td style="text-align:center">Оптимизировать сложно&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">Телефон/интернет&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">Мелкий ремонт&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Питание&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">20-25%&lt;/td>
&lt;td style="text-align:center">Часто необоснованные траты&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">Продукты&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">Рестораны&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Лекарства&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">10%&lt;/td>
&lt;td style="text-align:center">Оптимизировать сложно (и даже опасно)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Транспорт&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">5%&lt;/td>
&lt;td style="text-align:center">Оптимизировать сложно&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Вещи&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">10-15%&lt;/td>
&lt;td style="text-align:center">Часто необоснованные траты&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Досуг&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">10-15%&lt;/td>
&lt;td style="text-align:center">Часто необоснованные траты&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">Кино&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">Музеи&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Образование&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">5%&lt;/td>
&lt;td style="text-align:center">Оптимизировать сложно&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Подарки&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">5%&lt;/td>
&lt;td style="text-align:center">Оптимизировать сложно&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Крупные расходы&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">20-25%&lt;/td>
&lt;td style="text-align:center">Часто необоснованные траты&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Вторая мысль состояла в том, что если какая-то подкатегория составляет большой процент расходов, то её надо вынести в полноценную категорию. После этого принять решения как её оптимизировать.
Вооружившись своим инструментом и новыми знаниями, получил следующие категории:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/zenmoney-category1.png" alt="Категории расходов">
&lt;img src="https://vanadium23.me/images/zenmoney-category2.png" alt="Кофе имеет иконку пончинка, потому что инонки кофе нет в приложении">
&lt;img src="https://vanadium23.me/images/zenmoney-category3.png" alt="Категории расходов (конец)">&lt;/p>
&lt;p>Картинок старых категорий у меня нет. Могу сказать, что их стало меньше, но появились категории, которые раньше не учитывались при планировании и создавали скрытые расходы. То же самое можно сделать и в Excel/Google Slides, поэтому сделал простую &lt;a href="https://docs.google.com/spreadsheets/d/1MhqNS_4oLu9cxt_FfpCptAUOEGiU965EM-mnnwQJ-vg/edit?usp=sharing">табличку&lt;/a>.&lt;/p>
&lt;h3 id="составляем-бюджет">Составляем бюджет&lt;/h3>
&lt;p>Теперь, когда есть статьи расходов и примерное понимание ежемесячных расходов и доходов, мы можем приступать к составлению бюджета. Составлять их надо два: долговременный (3-5 лет), где происходит накопление больших сумм на список счастья, и кратковременный (в рамках года) в разбивке по категориям. Как это сделать? Долговременный бюджет - это простая табличка:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Год&lt;/th>
&lt;th style="text-align:center">Деньги на начало&lt;/th>
&lt;th style="text-align:center">Ежемесячный доход&lt;/th>
&lt;th style="text-align:center">Ежемесячный расход&lt;/th>
&lt;th style="text-align:center">Большая покупка&lt;/th>
&lt;th style="text-align:right">Деньги на конец&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">2018&lt;/td>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">D&lt;/td>
&lt;td style="text-align:right">A+B*12-C*12-D&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">2019&lt;/td>
&lt;td style="text-align:center">A&amp;rsquo; (A+B*12-C*12-D)&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">D'&lt;/td>
&lt;td style="text-align:right">A*+B*12-C*12-F&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">2020&lt;/td>
&lt;td style="text-align:center">и так далее&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Надо ли учитывать инфляцию? В книге сказано, что нет, потому что это слишком сложно. Лучше правильно хранить/инвестировать деньги, чтобы она (инфляция) нивелировалась.
Надо ли менять сумму доходов и расходов, потому что откуда я знаю, что меня ждёт в будущем? Скажем так, можно сделать три плана: пессимистичный (снижение доходов, рост расходов), реалистичный (рост доходов, рост расходов), оптимистичный (рост доходов, снижение расходов). И немножечко здравого смысла, например: если вы взяли ипотеку, то ежемесячные расходы вряд ли останутся на том же уровне. Поиграться можно всё в той же &lt;a href="https://docs.google.com/spreadsheets/d/1MhqNS_4oLu9cxt_FfpCptAUOEGiU965EM-mnnwQJ-vg/edit#gid=1836030765">табличке&lt;/a>.&lt;/p>
&lt;p>Краткосрочный бюджет - это тоже &lt;em>неожиданно&lt;/em> табличка:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Категория&lt;/th>
&lt;th style="text-align:center">Апрель&lt;/th>
&lt;th style="text-align:center">Май&lt;/th>
&lt;th style="text-align:center">Июнь&lt;/th>
&lt;th style="text-align:center">Июль&lt;/th>
&lt;th style="text-align:center">Август&lt;/th>
&lt;th style="text-align:right">и так далее&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Доход&lt;/td>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:center">A&lt;/td>
&lt;td style="text-align:right">A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Расход&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:center">B&lt;/td>
&lt;td style="text-align:right">B&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Питание&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:center">C&lt;/td>
&lt;td style="text-align:right">C&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Досуг&lt;/td>
&lt;td style="text-align:center">D&lt;/td>
&lt;td style="text-align:center">D&lt;/td>
&lt;td style="text-align:center">D&lt;/td>
&lt;td style="text-align:center">D&lt;/td>
&lt;td style="text-align:center">D&lt;/td>
&lt;td style="text-align:right">D&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">и так далее&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Накопления&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Финансовая подушка&lt;/td>
&lt;td style="text-align:center">E&lt;/td>
&lt;td style="text-align:center">E&lt;/td>
&lt;td style="text-align:center">E&lt;/td>
&lt;td style="text-align:center">E&lt;/td>
&lt;td style="text-align:center">E&lt;/td>
&lt;td style="text-align:right">E&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Итого&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Желательно разбивать не только расходы, но и доходы, как минимум на активные и пассивные. К началу пенсии &lt;em>желательно&lt;/em>, чтобы сумма пассивного дохода была чуть больше, чем ваши ежемесячные расходы. Отдельно от категорий расходов стоят накопления. Если ваша финансовая подушка меньше, чем ежемесячные расходы, то первым накоплением должна стать она. Потому что никто не застрахован от непредвиденных ситуаций и лучше иметь план на этот случай.&lt;/p>
&lt;h3 id="пенсия-страховка-и-то-о-чём-никогда-не-думаешь-в-20-лет">Пенсия, страховка и то о чём никогда не думаешь в 20 лет&lt;/h3>
&lt;p>В один день мне написала девушка и сказала, что посчитала свою пенсию. И знаете сколько она составила? 8600 рублей. Да ладно, подумал я и пошёл считать свою:&lt;/p>
&lt;ol>
&lt;li>Идём на &lt;a href="https://www.gosuslugi.ru/">госулуги&lt;/a>&lt;/li>
&lt;li>Находим услугу &amp;ldquo;Извещение о состоянии лицевого счета в ПФР&amp;rdquo;&lt;/li>
&lt;li>Заказываем&lt;/li>
&lt;li>Получаем pdf на почту&lt;/li>
&lt;li>На первой странице есть величина индивидуального пенсионного коэффициента (ИПК)&lt;/li>
&lt;li>Вставляем в формулу: ИПК * 81,49 + 4982,90 (актуально на 2018 год)&lt;/li>
&lt;li>Удивляемся (:&lt;/li>
&lt;/ol>
&lt;p>К чему было это упражнение? Опуская за скобки обсуждение, что пенсионный фонд заморожен, экономика в говне и тому подобное, попробуйте ответить на вопрос, как вы будете обеспечивать себя в старости.
&lt;img src="https://cs8.pikabu.ru/post_img/big/2017/12/15/11/1513360876156752562.jpg" alt="Экономика в огне, ты в огне и всё в оген">
Ответ: как минимум откладывайте деньги и переведите свою пенсию в негосударственный фонд.
Так просто? Нет, ещё на вас может упасть кирпич или случиться инсульт. По здоровью - это не ко мне, а скорее к &lt;a href="https://vc.ru/26886-personal-biohacking">&lt;strike>биохакерам&lt;/strike>&lt;/a> врачам. А вот с риском падения кирпича можно справиться с помощью страхования жизни. Пока эта тема не была мной изучена и поэтому советовать ничего не буду.&lt;/p>
&lt;h2 id="итого">Итого&lt;/h2>
&lt;ul>
&lt;li>Появилось ощущение контроля финансового потока, а не просто &amp;ldquo;знаю на что потратил&amp;rdquo;&lt;/li>
&lt;li>Не чувствуется ограничений в расходах, так как есть большие цели&lt;/li>
&lt;li>Немного поменялся образ мышления и отношение к своим деньгам и времени&lt;/li>
&lt;/ul>
&lt;h2 id="небольшой-бонус">Небольшой бонус&lt;/h2>
&lt;p>Теперь при покупке в магазинах на чеках распечатывается QR-код, в котором зашиты номер транзакции и юридического лица. С этими данными можно пойти в API nalog.ru и получить наименования пунктов из чека: продуктов в случае магазина, или блюд, если это был ресторан. Счастье в том, что это проинтегрировали в zenmoney и можно смотреть как дорожают те или иные продукты :)&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/zenmoney-qr1.png" alt="Показать чек">
&lt;img src="https://vanadium23.me/images/zenmoney-qr2.png" alt="Пункты из чека">&lt;/p>
&lt;p>Если вы дочитали до конца и не &lt;strike>охуели&lt;/strike> испугались, то перед вами открылся дивный новый мир.&lt;/p></description></item><item><title>Заметки по поездке в Марокко</title><link>https://vanadium23.me/marocco/</link><pubDate>Sun, 25 Feb 2018 17:00:00 +0300</pubDate><guid>https://vanadium23.me/marocco/</guid><description>&lt;p>Арааабская ночь&lt;/p>
&lt;h2 id="общее">Общее&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Про города:&lt;/strong> &lt;strike>все&lt;/strike> большинство городов строится по принципу, что есть медина (крепость), внутри которой всё для туристов и остальной город напоминает типичный жилой город.&lt;/li>
&lt;li>&lt;strong>Про еду:&lt;/strong> тажин кефта - мясные шарики в томатном соусе с яйцом. Ничего больше вам не нужно! Если шутки в сторону, то порции &lt;em>очень&lt;/em> большие, поэтому салат/закуску стоит брать одну на двоих.&lt;/li>
&lt;li>&lt;strong>Про такси:&lt;/strong> единственный вид транспорта по городу, во всех такси есть таксометер. Он там есть и им надо об этом напоминать и говорить сразу. Для маленьких городов есть фикс прайс в 7 дирхам (~50 рублей).&lt;/li>
&lt;li>Про &lt;strong>культуру:&lt;/strong> надо понимать, что там везде базар, поэтому если вам говорят ценник X, то надо говорить X/4 и где-то в X/2 вы сойдётесь. (Система очень сильно напоминает Kingdom Come: Deliverance)&lt;/li>
&lt;/ul>
&lt;h2 id="маршрут-поездки">Маршрут поездки&lt;/h2>
&lt;p>Касабланка-Эссуэйра-Марракеш-Рабат-Шефшауэн-Фез-Касабланка&lt;/p>
&lt;p>&lt;em>36 часов на общественном транспорте&lt;/em>&lt;/p>
&lt;p>&lt;em>&amp;gt;1500 км было наезжано&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Касабланка&lt;/strong> - грязный город, где как в Москве всё перестраивают. Самое интересное место набережная с мечетью Хасанна II.&lt;/li>
&lt;li>&lt;strong>Эссуэйра&lt;/strong> - если вы сёрфите или просто хотите пляжа, даже в зимнее время года (но купаться в нём нельзя). Очень маленькая медина ~1 день, зато много &amp;ldquo;европейских&amp;rdquo; ресторанов.&lt;/li>
&lt;li>&lt;strong>Марракеш&lt;/strong> - крупный город, но на самом деле отправная точка для того, чтобы съездить на треккинг, в пустыню или на водопад. В самом городе есть три старых замка и музей Ив Сент Лорана, но он дорогой и бесполезный, а вот в замки сходите, там есть фотографии древнего Марракеша и помогает удивиться как ничего не поменялось. Медины, как таковой нет, но зато есть центральная площадь, где ночью собирается весь колорит.&lt;/li>
&lt;li>&lt;strong>Рабат&lt;/strong> - это столица Марокко, поэтому там есть музей современного искусства. Медина - не очень.&lt;/li>
&lt;li>&lt;strong>Шефшауэн&lt;/strong> - красивый синий город в горах. Очень уютный, очень красивый, must see.&lt;/li>
&lt;li>&lt;strong>Фез&lt;/strong> - огромная медина, в которой вы заблудитесь. Местные будут вам подсказывать, а потом трясти деньги. Там шёл дождь, поэтому много чего не могу рассказать :(&lt;/li>
&lt;li>Смотри п.1&lt;/li>
&lt;/ul>
&lt;h2 id="бюджет-на-2-людей">Бюджет на 2 людей&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Билеты&lt;/strong> - ~35000₽ туда, сюда на двоих&lt;/li>
&lt;li>&lt;strong>Жильё&lt;/strong> - ~2000₽ за ночь на двоих&lt;/li>
&lt;li>&lt;strong>Транспорт:&lt;/strong>
&lt;ul>
&lt;li>По городу, как правило, ходишь пешком или такси, но там счётчик&lt;/li>
&lt;li>Между городами на автобусе 100 дирхам (~600₽) на одного&lt;/li>
&lt;li>Между городами на поезде не ездить, там адовая духота даже зимой&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Поглазеть:&lt;/strong>
&lt;ul>
&lt;li>Музеи - как правило, 10 дирхам (~60₽) на одного&lt;/li>
&lt;li>Экскурсии - будут предлагать за 300 дирхам (~1800₽) с человека, можно сторговаться на 150 дирхам (~900₽) за человека&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Еда:&lt;/strong>
&lt;ul>
&lt;li>где-то пожрать это 150 дирхам (~900₽) на двоих, это прям плотно поесть. Не переживайте ходить в местные забегаловки, которые не суперпристойно выглядят, т.к. готовят они везде одинаково.&lt;/li>
&lt;li>готовить дома - не нужно, местные жральни довольно дешёвые и сытные&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>PipEnv, Pipfile, pip... what?!</title><link>https://vanadium23.me/pipenv-pipfile-pip-what/</link><pubDate>Fri, 15 Dec 2017 17:00:00 +0300</pubDate><guid>https://vanadium23.me/pipenv-pipfile-pip-what/</guid><description>&lt;p>My presentation about PipEnv from &lt;a href="http://www.moscowpython.ru/meetup/50/">MoscowPython Meetup #50&lt;/a> @ Rambler HQ.&lt;/p>
&lt;p>Video is in russian:&lt;/p>
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/2N0phx7WTEI" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen>&lt;/iframe>
&lt;p>And slides in english:&lt;/p>
&lt;script async class="speakerdeck-embed" data-id="a52512c5af6c43a09cba15f23737e449" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js">&lt;/script></description></item><item><title>Вишлист на Д.Р. 2017</title><link>https://vanadium23.me/wishlist-2017/</link><pubDate>Tue, 05 Sep 2017 17:00:00 +0300</pubDate><guid>https://vanadium23.me/wishlist-2017/</guid><description>&lt;h2 id="wishlist-2017">Wishlist 2017&lt;/h2>
&lt;h3 id="крупняк-который-хочется">Крупняк, который хочется:&lt;/h3>
&lt;p>Не для дарения, а может что-то в комплект к этому, e.g.: игры на плойку. Это запушит переступить себя и наконец-то купить эту штуковину.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://www.foxpox.ru/shop/UID_1424.html">Робот-пылесос Xiaomi Mi Robot Vacuum Cleaner&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mir.nintendo.ru/categories/switch">Nintendo Switch&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.mvideo.ru/products/igrovaya-konsol-playstation-4-pro-1tb-cuh-7008b-40065249">Playstation 4 Pro&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="чего-не-хватает">Чего не хватает&lt;/h3>
&lt;ol>
&lt;li>Посеял все наушники хотел бы &lt;a href="https://www.apple.com/ru/shop/product/MNHF2ZM/A/earpods-%D1%81-%D1%80%D0%B0%D0%B7%D1%8A%D1%91%D0%BC%D0%BE%D0%BC-35-%D0%BC%D0%BC">Apple EarPods с 3.5мм входом&lt;/a>&lt;/li>
&lt;li>Маленький дрон какой-нибудь, чтобы по квартире летать (:&lt;/li>
&lt;li>Набор гаечных ключей (оказалось дома нет, а полезно)&lt;/li>
&lt;li>&lt;a href="https://www.razerzone.ru/product/mouses/deathadder-3500">Deathadder новый&lt;/a>
&lt;ol>
&lt;li>И &lt;a href="https://www.razerzone.ru/product/mousepads/">коврик&lt;/a> к нему&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Контроллер игровой &lt;a href="http://gaming.logitech.com/ru-ru/product/f710-wireless-gamepad">Logitech F710&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://market.yandex.ru/product/13067065?show-uid=050641276356821320016002&amp;amp;nid=55410&amp;amp;track=product_card_analog">Мобильный роутер&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="старое-доброе">Старое доброе&lt;/h3>
&lt;ol>
&lt;li>Lego
&lt;ol>
&lt;li>&lt;a href="https://www.toy.ru/catalog/tekhnik/">Любое из Technik&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.toy.ru/catalog/zvezdnye_voyny/lego_star_wars_75099_lego_zvezdnye_voyny_nabor_epizod_vii_probuzhdenie_sily_1/">Lego Star Wars Спидер Рей 75099&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://shop.lego.com/en-GB/Doctor-Who-21304">Lego Doctor Who&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Настолки
&lt;ol>
&lt;li>&lt;a href="http://www.mosigra.ru/Face/Show/lovushka_dlya_pingvina/">Урони пингвина&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hobbyworld.ru/karkasson-korolevskij-podarok">Каркассон&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Книги
&lt;ol>
&lt;li>&lt;a href="http://www.chookandgeek.ru/search?q=%D0%A1%D0%9A%D0%9E%D0%A2%D0%A2+%D0%9F%D0%98%D0%9B%D0%98%D0%93%D0%A0%D0%98%D0%9C">Скотт Пилигрим&lt;/a> начиная с 4 тома включительно&lt;/li>
&lt;li>&lt;a href="http://www.chookandgeek.ru/product/saga-tom-1-2">Сага&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.chookandgeek.ru/product/vedmak-dom-vitrazhey">Ведьмак 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.chookandgeek.ru/product/vedmak-lisi-deti">Ведьмак 2&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item><item><title>Stupid mistakes with database</title><link>https://vanadium23.me/stupid-database-mistakes/</link><pubDate>Sat, 02 Sep 2017 17:00:00 +0300</pubDate><guid>https://vanadium23.me/stupid-database-mistakes/</guid><description>&lt;p>You know you&amp;rsquo;re wrong at database administrating, when&amp;hellip;&lt;/p>
&lt;h2 id="1-dont-monitor-free-space-on-disk">1. Don&amp;rsquo;t monitor free space on disk&lt;/h2>
&lt;p>&lt;strong>DO:&lt;/strong> Just do it, and not some simple trigger on 10% free left space, but either how many days till day X.&lt;/p>
&lt;h2 id="2-dont-make-check-backups">2. Don&amp;rsquo;t &lt;del>make&lt;/del> check backups&lt;/h2>
&lt;p>So you use some tools for backing up your database, but when day X comes, you can not restore from it.&lt;/p>
&lt;p>&lt;strong>DO:&lt;/strong> every backup needs to be restored.&lt;/p>
&lt;h2 id="3-dont-monitor-slowestfrequent-queries">3. Don&amp;rsquo;t monitor slowest/frequent queries&lt;/h2>
&lt;p>&lt;strong>DO:&lt;/strong> there is different approaches for that, but the simplest one is &lt;a href="https://github.com/dalibo/pgbadger">pgBadger&lt;/a> with syslog.&lt;/p>
&lt;h2 id="4-dont-use-int4-as-pk-for-append-only-tables">4. Don&amp;rsquo;t use int4 as pk for append-only tables&lt;/h2>
&lt;p>&lt;strong>DO:&lt;/strong> just use bigint. Rails make bigint as default for pk in &lt;a href="http://www.mccartie.com/2016/12/05/rails-5.1.html">5.1&lt;/a>. Hopefully, Django will make it in 2.x.&lt;/p>
&lt;h2 id="5-dont-restart-database-on-every-error-you-see">5. Don&amp;rsquo;t restart database on every error you see.&lt;/h2>
&lt;p>&lt;strong>DO:&lt;/strong> hire DBA (just joking). Try to find a root cause with your monitoring. May be it&amp;rsquo;s just bad statics on table and you need to run &lt;code>ANALYSE table&lt;/code>.&lt;/p></description></item><item><title>The Ajax, The REST and The GraphQL</title><link>https://vanadium23.me/ajax-rest-graphql/</link><pubDate>Fri, 18 Aug 2017 17:00:00 +0300</pubDate><guid>https://vanadium23.me/ajax-rest-graphql/</guid><description>&lt;p>My presentation about GraphQL from MoscowPython Meetup #47 @ Mail.Ru HQ.&lt;/p>
&lt;p>Video is in russian:&lt;/p>
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/9JqtlPO78y0" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;p>And slides in english:&lt;/p>
&lt;script async class="speakerdeck-embed" data-id="3022a498ddc344b4933b4b955dd7c660" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js">&lt;/script></description></item><item><title>Заметки по поездке Брюгге-Роттердам-Брюссель</title><link>https://vanadium23.me/brugge-rotterdam-brussel/</link><pubDate>Fri, 12 May 2017 17:00:00 +0300</pubDate><guid>https://vanadium23.me/brugge-rotterdam-brussel/</guid><description>&lt;p>Идеальный трип на майские&lt;/p>
&lt;h2 id="must-see">Must see&lt;/h2>
&lt;p>Обязательно пользуйтесь картами &lt;a href="https://www.use-it.travel/home">USE IT&lt;/a>: там есть все местные музеи, барчики и едальни, а ещё их дают бесплатно на стойках для туристов.&lt;/p>
&lt;ul>
&lt;li>Брюгге
&lt;ul>
&lt;li>Просто ходите по центру, там красиво, есть башня&lt;/li>
&lt;li>Больше одной ночи там делать нечего&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Роттердам
&lt;ul>
&lt;li>Музеи: Kunsthal, Евроматча, Het Nieuwe Instituut, Boijmans van Beuningen&lt;/li>
&lt;li>Жральни: bazaar и ходите в супермаркет&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Гаага (на английском звучит как Хааг)
&lt;ul>
&lt;li>Музеи: музей Эшера, парк мини Голландия&lt;/li>
&lt;li>Доехать до порта, если тепло (в мае уже норм)&lt;/li>
&lt;li>Жрать: бутер с селёдкой&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Брюссель
&lt;ul>
&lt;li>Вообще ехать туда не стоит: грязно и убого&lt;/li>
&lt;li>Музеи: MOOF, музей Маггрита, музей бельгийского пива, Атомиум(!)&lt;/li>
&lt;li>Жральни: рядом с площадью музеев куча фудтраков&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="бюджет-на-2-людей">Бюджет на 2 людей&lt;/h2>
&lt;ul>
&lt;li>Билеты - ~250€ туда, сюда на одного&lt;/li>
&lt;li>Жильё - ~50€ за ночь на одного&lt;/li>
&lt;li>Транспорт:
&lt;ul>
&lt;li>По городу на день 10€ на сутки&lt;/li>
&lt;li>Между городами на поезде от 15€ и дальше по расстоянию (Брюгге&amp;lt;-&amp;gt;Роттердам - 30€ т.к. два поезда)&lt;/li>
&lt;li>Между городами на автобусе от 8€ и дальше по расстоянию (&lt;a href="https://www.flibco.com/en">flibco&lt;/a>, &lt;a href="https://www.flixbus.ru/">flixbus&lt;/a>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Музеи: 15€ за вход на человека, но:
&lt;ul>
&lt;li>В Роттердаме есть &lt;a href="https://www.rotterdamwelcomecard.com/en/alle-kortingen.html">welcome card&lt;/a>&lt;/li>
&lt;li>В Брюсселе за 24€ можно купить &lt;a href="https://visit.brussels/en/lists/brussels-card-museums">bruxellescard&lt;/a> == 39 музеев&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Еда:
&lt;ul>
&lt;li>где-то пожрать это 15-20€, если нормально есть. Можно постратся и найти места где дешевле, но сложно&lt;/li>
&lt;li>готовить дома - это где-то 10-12€ на завтрак+ужин&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Скидосы: если вам меньше 26 лет, просите везде скидосы! Как правило он есть в районе 10-25%.&lt;/li>
&lt;/ul>
&lt;h3 id="ps">P.S.&lt;/h3>
&lt;p>На последок хотел сказать, что в Роттердаме заселялся через AirBnb и с нами жил очень классный южный кореец (студент по обмену), поэтому вечера проходили в культурном обмене за бутылочкой пива:&lt;/p>
&lt;ul>
&lt;li>80 кг риса в месяц на семью из 4 человек&lt;/li>
&lt;li>очень много про различное восприятие поведения в общественных местах&lt;/li>
&lt;li>он побывал почти во всей Европе и Азии, да и успел смотаться в Бразилию о чём тоже охотно делился&lt;/li>
&lt;/ul></description></item><item><title>Funny notes on migration to python3</title><link>https://vanadium23.me/funny-notes-on-py3k-migration/</link><pubDate>Fri, 09 Dec 2016 17:00:00 +0300</pubDate><guid>https://vanadium23.me/funny-notes-on-py3k-migration/</guid><description>&lt;p>Python3 is a great pain in python community. It was released on Dec 3, 2008 and brings major breaking changes and also new interpreter was slower, than python2 realization. After long way and five releases, in 2016, it&amp;rsquo;s obvious to start on python 3.5: type hinting, asyncio, same perfomance and gets better in coming &lt;a href="https://docs.python.org/3.6/whatsnew/3.6.html">python 3.6&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Warning&lt;/strong>: this is not an article about how to migrate to python3, but more about how to catch errors before deploy to prod.
For python3 migrations, see something like &lt;a href="https://www.toptal.com/python/python-3-is-it-worth-the-switch">this&lt;/a> or &lt;a href="http://python3porting.com/strategies.html">this&lt;/a>.
Always remember simple thing: more unit &amp;amp; integrations tests you have =&amp;gt; earlier you detect bugs.&lt;/p>
&lt;p>Contents:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#py3k-division">integer division&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-comparations">unorderable types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-except">except Exception&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-byteswarning">bytes comparison&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-ujson">special thanks to ujson&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-lxml">lxml trap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-redispy">changes in work with redis-py&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-django">Note: how to make smaller diff between py2 and py3 version on django&lt;/a>&lt;/li>
&lt;/ol>
&lt;h1 id="a-namepy3k-divisionadivision">&lt;a name="py3k-division">&lt;/a>Division&lt;/h1>
&lt;p>Can you guess what kind of exception will be there,
if hotel.rating is integer.&lt;/p>
&lt;pre tabindex="0">&lt;code>stars = range(hotel.rating / 10)
&lt;/code>&lt;/pre>&lt;p>Correct answer:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt; TypeError: &amp;#39;float&amp;#39; object cannot be interpreted as an integer
&lt;/code>&lt;/pre>&lt;p>Solution:&lt;/p>
&lt;pre tabindex="0">&lt;code># do it before migrations, it works on py2
from __future__ import division
stars = range(hotel.rating // 10)
&lt;/code>&lt;/pre>&lt;h1 id="a-namepy3k-comparationsaunorderable-types">&lt;a name="py3k-comparations">&lt;/a>Unorderable types&lt;/h1>
&lt;p>So, in python 3 you can&amp;rsquo;t do such things:&lt;/p>
&lt;pre tabindex="0">&lt;code>None &amp;gt; None
1 &amp;gt; None
&amp;#39;1&amp;#39; &amp;gt; 1
&amp;gt; TypeError: unorderable types: int() &amp;gt; NoneType()
&lt;/code>&lt;/pre>&lt;p>Because it&amp;rsquo;s more strict for types. How it was found:&lt;/p>
&lt;pre tabindex="0">&lt;code>chosen_indexes = Obj.objects.values_list(&amp;#39;chosen_index&amp;#39;, flat=True)
...
...
...
max_index = max(chosen_indexes)
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s ok code, but if field chosen_index can be null, you will catch TypeError.&lt;/p>
&lt;p>Solution: just filter None values in list, or null in queryset.&lt;/p>
&lt;h2 id="a-namepy3k-exceptaexcept-exception">&lt;a name="py3k-except">&lt;/a>except Exception&lt;/h2>
&lt;p>Pretty much uses external APIs: may be you send letters through MailGun or Mandrill, you can call some other services in your company.
But you know - sometimes they just fail: connection timeouts, 5xx errors.
For handling such cases you can make tuple of Exception:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> requests.exceptions &lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HTTPError
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NETWORK_EXCEPTIONS &lt;span style="color:#f92672">=&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HTTPException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># some bad code example, but for teach purpose&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(some_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> ujson&lt;span style="color:#f92672">.&lt;/span>loads(response&lt;span style="color:#f92672">.&lt;/span>content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> (NETWORK_EXCEPTIONS, &lt;span style="color:#a6e22e">ValueError&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>error(&lt;span style="color:#e6db74">&amp;#39;some bad thing happend&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code won&amp;rsquo;t work on python3, because interpreter check exception is subclass of BaseException.&lt;/p>
&lt;p>Solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> requests.exceptions &lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HTTPError
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NETWORK_EXCEPTIONS &lt;span style="color:#f92672">=&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HTTPException
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(some_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> ujson&lt;span style="color:#f92672">.&lt;/span>loads(response&lt;span style="color:#f92672">.&lt;/span>content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> NETWORK_EXCEPTIONS &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#a6e22e">ValueError&lt;/span>,):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>error(&lt;span style="color:#e6db74">&amp;#39;some bad thing happend&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Second interesting example is that, except create variable in local scope and its make hard to print/ipdb. (This is some questing during interview, that I love to ask).
Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>import json
exc = &amp;#39;test&amp;#39;
try:
result = json.loads(&amp;#39;{test}&amp;#39;)
except ValueError as exc:
pass
# there will be no exc variable on py3k
print(exc)
&amp;gt; NameError: name &amp;#39;exc&amp;#39; is not defined
&lt;/code>&lt;/pre>&lt;h1 id="a-namepy3k-byteswarningabytes-comparison">&lt;a name="py3k-byteswarning">&lt;/a>bytes comparison&lt;/h1>
&lt;p>It&amp;rsquo;s greatest pain in migration. So much pain, I can feel it in my head.
Next 3 bullets is about it.
First: no implicit conversion between str and bytes.
Solution:&lt;/p>
&lt;pre tabindex="0">&lt;code>python3 -bb your_script.py
&lt;/code>&lt;/pre>&lt;p>It throw ByteWarning exception insted of falsing b&amp;rsquo;&amp;rsquo; == &amp;lsquo;&amp;rsquo;.&lt;/p>
&lt;p>Second: some libs expected bytes on input, some text.&lt;/p>
&lt;p>Solution: call .decode on bytes &amp;amp; encode on str.&lt;/p>
&lt;h1 id="a-namepy3k-ujsonajust-ujson">&lt;a name="py3k-ujson">&lt;/a>just ujson&lt;/h1>
&lt;p>Json from standart libs expects str on input, ujson can deal with str and bytes.
Also ujson much faster, see comparasion on &lt;a href="https://github.com/esnme/ultrajson#benchmarks">github&lt;/a>.&lt;/p>
&lt;h1 id="a-namepy3k-lxmlalxml-trap">&lt;a name="py3k-lxml">&lt;/a>lxml trap&lt;/h1>
&lt;p>Ooops, this was tough one. Some service provides XML API.
It answers question of life, universe and everything.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;root&amp;gt;
&amp;lt;answer&amp;gt;42&amp;lt;/answer&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You want to parse it using lxml:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> lxml &lt;span style="color:#f92672">import&lt;/span> objectify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xml_answer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;root&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;answer&amp;gt;42&amp;lt;/answer&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;/root&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xml &lt;span style="color:#f92672">=&lt;/span> objectify&lt;span style="color:#f92672">.&lt;/span>parse(buf)&lt;span style="color:#f92672">.&lt;/span>getroot()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This example works both on py2 and py3, but some little difference:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> lxml &lt;span style="color:#f92672">import&lt;/span> objectify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xml_answer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;root&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;answer&amp;gt;42&amp;lt;/answer&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;/root&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xml &lt;span style="color:#f92672">=&lt;/span> objectify&lt;span style="color:#f92672">.&lt;/span>parse(buf)&lt;span style="color:#f92672">.&lt;/span>getroot()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aaaand lxml wants bytes on input instead of string ¯\&lt;em>(ツ)&lt;/em>/¯.&lt;/p>
&lt;h1 id="a-namepy3k-redispyaredis-py-bytes">&lt;a name="py3k-redispy">&lt;/a>redis-py bytes&lt;/h1>
&lt;p>All redis action from redispy returns bytes now. So if you use pure redis (not a django.core.cache), you need to explicit call decode. Also pickling objects between python3 and python2 doesn&amp;rsquo;t work, so make sure you make different keys in cache.&lt;/p>
&lt;h2 id="a-namepy3k-djangoanote-how-to-make-smaller-diff-between-py2-and-py3-version-on-django">&lt;a name="py3k-django">&lt;/a>Note: how to make smaller diff between py2 and py3 version on django&lt;/h2>
&lt;p>So sums it up with django experience:&lt;/p>
&lt;ol>
&lt;li>use smart_text instead of smart_unicode&lt;/li>
&lt;li>use @python_2_unicode_compatible decorator&lt;/li>
&lt;li>use key_prefix in django.caches, when moving&lt;/li>
&lt;/ol>
&lt;p>Thanks for reading.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/move-to-py3k.png" alt="keep calm and move to python3">&lt;/p></description></item><item><title>Say hello to l10n in python</title><link>https://vanadium23.me/l10n-in-python/</link><pubDate>Sat, 26 Nov 2016 17:00:00 +0300</pubDate><guid>https://vanadium23.me/l10n-in-python/</guid><description>&lt;p>In python world, many solutions for trivial problems could be found in standart library: from &lt;a href="https://docs.python.org/3/library/statistics.html">statistical functions&lt;/a> to &lt;a href="https://docs.python.org/3/library/gettext.html">localization&lt;/a> for your package.
But somehow some things just don&amp;rsquo;t connect to each other, and you just stuck at combining this constructor in right way.&lt;/p>
&lt;p>This gifs pretty sums up situation:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/modern-development.gif" alt="modern-development">&lt;/p>
&lt;p>Our task:&lt;/p>
&lt;ul>
&lt;li>create python package, that has localized string&lt;/li>
&lt;li>provide this string to django application&lt;/li>
&lt;/ul>
&lt;p>First thing, that you find at &lt;a href="https://docs.python.org/3/library/gettext.html">gettext docs&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>import gettext
import os
BASE_DIR = os.path.dirname(__file__)
LOCALE_DIR = os.path.join(BASE_DIR, &amp;#39;locale&amp;#39;)
# try to set param fallback to False
t = gettext.translation(&amp;#39;default&amp;#39;, LOCALE_DIR, fallback=True)
_ = t.ugettext
message = _(&amp;#39;Test!&amp;#39;)
print(message)
&lt;/code>&lt;/pre>&lt;p>To change language on your system, you can simply set enviroment variable &lt;em>LANG&lt;/em> or &lt;em>LANGUAGE&lt;/em>.&lt;/p>
&lt;pre tabindex="0">&lt;code>~ export LANG=ru
~ python test.py
Test!
&lt;/code>&lt;/pre>&lt;p>This won&amp;rsquo;t work, because you don&amp;rsquo;t have translated phrases in your locale dir. Let&amp;rsquo;s compile them.
Command pygettext grabs all string in &lt;em>ugettext&lt;/em> function and dumps it to pot file.
After it, you need to init new locale (&lt;em>note:&lt;/em> if you need to merge with previos translations use &lt;em>msgmerge&lt;/em>).&lt;/p>
&lt;pre tabindex="0">&lt;code>~ pygettext test.py
~ mkdir -p ./locale/{en,ru}/LC_MESSAGES/
~ msginit --input=messages.pot --locale=en_US.UTF-8 \
--output=./locale/en/LC_MESSAGES/default.po
~ msginit --input=messages.pot --locale=ru_RU.UTF-8 \
--output=./locale/ru/LC_MESSAGES/default.po
~ rm messages.pot
&lt;/code>&lt;/pre>&lt;p>Now you can open default.po files with some tools, like &lt;a href="https://poedit.net/">POEdit&lt;/a> (&lt;em>note:&lt;/em> I prefer Sublime Text for small po).
Change in ru po msgstr from &amp;lsquo;Test!&amp;rsquo; to &amp;lsquo;Тест!&amp;rsquo;. When you run script again, output will be same (&amp;lsquo;Test!&amp;rsquo;).
This is because after modifying po, we need to compile it to binary format (known as mo).&lt;/p>
&lt;pre tabindex="0">&lt;code>~ msgfmt en/LC_MESSAGES/default.po -o en/LC_MESSAGES/default.mo
~ msgfmt ru/LC_MESSAGES/default.po -o ru/LC_MESSAGES/default.mo
&lt;/code>&lt;/pre>&lt;p>Woo-hoo, output should be translated now, but it doesn&amp;rsquo;t work with django.
What shall we do? Read the &lt;a href="https://docs.djangoproject.com/en/1.10/topics/i18n/translation/#how-django-discovers-translations">manual&lt;/a>.
So we need to rename namespace from default to django, but also django realize &lt;a href="https://github.com/django/django/blob/1.10.3/django/utils/translation/trans_real.py#L90">own class&lt;/a>, so insted of using gettext.translation.ugettext you need to use &lt;em>django.utils.translation&lt;/em> one.
Full example can be found in &lt;a href="https://github.com/vanadium23/py-hello-l10n">repository&lt;/a>.&lt;/p></description></item><item><title>Cook django with aiohttp workers</title><link>https://vanadium23.me/django-gunicorn-aiohttp/</link><pubDate>Sun, 20 Nov 2016 17:00:00 +0300</pubDate><guid>https://vanadium23.me/django-gunicorn-aiohttp/</guid><description>&lt;p>There is some standart stack to run django in production.
For python 2, it is nginx + gunicorn or uwsgi + monkey patching libs, such as gevent or eventlet.
Generally, I prefer gunicorn + eventlet, but when you switch (or start) django project on latest python 3.5, eventlet can do &lt;a href="https://github.com/eventlet/eventlet/issues/313">some bad magic&lt;/a>. And you can switch to a new built-in mechanism, called &lt;em>aiohttp&lt;/em>.
Based on &lt;a href="http://docs.gunicorn.org/en/stable/design.html?highlight=gaiohttp#asyncio-workers">gunicorn docs&lt;/a>, you need simply switch worker to &lt;em>gaiohttp&lt;/em> and that&amp;rsquo;s all.&lt;/p>
&lt;p>Then, something bad happens.
&lt;img src="https://vanadium23.me/images/gaiohttp-memory.png" alt="gaiohttp-memory">&lt;/p>
&lt;p>Answer is very simple: &lt;strike>you write some memoryleaking code&lt;/strike> &lt;em>gaiohttp&lt;/em> ignores max_requests option.
In other words, workers won&amp;rsquo;t be killed after max_requests count. After some search on internet, there is an &lt;a href="http://asvetlov.blogspot.ru/2014/06/asyncio-aiohttp-gunicorn.html">article&lt;/a> from asyncio contributor about copy-n-pasting worker from aiohttp repo to gunicorn.
&lt;a href="http://aiohttp.readthedocs.io/en/stable/deployment.html#start-gunicorn">Aiohttp docs&lt;/a> says that you should use &lt;code>aiohttp.worker.GunicornWebWorker&lt;/code>, but when you switch setting there will be error.&lt;/p>
&lt;pre tabindex="0">&lt;code>[5898] [ERROR] Exception in worker process
Traceback (most recent call last):
File &amp;#34;./gunicorn/arbiter.py&amp;#34;, line 557, in spawn_worker
worker.init_process()
File &amp;#34;./aiohttp/worker.py&amp;#34;, line 37, in init_process
super().init_process()
File &amp;#34;./gunicorn/workers/base.py&amp;#34;, line 132, in init_process
self.run()
File &amp;#34;./aiohttp/worker.py&amp;#34;, line 40, in run
self.loop.run_until_complete(self.wsgi.startup())
AttributeError:
&amp;#39;WSGIHandler&amp;#39; object has no attribute &amp;#39;startup&amp;#39;
&lt;/code>&lt;/pre>&lt;p>So &lt;em>aiohttp.worker.GunicornWebWorker&lt;/em> differs from standart wsgi app for django. Luckily, python community has two packages to overcome these difficulties: &lt;em>aiohttp-wsgi&lt;/em> and &lt;em>aiodjango&lt;/em>, add them to your &lt;em>requirements.txt&lt;/em>.
After this modify your &lt;em>wsgi.py&lt;/em> according to &lt;a href="http://aiodjango.readthedocs.io/en/latest/usage.html#defining-the-application">docs&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>import os
from django.core.wsgi import get_wsgi_application
from aiodjango import get_aio_application
os.environ.setdefault(&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;, &amp;#39;settings&amp;#39;)
# Build WSGI application
# Any WSGI middleware would be added here
application = get_wsgi_application()
# Build aiohttp application
app = get_aio_application(application)
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s all folks.&lt;/p></description></item></channel></rss>
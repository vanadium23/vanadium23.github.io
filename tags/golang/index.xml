



<?xml-stylesheet type="text/xsl" href="#stylesheet" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <xsl:stylesheet id="stylesheet" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" exclude-result-prefixes="xsl">
    <xsl:output method="html" doctype-system="about:legacy-compat" />
    <xsl:template match="/rss">
      <html lang="ru-ru">
        <head>
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>golang RSS | vanadium23</title>
          <link rel="stylesheet" href="https://vanadium23.me/css/base.min.a3368a1810ce5f531d4379f7ef2a70a442d894fcc461091bac1ea3cfee39833c.css" integrity="sha256-ozaKGBDOX1MdQ3n37ypwpELYlPzEYQkbrB6jz&#43;45gzw=" />
        </head>
        <body>
          <nav class="u-background">
    <div class="u-wrapper Banner">
        <a class="Banner-link u-clickable" href="https://vanadium23.me/">
            vanadium23
        </a>
        <ul class="Banner">
        
        <li class="Banner-item">
            <a class="Banner-link u-clickable" href="https://vanadium23.me/about/">About</a>
        </li class="Banner-item">
        
        <li class="Banner-item">
            <a class="Banner-link u-clickable" href="https://vanadium23.me/tags/">Tags</a>
        </li class="Banner-item">
        
        <li>
            <a id="themeSwitch" class="theme-switcher"></a>
        </li>
        </ul>
    </div>
</nav>
          <main>
            <div class="u-wrapper">
              <div class="u-padding">
                <h2 class="Heading-title">
                  
                  <a class="Heading-link u-clickable" href="https://vanadium23.me/tags/golang/index.xml" rel="bookmark">golang RSS</a>
                  
                </h2>
                
              </div>
            </div>
          </main>
          <footer class="Footer">
  <div class="u-wrapper">
    <div class="u-padding">
        
        <a href="https://github.com/vanadium23"><i class="svg-icon github"></i></a>
        <a href="https://www.linkedin.com/in/vanadium23"><i class="svg-icon linkedin"></i></a>
        <a href="https://www.twitter.com/vanadium23"><i class="svg-icon twitter"></i></a>
        <a href="http://stackoverflow.com/users/4809450/vanadium23"><i class="svg-icon stackoverflow"></i></a>
        <a href="https://www.codewars.com/users/vanadium23"><i class="svg-icon codewars"></i></a>
        <a href="https://goodreads.com/vanadium23"><i class="svg-icon goodreads"></i></a>
    </div>
  </div>
</footer>
        </body>
      </html>
    </xsl:template>
  </xsl:stylesheet>
  <channel>
    <title>golang on vanadium23</title>
    <link>https://vanadium23.me/tags/golang/</link>
    <description>Recent content in golang on vanadium23</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Sun, 08 Mar 2020 09:00:00 +0300</lastBuildDate>
    <atom:link href="https://vanadium23.me/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Немножко про модули в golang</title>
      <link>https://vanadium23.me/golang-modules/</link>
      <pubDate>Sun, 08 Mar 2020 09:00:00 +0300</pubDate>
      <guid>https://vanadium23.me/golang-modules/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“Before software can be reusable, it first has to be usable.” – &lt;a href=&#34;https://en.wikipedia.org/wiki/Ralph_Johnson_(computer_scientist)&#34;&gt;Ralph Johnson&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Это статья скорее для себя, нежели чем хотелось чем-то поделиться. Идея её написания висела довольно давно, но сейчас сподвигло её написать статья &lt;a href=&#34;https://fasterthanli.me/blog/2020/i-want-off-mr-golangs-wild-ride/&#34;&gt;&amp;ldquo;I want off Mr. Golang&amp;rsquo;s Wild Ride&amp;rdquo;&lt;/a&gt;. Мысленно можно разделить эту статью на две части: первая, в которой идёт обсуждение объединения или нормализации API между разными операционными системами, и вторая, в которой идёт речь про модули и их реализацию. Russ Cox на &lt;a href=&#34;https://research.swtch.com/&#34;&gt;своём сайте&lt;/a&gt; сделал серию из 11 (!) статей, чтобы объяснить почему модули это не так просто, как казалось. Давайте кратко пройдёмся по истории работы с библиотеками в golang.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;ненавистный-gopath&#34;&gt;Ненавистный GOPATH&lt;/h2&gt;
&lt;p&gt;Первое, что тебе нужно было сделать прежде, чем начать работу с golang - это установить переменную GOPATH. Она была нужна для того, чтобы команда &lt;code&gt;go get&lt;/code&gt; знала куда складывать пакеты. Сейчас есть значение по умолчанию равное &lt;code&gt;$HOME/go&lt;/code&gt;, что немножко упрощает работу, но не сильно. В качестве неймспейса для всех библиотек используется формат &lt;code&gt;host/namespace/lib&lt;/code&gt;, например: &lt;code&gt;github.com/xo/usql&lt;/code&gt;.
Пробуем поставить утилиту &lt;code&gt;usql&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;% time go get github.com/xo/usql
56.93s user 6.39s system 85% cpu 1:13.98 total

% tree -d -L 3 ~/go/src
├── github.com
│   ├── alecthomas
│   │   ├── chroma
│   │   ├── kingpin
│   │   ├── template
│   │   └── units
│   ├── danwakefield
│   │   └── fnmatch
│   ├── denisenkom
│   │   └── go-mssqldb
│   ├── dlclark
│   │   └── regexp2
│   ├── gohxs
│   │   └── readline
│   ├── golang-sql
│   │   └── civil
│   ├── go-sql-driver
│   │   └── mysql
│   ├── lib
│   │   └── pq
│   ├── mattn
│   │   ├── go-isatty
│   │   ├── go-runewidth
│   │   └── go-sqlite3
│   ├── xo
│   │   ├── dburl
│   │   ├── tblfmt
│   │   ├── terminfo
│   │   ├── usql
│   │   └── xoutil
│   └── zaf
│       └── temp
└── golang.org
    └── x
        ├── crypto
        └── sys

% du -h --max-depth=1 ~/go/src/
77M	./github.com
35M	./golang.org
111M	.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Утилита предназначена для работы с разными базами данных и ожидаемо ей требуется много библиотек-драйверов для работы, но 111 мегабайт и минута на скачивание выглядит, как перебор. Если вам нужна только сама утилита, всегда можно использовать опцию &lt;code&gt;-u&lt;/code&gt;. В защиту такого подхода, хочу сказать что использование прямого соответствия между импортом библиотеки и пути по которому она находится удобно. Так как язык разработал Google, то сразу был сделан вывод о том, что вся эта система работала поверх монорепозитория внутри компании и такое использование было логично. Но как только язык вышел публично, сразу стало понятно что использовать хост сервиса в пути не самое удобное решение. В случае, если проект был перемещён в другое пространство, ничего страшного не происходит, но вот если поменялся хост, то труба. Об этом подумали несколько людей и началась вторая эпоха.&lt;/p&gt;
&lt;h2 id=&#34;средневековый-vendor&#34;&gt;Средневековый vendor&lt;/h2&gt;
&lt;p&gt;Когда node.js только набирал популярность (версии 0.8-0.12), шёл довольно большой холивар на тему вендоринга зависимостей. Были люди, которые говорили, что нужно складывать всю папку node_modules в репозиторий и при обновлении комиттить изменения, но в итоге сообщество пришло к тому, что это приносит только лишние расходы и отказались. Как мы все потом знаем, это привело к трагедии &lt;!-- raw HTML omitted --&gt;Дарта Плегаса&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm&#34;&gt;leftpad&lt;/a&gt;. В Golang решили пойти тем же путём и появилась папка vendor, правда чтобы её использовать необходимо было перезаписать GOPATH в текущую директорую и тогда начинались пляски с тем, что в директории должна была быть папка src, а в &lt;code&gt;.gitignore&lt;/code&gt; шли директории &lt;code&gt;bin/&lt;/code&gt; и &lt;code&gt;pkg/&lt;/code&gt;. Эту проблему надо было автоматизировать и появились инструменты, чтобы с таким подходом было работать удобно, а именно &lt;a href=&#34;https://github.com/Masterminds/glide&#34;&gt;glider&lt;/a&gt;, а в последствии &lt;a href=&#34;https://github.com/golang/dep&#34;&gt;dep&lt;/a&gt;. Более того, &lt;code&gt;dep&lt;/code&gt; был сделан как официальный эксперимент группы разработки языка, и в итоге именно он дал толчок развитию модулей в go 1.11. Из-за данных инструментов в репозиториях пропали папки &lt;code&gt;vendor&lt;/code&gt;, так как они создавали lock-файлы и можно было воспроизвести среду. А вот проблемы были в том, что каждый инструмент делал свой формат. :(&lt;/p&gt;
&lt;h2 id=&#34;современный-gomod&#34;&gt;Современный go.mod&lt;/h2&gt;
&lt;p&gt;И здесь мы возвращаемся к модулям с которых началась эта статья. В go 1.11 можно было с помощью переменной GO111MODULE=on, а с недавним релизом go 1.14 данное поведение стало по умолчанию. Что нужно сделать для того, чтобы его использовать прекрасно описано в &lt;a href=&#34;https://blog.golang.org/using-go-modules&#34;&gt;The Go Blog&lt;/a&gt; в 4 (!) частях. Здесь бы хотелось сосредоточиться на том, почему это не современная штука.&lt;/p&gt;
&lt;h3 id=&#34;проблема-1-перейти-надо-всем&#34;&gt;Проблема №1. Перейти надо всем&lt;/h3&gt;
&lt;p&gt;Разработчики golang молодцы, что дали 3 минорные версии для того, чтобы авторы библиотек могли перейти на go.mod и судя по тому, что из &lt;a href=&#34;https://github.com/search?q=go.mod&amp;amp;type=Issues&#34;&gt;21000 открытых issues&lt;/a&gt; на гитхабе закрыто 18000 все были нацелены на использование данного инструмента.&lt;/p&gt;
&lt;h3 id=&#34;проблема-2-формат-mod-в-gomod&#34;&gt;Проблема №2. Формат mod в go.mod&lt;/h3&gt;
&lt;p&gt;Долго бомбило после прочтения &lt;a href=&#34;https://www.python.org/dev/peps/pep-0518/&#34;&gt;PEP 518&lt;/a&gt;, что выбрали формат toml. Главное, что его выбрали потому что json слишком вербозный, а yaml имеет слишком сложную спецификацию. В golang решили просто пойти своим путём и сделать формат, который надо парсить. Можете пойти почитать, как он устроен &lt;a href=&#34;https://github.com/golang/go/wiki/Modules#gomod&#34;&gt;тут&lt;/a&gt;. Уверен, что выбор был сделан исходя из принципа упрощения: зачем брать известное, если можно сделать своё простое? Более того, этот файл нельзя трогать руками. Всё взаимодействие с ним идёт через команду &lt;code&gt;go get&lt;/code&gt;, так что частично мы откатились к прежнему решению с GOPATH, просто теперь все пакеты лежат в &lt;code&gt;GOPATH/pkg&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;проблема-3-версионирование&#34;&gt;Проблема №3. Версионирование&lt;/h3&gt;
&lt;p&gt;Все мы оказывались в ситуации, когда автор библиотеки не удосужился указать версии своих зависимостей и занимаешься бинарным поиском совместимых пакетов. В golang решили пойти дальше и сказать, что изменение мажорной версии должно приводить к изменении путей. Тема хорошая, но реализация полагается на рациональность людей, который будут эту мажорную версию менять. А как мы знаем, у этой проблему есть две крайности: Chrome,который имеет 80 версию на данный момент, и PostgresQL, который долгое время жил на 9.x номенклатуре и утверждал, что вторая цифра - это тоже мажорный релиз. Справился ли подход golang с тем, чтобы пакеты всегда собирались при обновлении пакетов? Нет, для примера вы можете взять обновление пакета &lt;a href=&#34;https://github.com/mbobakov/grpc-consul-resolver/issues/15&#34;&gt;grpc-consul-resolver&lt;/a&gt; из-за того, что в минорной версии сменился интерфейс, и это библиотека от google.&lt;/p&gt;
&lt;h3 id=&#34;проблема-4-настройки&#34;&gt;Проблема №4. Настройки&lt;/h3&gt;
&lt;p&gt;Ладно, тут я просто напишу GOSUMDB=off, GOPRIVATE=*example.com* и обязательно GO111MODULE=on.&lt;/p&gt;
&lt;h2 id=&#34;итого&#34;&gt;Итого&lt;/h2&gt;
&lt;p&gt;Немножко грустно от того, что в мире уже десяток популярных языков программирования, а понятной и простой системы по работе с пакетами так до сих пор и изобретают с нуля.&lt;/p&gt;
&lt;p&gt;P.s. а может быть и не с нуля, но осадочек остался.&lt;/p&gt;
&lt;p&gt;P.p.s. кстати, с модулями не отказались от вендоринга, даже комманду сделали для этого &lt;code&gt;go mod vendor&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>
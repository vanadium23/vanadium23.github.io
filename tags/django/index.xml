<?xml-stylesheet type="text/xsl" href="#stylesheet"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><xsl:stylesheet id="stylesheet" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" exclude-result-prefixes="xsl"><xsl:output method="html" doctype-system="about:legacy-compat"/><xsl:template match="/rss"><html lang="ru-ru"><head><meta name="viewport" content="width=device-width, initial-scale=1.0"/><title>django RSS | vanadium23</title><link rel="stylesheet" href="https://vanadium23.me/css/base.min.ede35a5a6f0822c8ed4e62a02aaaead5a369281f08df87a8547512ed5449222f.css" integrity="sha256-7eNaWm8IIsjtTmKgKqrq1aNpKB8I34eoVHUS7VRJIi8="/></head><body><nav class="u-background"><div class="u-wrapper Banner"><a class="Banner-link u-clickable" href="https://vanadium23.me/">
vanadium23</a><ul class="Banner"><li class="Banner-item"><a class="Banner-link u-clickable" href="https://vanadium23.me/openbox/">Notes</a></li class="Banner-item"><li class="Banner-item"><a class="Banner-link u-clickable" href="https://vanadium23.me/about/">About</a></li class="Banner-item"><li class="Banner-item"><a class="Banner-link u-clickable" href="https://vanadium23.me/tags/">Tags</a></li class="Banner-item"><li><a id="themeSwitch" class="theme-switcher"/></li></ul></div></nav><main><div class="u-wrapper"><div class="u-padding"><h2 class="Heading-title"><a class="Heading-link u-clickable" href="https://vanadium23.me/tags/django/index.xml" rel="bookmark">django RSS</a></h2></div></div></main><footer class="Footer"><div class="u-wrapper"><div class="u-padding"><a href="https://github.com/vanadium23"><i class="svg-icon github"/></a><a href="https://www.linkedin.com/in/vanadium23"><i class="svg-icon linkedin"/></a><a href="https://www.twitter.com/vanadium23"><i class="svg-icon twitter"/></a><a href="http://stackoverflow.com/users/4809450/vanadium23"><i class="svg-icon stackoverflow"/></a><a href="https://www.codewars.com/users/vanadium23"><i class="svg-icon codewars"/></a><a href="https://goodreads.com/vanadium23"><i class="svg-icon goodreads"/></a><a href="https://t.me/chernov_sharit"><i class="svg-icon telegram"/></a></div></div></footer></body></html></xsl:template></xsl:stylesheet><channel><title>django on vanadium23</title><link>https://vanadium23.me/tags/django/</link><description>Recent content in django on vanadium23</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Sun, 20 Nov 2016 17:00:00 +0300</lastBuildDate><atom:link href="https://vanadium23.me/tags/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Cook django with aiohttp workers</title><link>https://vanadium23.me/django-gunicorn-aiohttp/</link><pubDate>Sun, 20 Nov 2016 17:00:00 +0300</pubDate><guid>https://vanadium23.me/django-gunicorn-aiohttp/</guid><description>&lt;p>There is some standart stack to run django in production.
For python 2, it is nginx + gunicorn or uwsgi + monkey patching libs, such as gevent or eventlet.
Generally, I prefer gunicorn + eventlet, but when you switch (or start) django project on latest python 3.5, eventlet can do &lt;a href="https://github.com/eventlet/eventlet/issues/313">some bad magic&lt;/a>. And you can switch to a new built-in mechanism, called &lt;em>aiohttp&lt;/em>.
Based on &lt;a href="http://docs.gunicorn.org/en/stable/design.html?highlight=gaiohttp#asyncio-workers">gunicorn docs&lt;/a>, you need simply switch worker to &lt;em>gaiohttp&lt;/em> and that&amp;rsquo;s all.&lt;/p>
&lt;p>Then, something bad happens.
&lt;img src="https://vanadium23.me/images/gaiohttp-memory.png" alt="gaiohttp-memory">&lt;/p>
&lt;p>Answer is very simple: &lt;strike>you write some memoryleaking code&lt;/strike> &lt;em>gaiohttp&lt;/em> ignores max_requests option.
In other words, workers won&amp;rsquo;t be killed after max_requests count. After some search on internet, there is an &lt;a href="http://asvetlov.blogspot.ru/2014/06/asyncio-aiohttp-gunicorn.html">article&lt;/a> from asyncio contributor about copy-n-pasting worker from aiohttp repo to gunicorn.
&lt;a href="http://aiohttp.readthedocs.io/en/stable/deployment.html#start-gunicorn">Aiohttp docs&lt;/a> says that you should use &lt;code>aiohttp.worker.GunicornWebWorker&lt;/code>, but when you switch setting there will be error.&lt;/p>
&lt;pre tabindex="0">&lt;code>[5898] [ERROR] Exception in worker process
Traceback (most recent call last):
File &amp;#34;./gunicorn/arbiter.py&amp;#34;, line 557, in spawn_worker
worker.init_process()
File &amp;#34;./aiohttp/worker.py&amp;#34;, line 37, in init_process
super().init_process()
File &amp;#34;./gunicorn/workers/base.py&amp;#34;, line 132, in init_process
self.run()
File &amp;#34;./aiohttp/worker.py&amp;#34;, line 40, in run
self.loop.run_until_complete(self.wsgi.startup())
AttributeError:
&amp;#39;WSGIHandler&amp;#39; object has no attribute &amp;#39;startup&amp;#39;
&lt;/code>&lt;/pre>&lt;p>So &lt;em>aiohttp.worker.GunicornWebWorker&lt;/em> differs from standart wsgi app for django. Luckily, python community has two packages to overcome these difficulties: &lt;em>aiohttp-wsgi&lt;/em> and &lt;em>aiodjango&lt;/em>, add them to your &lt;em>requirements.txt&lt;/em>.
After this modify your &lt;em>wsgi.py&lt;/em> according to &lt;a href="http://aiodjango.readthedocs.io/en/latest/usage.html#defining-the-application">docs&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>import os
from django.core.wsgi import get_wsgi_application
from aiodjango import get_aio_application
os.environ.setdefault(&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;, &amp;#39;settings&amp;#39;)
# Build WSGI application
# Any WSGI middleware would be added here
application = get_wsgi_application()
# Build aiohttp application
app = get_aio_application(application)
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s all folks.&lt;/p></description></item></channel></rss>
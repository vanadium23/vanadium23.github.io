



<?xml-stylesheet type="text/xsl" href="#stylesheet" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <xsl:stylesheet id="stylesheet" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" exclude-result-prefixes="xsl">
    <xsl:output method="html" doctype-system="about:legacy-compat" />
    <xsl:template match="/rss">
      <html lang="ru-ru">
        <head>
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>book RSS | vanadium23</title>
          <link rel="stylesheet" href="https://vanadium23.me/css/base.min.b6dfa31f93118b56b5ca227e268bbe1c1d592be9ccd7b4664981bca6f0352f99.css" integrity="sha256-tt&#43;jH5MRi1a1yiJ&#43;Jou&#43;HB1ZK&#43;nM17RmSYG8pvA1L5k=" />
        </head>
        <body>
          <nav class="u-background">
    <div class="u-wrapper Banner">
        <a class="Banner-link u-clickable" href="https://vanadium23.me/">
            vanadium23
        </a>
        <ul class="Banner">
        
        <li class="Banner-item">
            <a class="Banner-link u-clickable" href="https://vanadium23.me/about/">About</a>
        </li class="Banner-item">
        
        <li class="Banner-item">
            <a class="Banner-link u-clickable" href="https://vanadium23.me/tags/">Tags</a>
        </li class="Banner-item">
        
        <li>
            <a id="themeSwitch" class="theme-switcher"></a>
        </li>
        </ul>
    </div>
</nav>
          <main>
            <div class="u-wrapper">
              <div class="u-padding">
                <h2 class="Heading-title">
                  
                  <a class="Heading-link u-clickable" href="https://vanadium23.me/tags/book/index.xml" rel="bookmark">book RSS</a>
                  
                </h2>
                
              </div>
            </div>
          </main>
          <footer class="Footer">
  <div class="u-wrapper">
    <div class="u-padding">
        
        <a href="https://github.com/vanadium23"><i class="svg-icon github"></i></a>
        <a href="https://www.linkedin.com/in/vanadium23"><i class="svg-icon linkedin"></i></a>
        <a href="https://www.twitter.com/vanadium23"><i class="svg-icon twitter"></i></a>
        <a href="http://stackoverflow.com/users/4809450/vanadium23"><i class="svg-icon stackoverflow"></i></a>
        <a href="https://www.codewars.com/users/vanadium23"><i class="svg-icon codewars"></i></a>
        <a href="https://goodreads.com/vanadium23"><i class="svg-icon goodreads"></i></a>
        <a href="https://t.me/chernov_sharit"><i class="svg-icon telegram"></i></a>
    </div>
  </div>
</footer>
        </body>
      </html>
    </xsl:template>
  </xsl:stylesheet>
  <channel>
    <title>book on vanadium23</title>
    <link>https://vanadium23.me/tags/book/</link>
    <description>Recent content in book on vanadium23</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Tue, 03 Aug 2021 09:00:00 +0300</lastBuildDate>
    <atom:link href="https://vanadium23.me/tags/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Выдержка из книги &#34;Why Greatness cannot be planned&#34;</title>
      <link>https://vanadium23.me/the-myth-of-objective/</link>
      <pubDate>Tue, 03 Aug 2021 09:00:00 +0300</pubDate>
      <guid>https://vanadium23.me/the-myth-of-objective/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; амбициозные цели являются ложным компасом и вводят нас в заблуждение. Вместо амбициозных целей необходимо двигаться в направлении своей интуиции и коллекционирования промежуточных результатов.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Культура постановки целей повсеместна: начинается это со школьных оценок и заканчивается классическими фразами &amp;ldquo;дом-дерево-сын&amp;rdquo; или построить очередной стартап-единорог. Большинство считает что постановка цели является первым шагом к её достижению. Это правда работает для обозримых и понятных вещей.&lt;/p&gt;
&lt;p&gt;Однако если наши желания лежат в области инноваций или креативности, то они могут завести нас в тупик. В качестве примера можно привести изобретение СВЧ. Как вы знаете микроволновые диапазоны были изобретены для военных радаров. Только когда Percy Spencer заметил, что шоколадка расплавилась рядом с радаром, стало очевидно что микроволны так же могут и разогревать продукты. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Большинство инноваций приходит сбоку, откуда их не ждали.&lt;/p&gt;
&lt;p&gt;В качестве ещё одного примера можно привести игрушку &lt;a href=&#34;https://en.wikipedia.org/wiki/Chinese_finger_trap&#34;&gt;&amp;ldquo;Chinese finger trap&amp;rdquo;&lt;/a&gt;. Если мы поставим перед собой цель выбраться из неё, то начнём тянуть как можно сильнее в разные стороны. Только после нескольких попыток, человек догадывается что для выхода необходимо сомкнуть пальцы как можно ближе друг к другу, что диаметрально противоположно с поставленной целью. Почему пришла мысль сомкнуть пальцы? Как происходит поиск этого решения? В таком простом примере у нас просто нет других вариантов. С другой стороны, сомкнуть пальцы выглядит каким-то &lt;em&gt;новым&lt;/em&gt; подходом к проблеме.&lt;/p&gt;
&lt;p&gt;Давайте теперь представим, что перед нами стоит задача научить робота проходить через двери. Сам робот для упрощения будет состоять только из трёх частей: возможность пройти путь, память о состоянии на конец пути и поиск чего-то нового.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vanadium23.me/images/Pasted%20image%2020210803104633.png&#34; alt=&#34;пути робота&#34;&gt;&lt;/p&gt;
&lt;p&gt;Как видно из картинки, робот может разбиться большим количеством способов, но после бесконечных попыток он находит дверь. Так как это новая ситуация, то робот приобретает знание как проходить через двери. Было ли заложен алгоритм поиска двери в робота? Нет. Почему он тогда его нашёл? Потому, что в природе есть ограничения (стены), а робот мог накапливать знания и пытался искать новизну. Здесь можно вспомнить &lt;a href=&#34;https://en.wikipedia.org/wiki/Infinite_monkey_theorem&#34;&gt;теорему о бесконечных обезъянах&lt;/a&gt;, но новизна - это относительная мера. iPhone в 2006 году выглядит инновацией, в 2021 году - обыденность. Тоже самое можно сказать и про отношения нашего робота со стенками.&lt;/p&gt;
&lt;p&gt;Для построения аналогичного механизма в инновациях авторы книги вводят две концепции: stepping stones и искатель сокровищ/treasure hunter. Первая — аналогия к поиску новых знаний для открытых проблем в виде перемещения по камушкам озера в тумане. Мы не видим, что будет на два шага вперёд и направление должны выбирать только на основе интуиции. Искатель сокровищ — это профессионал в выборе такого пути и рисования карты пройденной местности. Без достаточного количества нарисованной карты, мы не сможем оценить полную картинку. Это является одной из причин, почему если отправить современного гения в прошлое на несколько сотен лет назад, он не изобретёт компьютер. Просто не было исследовано достаточно предварительных вещей или более простым языком не хватает фундамента.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vanadium23.me/images/Pasted%20image%2020210803104557.png&#34; alt=&#34;Rob Gonsalves «Stepping Stones»&#34;&gt;&lt;/p&gt;
&lt;p&gt;Но при осмыслении предложенной модели пришёл к выводу, что оба механизма неотделимы друг от друга. Поэтому в качестве аналогии можно привести классику настольных игр &lt;a href=&#34;https://en.wikipedia.org/wiki/Carcassonne_(board_game)&#34;&gt;&amp;ldquo;Каркассон&amp;rdquo;&lt;/a&gt;. Каждый ход в ней игрок открывает фишку и решает поставить ли своего рабочего для завоевания замка, земли или дороги. В конце игры накопленные очки за завершённые постройки суммируются для определения победителя.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vanadium23.me/images/Pasted%20image%2020210803104029.png&#34; alt=&#34;Rob Gonsalves «Stepping Stones»&#34;&gt;&lt;/p&gt;
&lt;p&gt;Аналогия всегда работает до определённой степени. Жизнь гораздо разнообразнее — мы не знаем, что принесёт следующая открытая фишка, а правила подсчёта очков не существует. Поэтому попробуйте заняться чем-то интересным и уже потом посмотреть куда это приведёт.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;J. Levy, Really useful: the origins of everyday things. Firefly Books Ltd, 2002.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    <item>
      <title>Выдержка из книги &#34;Building microservices&#34;</title>
      <link>https://vanadium23.me/building-microservices/</link>
      <pubDate>Sun, 02 Feb 2020 09:00:00 +0300</pubDate>
      <guid>https://vanadium23.me/building-microservices/</guid>
      <description>&lt;p&gt;Книга разбирает типовой способ разбора монолитов на микросервисы. Ничего супер нового не рассказывает, скорее объединяет все известные практики при написаниии микросервисов. Понравилось разделение по главам и их слабая связь, можно открыть любую и читать рецепты. С другой стороны, все рецепты опять написаны про типичный магазин и разные сложности с обратной совместимостью или миграциями были задвинуты на второй план. Далее краткий пересказ каждой главы.&lt;/p&gt;
&lt;h2 id=&#34;microservices&#34;&gt;Microservices&lt;/h2&gt;
&lt;p&gt;Микросервис - маленький сервис, который делает один бизнес домен и делает его хорошо.
При этом команда должна быть максимально автономной. Их делают чтобы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;выбрать наиболее подходящую технологию&lt;/li&gt;
&lt;li&gt;независимо разрабатывать/деплоить&lt;/li&gt;
&lt;li&gt;отваливась только часть функциональность&lt;/li&gt;
&lt;li&gt;независимо маштабировать&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В чем разница с SOA?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SOA была хорошей идеей, но она не прижилась. (&lt;strong&gt;Примечание: спорное утверждение&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Другие способы распила:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Шаренные либы - путь в никуда, не можем менять технологию&lt;/li&gt;
&lt;li&gt;Модули - отличие от либ, что можно делать hot-reloads, e.g.: Erlang modules. Но такой же путь вникуда.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-evolutionary-architect&#34;&gt;The Evolutionary Architect&lt;/h2&gt;
&lt;p&gt;Архитектура происходит из стратегии. Если у вас нет стратегии развития, то и хорошей архитектуры не построить.
Чтобы сделать хорошую архитектуру на основе стратегии необходимо:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Предоставить принципы, с помощью которых идёт выбор технических решений&lt;/li&gt;
&lt;li&gt;Сделать набор практик на основе этих принципов&lt;/li&gt;
&lt;li&gt;Создать команду &amp;ldquo;управления&amp;rdquo;, которая следит что выбранные практики и принципы применяются в системах.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;При этом нужно не забывать, что мы хотим автономности и команды могут расширять практики, если требуется.
Если слишком много команд не используют практики или принципы - их необходимо пересмотреть.&lt;/p&gt;
&lt;h2 id=&#34;how-to-model-service&#34;&gt;How to model service&lt;/h2&gt;
&lt;p&gt;В качестве примера предложили MusicCorp - онлайн-магазин по продаже музыкальных альбомов.
Сервисы должны быть слабо связаными (loose coupling) между собой, высоко сцепленными (high cohesion) внутри себя.
Магазин разбили на две части: склад и финансы.
Склад поделили на три микросервиса: заказы, логистика, инвентарь.
Дальше ситуации:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Финансы лезут в базу инвентаря - всё плохо, протекло&lt;/li&gt;
&lt;li&gt;Финансы получают сообщения из склада - всё плохо, одна и та же модель значит разное для сервисов.&lt;/li&gt;
&lt;li&gt;Финансы идут в API микросервиса инвентаря - всё плохо, склад потерял свои границы.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Предложенный вариант строить фасад перед складом, тогда будет проще тестить, проще следить что во воне и т.д.&lt;/p&gt;
&lt;h2 id=&#34;integration&#34;&gt;Integration&lt;/h2&gt;
&lt;p&gt;Как можно между собой микросервисы интегрировать:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Шаренная база данных - никогда так не делайте, изменения одного микросервиса сломают остальные.&lt;/li&gt;
&lt;li&gt;RPC - сервис посылает запрос на выполнение команды. Провоцирует каскадные падения :(&lt;/li&gt;
&lt;li&gt;Event-based - сервис создаёт события в шины, остальные сервисы подписываются и делают нужное. Низкая связность, но сложно тестировать.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Как жить фронту при этом?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Один фронт используют несколько API при построение страницы&lt;/li&gt;
&lt;li&gt;Фронты пилят виджеты, которые могут встраиваться и каждый использует своё API&lt;/li&gt;
&lt;li&gt;Ставим API gateway для всех&lt;/li&gt;
&lt;li&gt;Ставим API gateway под каждого консьюмера - BFF&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Рекомендую прочитать эту главу целиком, если доберётесь до книжки.&lt;/p&gt;
&lt;h2 id=&#34;splitting-the-monolith&#34;&gt;Splitting the Monolith&lt;/h2&gt;
&lt;p&gt;Находим куски кода, которые могут работать максимально независимо (seams, см. Working with legacy code).
Для начала мы можем разнести их в разную схему базы данных, но живут они в монолите. Каждый модуль может ходить в свою схему.
MusicCorp разбили на customers, finance, inventory. Плюс остался reporting, который может ходить везде.&lt;/p&gt;
&lt;p&gt;Дальше начинаются пляски с reporting, варианты:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Репортинг использует реплику базы - плохой путь, потому что шаренные модели&lt;/li&gt;
&lt;li&gt;Кастомеры делают дамп в своём формате для репортинга - вполне норм, но могут быть не реалтайм данные.&lt;/li&gt;
&lt;li&gt;Кастомеры делают API, которая делает дамп ondemand - лучший вариант, при этом много говорилось как его праивльно запроектировать.&lt;/li&gt;
&lt;li&gt;Последний вариант, кастомеры пишут все изменения в шину и есть сервис который аггрерует это для репортинга.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;
&lt;p&gt;CI/CD, билды, образы, контейнеры. Скорее всего и так всё знаете.&lt;/p&gt;
&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Пирамида тестирования - юнитов как можно больше, UI как можно меньше.
Владельцы микросервисов должны писать юнит и сервис тесты с моками/стаббами сервисов, которые он использует.
End-to-end тесты должны писаться отдельно, запускаться отдельно и тестировать все микросервисы вживую.
Если тесты часто падают либо чиним, либо выкидываем.&lt;/p&gt;
&lt;p&gt;Со стабами можно очень сильно прогореть, поэтому лучше инвертировать зависимость, чтобы клиенты писали стабы для сервера.
Тогда будут готовые сервис-тесты для сервера, которые отдаёт данные. Подробнее смотри &lt;a href=&#34;https://docs.pact.io/&#34;&gt;PACT&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Сначала собирайте низкоуровневые метрики: request rate, response timing, потом переходите на уровень приложения&lt;/li&gt;
&lt;li&gt;Трекайте что нижележащие сервисы живы, используйте circuit breakers.&lt;/li&gt;
&lt;li&gt;Стандартизируйте как вы собираете метрики.&lt;/li&gt;
&lt;li&gt;Все должны логировать в стандартное место. Так как их потом надо аггрегировать, то ещё и в стандартном формате&lt;/li&gt;
&lt;li&gt;Мониторьте всё что ниже приложения: OS, CPU, MEM.&lt;/li&gt;
&lt;li&gt;Делайте дашборды и call-to-action алерты.&lt;/li&gt;
&lt;li&gt;Прокидывайте ID между сервисами.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;security&#34;&gt;Security&lt;/h2&gt;
&lt;p&gt;Api ключи
Клиентские сертификаты
Разделение по сеткам
Для пользователей SSO&lt;/p&gt;
&lt;h2 id=&#34;conways-law&#34;&gt;Conway&amp;rsquo;s law&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Trivia&lt;/strong&gt;: Windows Vista получилось такой какой есть, потому что там были feature based команды. Не делайти команды по фичам, делайте по доменам.
Ничего не будет работать, если команды будут друг на друга завязаны, или кто-то с кем-то не будет договариваться.
За один сервис - отвечает одна команда.&lt;/p&gt;
&lt;h2 id=&#34;microservices-at-scale&#34;&gt;Microservices at Scale&lt;/h2&gt;
&lt;p&gt;Нужно быть готовым к тому, что всё может упасть, поэтому CAP теорема нам в помощь и выбирайте два из трёх:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Response time/latency&lt;/li&gt;
&lt;li&gt;Availibility&lt;/li&gt;
&lt;li&gt;Durability of data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Предусматривайте graceful degradation.
Лучше отвалиться, чем тормозить и старайтесь знать ограничения сервисов.
Timeout&amp;rsquo;ы, пуллинг, идемподентность - наше всё.&lt;/p&gt;
&lt;p&gt;Не забудьте делать документацию по API!&lt;/p&gt;
&lt;h2 id=&#34;итого&#34;&gt;Итого&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Моделируйте микросервисы вокруг бизнес-концепта&lt;/li&gt;
&lt;li&gt;Пропогандируйте культуру автоматизации&lt;/li&gt;
&lt;li&gt;Скрывайте сложность внутри: схему базы, язык, фреймворк, всё что можете, - для этого и нужно API&lt;/li&gt;
&lt;li&gt;Децентрилизируйте: предпочитайте тупые миддлвари и умные ручки&lt;/li&gt;
&lt;li&gt;Независимые релизы&lt;/li&gt;
&lt;li&gt;Назависимые падения&lt;/li&gt;
&lt;li&gt;Прозрачность: метрики, логи, вот это вот всё.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Выдержка из книги &#34;Просто космос&#34;</title>
      <link>https://vanadium23.me/just-space/</link>
      <pubDate>Sun, 26 Jan 2020 16:00:00 +0300</pubDate>
      <guid>https://vanadium23.me/just-space/</guid>
      <description>&lt;p&gt;&amp;ldquo;Манн, Иванов и Фербер&amp;rdquo; - хитрое издательство. К каждой покупке они не только прикладывают вкладыш с описаниями последних новинок, но и вставляют в начало по пять книг, которые дополняют только что полученную книжку. Так и произошло с книгой &amp;ldquo;Просто космос&amp;rdquo;, которая была рекомендована в &amp;ldquo;Путь джедая&amp;rdquo; Дорофеева. Более того, в одной из сносок Дорофеев уже сам напомнил об этой книге.
Книга хороша подходит для новичков, кто хочет систематизировать свою жизнь, но ничего нового по сравнению с &lt;a href=&#34;https://vanadium23.me/jedi-book-experiments/&#34;&gt;&amp;ldquo;Джедайскими техниками&amp;rdquo;&lt;/a&gt; вы там не найдёте. Вместо покупки книги, лучше купить ежедневник от автора Катерины Ленгольд, поскольку больше подтолкнёт к применению свежих навыков.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Итак, что нам пишут в книге:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ставим цели на спринт длинной в 9 недель.
&lt;ol&gt;
&lt;li&gt;9 недель выбранны, потому что это не слишком мало, но и не слишком много.&lt;/li&gt;
&lt;li&gt;Достаточно детальная цель: не &amp;ldquo;заняться здоровьем&amp;rdquo;, а &amp;ldquo;обойти 6 врачей и сдать показатели крови&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Выбираем себе морковки, то есть мотивируем себя ценным вознаграждением.
&lt;ol&gt;
&lt;li&gt;Тут предлагается упражнение по тому, чтобы их придумать себе в большом количестве.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Планируем день и неделю
&lt;ol&gt;
&lt;li&gt;Вместо ToDo листов разбиваем день на 4 блока по 4 часа: утро, день до обеда, после обеда и вечера.&lt;/li&gt;
&lt;li&gt;Разбиваем задачи на помидорки и понимаем, что времени не так много. Важные дела стараемся делать в первой половине дня.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Учимся говорить &amp;ldquo;нет&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Аналогично стараемся более крупными мазками распланировать неделю&lt;/li&gt;
&lt;li&gt;В конце недели идёт обязательное отслеживание прогресса по пункту 1.1&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Составьте список полезной прокрастинации
&lt;ol&gt;
&lt;li&gt;Одна из немногих полезных глав в книге, не поленился поискать чужие аналогичные &lt;a href=&#34;https://www.reddit.com/r/productivity/comments/eh5o6j/my_procrastination_cheatsheet/&#34;&gt;списки&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Формируйте полезные привычки и избавляйтесь от вредных&lt;/li&gt;
&lt;li&gt;Хорошо спите и не забывайте отдыхать&lt;/li&gt;
&lt;li&gt;Хорошо и правильно питайтесь&lt;/li&gt;
&lt;li&gt;Не забывайте про свои эмоции&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;На этом всё.
Общая оценка: круто, что всё по делу, но где же ты была раньше.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Выдержка из книги &#34;Digital minimalism&#34;</title>
      <link>https://vanadium23.me/digital-minimalism/</link>
      <pubDate>Sun, 12 Jan 2020 16:00:00 +0300</pubDate>
      <guid>https://vanadium23.me/digital-minimalism/</guid>
      <description>&lt;p&gt;В декабре прочитал книжку &amp;ldquo;Цифровой минимализм&amp;rdquo;. Автор чем-то напоминает луддитов и пытается бороться с &lt;strike&gt;ветряными мельницами&lt;/strike&gt; смартфонами.
У себя не чувствую проблему с тем, что телефон отнимает слишком много времени. Социальные сети, на который идёт упор в книге, давно выброшены.
Остался только Twitter, но им стараюсь пользоваться только на компьютере через tweetdeck. С другой стороны, книга была высоко оценена в голосование goodreads.com за 2019 год: пятое место в жанре нон-фикшн.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vanadium23.me/images/digital-wellbeing.jpg&#34; alt=&#34;Digital wellbeing на андроид телефонах&#34;&gt;&lt;/p&gt;
&lt;p&gt;Так как книга про минимализм, сделал минималистичную выдержку:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Экономика внимания - бич 21 века, придуманный в конце 19 газетой New York Times.&lt;/li&gt;
&lt;li&gt;Цифровой минимализм - это не борьба со смартфоном, а использование современных технологий только себе на пользу.
&lt;ul&gt;
&lt;li&gt;Принцип №1: цифровой мусор затратен.
&lt;ul&gt;
&lt;li&gt;Аргумент - &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%A2%D0%BE%D1%80%D0%BE,_%D0%93%D0%B5%D0%BD%D1%80%D0%B8&#34;&gt;экономика Торо&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Принцип №2: оптимизация важна.
&lt;ul&gt;
&lt;li&gt;Аргумент - &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%BA%D0%BE%D0%BD_%D1%83%D0%B1%D1%8B%D0%B2%D0%B0%D1%8E%D1%89%D0%B5%D0%B9_%D0%B4%D0%BE%D1%85%D0%BE%D0%B4%D0%BD%D0%BE%D1%81%D1%82%D0%B8&#34;&gt;закон убывающей отдачи&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Принцип №3: преднамеренность приносит удовольствие.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Цифровая уборка
&lt;ul&gt;
&lt;li&gt;Составить свод чётких правил, чем можно пользоваться и сколько во время цифрового шабата.&lt;/li&gt;
&lt;li&gt;Отказ от смартфона на 30 дней или хотя бы от части приложений, которые приносят наибольший вред.&lt;/li&gt;
&lt;li&gt;Найти себе увлечение для образовавшегося свободного времени.&lt;/li&gt;
&lt;li&gt;Вернуться к использованию телефона, но начать с нуля: обдумывая каждое приложение.
&lt;ul&gt;
&lt;li&gt;Отвечать вашим главным ценностям.&lt;/li&gt;
&lt;li&gt;Делать это наилучшим образом.&lt;/li&gt;
&lt;li&gt;Быть инструментом для достижения целей.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Люди стало мало уделять внимания к уединению с самим собой из-за борьбы со скукой.
&lt;ul&gt;
&lt;li&gt;Аргумент - много полезных вещей рождалось именно в уединение.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Практика: использовать мессенджеры только в определенное время или для определенных целей.&lt;/li&gt;
&lt;li&gt;Чем заменить досуг?
&lt;ul&gt;
&lt;li&gt;Прогулки - без музыки и подкастов, потому что это тоже потребление.&lt;/li&gt;
&lt;li&gt;Писать письма самому себе в будущем.&lt;/li&gt;
&lt;li&gt;Делать что-то руками, так как ремесло несёт удовлетворение.&lt;/li&gt;
&lt;li&gt;Социализация в жизни: клубы или встречи с друзьями.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Кроме планирования работы, люди забывают планировать отдых.
&lt;ul&gt;
&lt;li&gt;Квартальный план - большой отпуск с поездками.&lt;/li&gt;
&lt;li&gt;Недельный план - досуг на выходные.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Эксперименты на основе книги &#34;Джедайские техники&#34;</title>
      <link>https://vanadium23.me/jedi-book-experiments/</link>
      <pubDate>Sun, 31 Mar 2019 15:00:00 +0300</pubDate>
      <guid>https://vanadium23.me/jedi-book-experiments/</guid>
      <description>&lt;p&gt;Последние два месяца внедряю в жизнь &amp;ldquo;Джедайские техники&amp;rdquo;. Не скажу что успешно, из-за чего делюсь заметками, где пошло не по плану.
Если хотите краткий пересказ книги, то посмотрите &lt;a href=&#34;https://www.mindmeister.com/426089298/&#34;&gt;мыслекарту автора&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Для начала, схема техник из книги для понимания контекста:
&lt;img src=&#34;https://vanadium23.me/images/thinking-economy.png&#34; alt=&#34;Схема экономии мыслетоплива&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;обработка-входящих-aka-инбоксы&#34;&gt;Обработка входящих (a.k.a инбоксы)&lt;/h2&gt;
&lt;h3 id=&#34;предлагается&#34;&gt;Предлагается:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Не использовать фильтры почты, если это не справочная информация. Если используете фильтры, то отмечайте письма как прочитанные, чтобы не отвлекаться лишний раз.&lt;/li&gt;
&lt;li&gt;Не использовать входящую почту, как ещё один список задач.&lt;/li&gt;
&lt;li&gt;Отключить уведомления, кроме особо важных.&lt;/li&gt;
&lt;li&gt;Добавить в список дел регулярную задачу по обработке входящих.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;работает&#34;&gt;Работает:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Собирать почту скопом.&lt;/li&gt;
&lt;li&gt;Отключение уведомлений.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;не-работает&#34;&gt;Не работает:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Не придумал, что делать со слаком: dnd не меняет счётчик сообщений, а ещё люди приучились к мгновенному ответу в нём.&lt;/li&gt;
&lt;li&gt;Фильтры в почте искоренить не удалось. А если проставлять прочитанное, то копиться слишком много и не хочется уже разбирать.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;список-задач&#34;&gt;Список задач&lt;/h2&gt;
&lt;h3 id=&#34;предлагается-1&#34;&gt;Предлагается:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Формулировать задачи так, чтобы понял любой человек.&lt;/li&gt;
&lt;li&gt;Формулировка должна содержать детальный следующий шаг.&lt;/li&gt;
&lt;li&gt;Запрещено использовать слова &amp;ldquo;придумать&amp;rdquo;, &amp;ldquo;подумать&amp;rdquo;, &amp;ldquo;понять&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Иметь понятную и простую систему приоритезации, какую задачу брать следующей.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;желательно&lt;/em&gt; Вести личный и рабочие дела в одном списке задач, чтобы понимать баланс между ними.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;работает-1&#34;&gt;Работает:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Да, и ещё раз да на запрет слов &amp;ldquo;подумать&amp;rdquo; и &amp;ldquo;придумать&amp;rdquo;. Сразу работает голова, какой же первый шаг для решения задачи.&lt;/li&gt;
&lt;li&gt;Формулировка задач нарабатывается с трудом. Но когда входишь во вкус становится приятно потратить 15-30 секунд и записать полностью мысль, чтобы не думать потом несколько раз.&lt;/li&gt;
&lt;li&gt;Начал использовать приоритеты в Todoist.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;не-работает-1&#34;&gt;Не работает:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Непонятно, где держать приблизительный план по проекту. :(&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;_лирическое-отступление_&#34;&gt;&lt;em&gt;Лирическое отступление&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Важно уточнить, что в книге провели границу между следующими вещами:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Список задач - последовательность точных действий.&lt;/li&gt;
&lt;li&gt;Проект - конечная во времени цель, которую известно  &lt;em&gt;как примерно&lt;/em&gt; достичь.&lt;/li&gt;
&lt;li&gt;Образ жизни - бесконечная во времени цель, например: здоровье, язык, спорт.&lt;/li&gt;
&lt;li&gt;Справочная информация - ссылочки, мыслекарты, заметки и прочее.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;У меня была смесь из всех пунктов в Todoist, из-за чего копились задачи и вызывало тревожность.&lt;/p&gt;
&lt;h2 id=&#34;обзор-системы&#34;&gt;Обзор системы&lt;/h2&gt;
&lt;h3 id=&#34;предлагается-2&#34;&gt;Предлагается:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Делать ежедневный обзор по выполненным задачам и планировать завтра.&lt;/li&gt;
&lt;li&gt;Делать еженедельный обзор с просмотром движения по проектам и планировать следующие шаги.&lt;/li&gt;
&lt;li&gt;Спонтанные обзоры для выявления узких частей.&lt;/li&gt;
&lt;li&gt;Для идей без плана использовать схему по аналогии с вещами: шкаф-балкон-дача.&lt;/li&gt;
&lt;li&gt;Брать меньше задач, чтобы потом либо отдыхать, либо что-то брать из следующих на неделю.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;работает-2&#34;&gt;Работает:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Проблем не обнаружено. :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;случайные-факты&#34;&gt;Случайные факты&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Удалось разгрести старьё, которое лежали мёртвым грузом.&lt;/li&gt;
&lt;li&gt;Уровень стресса и тревожности стал меньше, потому что вот они задачи - лежат в списочке.&lt;/li&gt;
&lt;li&gt;Стало проще выкидывать задачи, потому что это не задача, а это не важно.&lt;/li&gt;
&lt;li&gt;Да, для этого требуется щепетильность, усидчивость &lt;strike&gt;и задротство&lt;/strike&gt;.&lt;/li&gt;
&lt;li&gt;Да, всем этим можно и не заниматься. :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Вот вам графичек по количеству завершённых задач в Todoist за 3 последних года:
&lt;img src=&#34;https://vanadium23.me/images/tasks-count-by-month-q1-2019.png&#34; alt=&#34;Количество тасочек по месяцам&#34;&gt;
Надеюсь, что тенденцию последних двух лет с помощью новых техник удастся побороть.&lt;/p&gt;
&lt;p&gt;P.S. прикрутил тут кнопочки для того, чтобы пошарить статью, поэтому если понравилось поделитесь статьёй. :)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Выдержка из книги &#34;Architecturing for Scale&#34;</title>
      <link>https://vanadium23.me/architecting-for-scale/</link>
      <pubDate>Fri, 15 Mar 2019 17:00:00 +0300</pubDate>
      <guid>https://vanadium23.me/architecting-for-scale/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/38096544&#34;&gt;Книга&lt;/a&gt; мне понравилась своей лаконичностью так, что советую прочитать чеклист на основе её и сделать вывод хотите ли вы читать её полностью. Весь чек лист разбит на основе оглавления из книги, поэтому можете читать выборочно.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Здесь и далее следует понимать, что все примеры старались проводиться либо из опыта, либо на основе типичного магазина по продаже футболок&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;доступность&#34;&gt;Доступность&lt;/h2&gt;
&lt;h3 id=&#34;в-чем-разница-между-надежностью-и-доступностью&#34;&gt;В чем разница между надежностью и доступностью?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Надежность - способность системы выполнять требуемые действия, не допуская ошибок.&lt;/li&gt;
&lt;li&gt;Доступность - готовность системы к работе при необходимости выполнить требуемые действия.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;как-улучшить-доступность&#34;&gt;Как улучшить доступность?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Учитывайте возможные отказы&lt;/li&gt;
&lt;li&gt;Всегда помните о масштабировании (прим. от меня и ограничениях)&lt;/li&gt;
&lt;li&gt;Смягчайте последствия рисков (понравился пример что если не работает поиск на сайте футболок, выдавайте временно топ предложения)&lt;/li&gt;
&lt;li&gt;Контролируйте доступность (== мониторинг)&lt;/li&gt;
&lt;li&gt;Disaster recovery policy (прим. от меня старайтесь строить self-recovering processes в системах)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;какая-доступность-является-нормальная&#34;&gt;Какая доступность является нормальная?&lt;/h3&gt;
&lt;p&gt;Определите сами на основе таблицы:
99%     - 432 минуты даунтайма в месяц
99,9%   - 43 минуты
99,99%  - 4 минуты
99,999% - 26 секунд&lt;/p&gt;
&lt;h2 id=&#34;управление-рисками&#34;&gt;Управление рисками&lt;/h2&gt;
&lt;h3 id=&#34;принцип-управления-рисками&#34;&gt;Принцип управления рисками&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Составить матрицу рисков (&lt;a href=&#34;https://www.architectingforscale.com/files/Risk%20Matrix%20Template.xlsx&#34;&gt;шаблон&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Важно понимать, что у риска есть вероятность и критичность, для этого примеры:
&lt;ul&gt;
&lt;li&gt;Список топ-10 футболок: низкая вероятность и низкая критичность.&lt;/li&gt;
&lt;li&gt;База данных с заказами: низкая вероятность и высокая критичность.&lt;/li&gt;
&lt;li&gt;Загрузка сторонних шрифтов: высокая вероятность и низкая критичность.&lt;/li&gt;
&lt;li&gt;Фотографии футболок: высокая вероятность и высокая критичность.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ликвидация самых опасных рисков.&lt;/li&gt;
&lt;li&gt;Смягчение последствий рисков, которые нельзя исключить.&lt;/li&gt;
&lt;li&gt;Итерируй матрицу рисков или см п.1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Дальше в главе написано примеры конкретных действий по каждому из пунктов.
Из интересного забавным показалось, что можем сделать запас на 6 серверов приложения, но они все в одной стойке/питании и на самом деле это не резервирование. (Привет, Selectel)&lt;/p&gt;
&lt;h2 id=&#34;сервисы&#34;&gt;Сервисы&lt;/h2&gt;
&lt;h3 id=&#34;что-такое-сервис&#34;&gt;Что такое сервис&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Собственная кодовая база&lt;/li&gt;
&lt;li&gt;Управлять собственными данными&lt;/li&gt;
&lt;li&gt;Предоставлять возможности другим сервисам&lt;/li&gt;
&lt;li&gt;Пользоваться возможностями других сервисов&lt;/li&gt;
&lt;li&gt;Иметь единственного владельца-команду.
&lt;ul&gt;
&lt;li&gt;В книге уточняется что одна команда может владеть несколькими сервисами, но не наоборот. (P.s. не согласен полностью)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;как-делить&#34;&gt;Как делить&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Разделение по бизнес-требованиям (legal, security)&lt;/li&gt;
&lt;li&gt;Разделение по зонам ответственности (management)&lt;/li&gt;
&lt;li&gt;Разделение по роду данных (domain)&lt;/li&gt;
&lt;li&gt;Разделение возможностей или информации (reusable apps)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;сложности&#34;&gt;Сложности&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Нет общей картины&lt;/li&gt;
&lt;li&gt;Благоприятная среда для сбоев и ошибок&lt;/li&gt;
&lt;li&gt;Сложно внести изменения&lt;/li&gt;
&lt;li&gt;Возрастает количество зависимостей&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Была отдельная большая глава про обработку ошибок от сервисов и постепенной деградации.&lt;/p&gt;
&lt;h2 id=&#34;масштабирование-сервисов&#34;&gt;Масштабирование сервисов&lt;/h2&gt;
&lt;h3 id=&#34;запас-на-две-ошибки&#34;&gt;Запас на две ошибки&lt;/h3&gt;
&lt;p&gt;Правило лётчиков в том, что если ты не можешь сделать манёвр, то у тебя должен быть запас высоты на две ошибки.
Очень клёвое правило и дальше были простые вычисления для примера:
Есть сервис на 300 rps, сколько нужно узлов для 1000 rps?
Очевидный ответ - 4 (1000/300 ~ 3.33, ближайшее целое 4), но в этой ситуации при выходе из строя ноды каждая получает 333 rps и это вызовет каскадный отказ. При 5 узлах мы начинаем работать когда вышибает одну ноду, но если идёт деплой и вышибло одну ноду, то снова скатываемся в предыдущую ситуацию, поэтому идеально иметь запас на две ошибки.&lt;/p&gt;
&lt;h3 id=&#34;домашка&#34;&gt;Домашка&lt;/h3&gt;
&lt;p&gt;Сколько нужно узлов для обработки 10000 rps, если одна нода обрабатывает 300 rps?
Если у нас два датацентра и нам необходимо обеспечить отказ на уровне датацентра?
А если у нас 6 дата центров? :)&lt;/p&gt;
&lt;h3 id=&#34;владение-сервисами&#34;&gt;Владение сервисами&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Все сервисы закреплены за командами разработки&lt;/li&gt;
&lt;li&gt;Ни один сервис не закреплен за несколькими командами&lt;/li&gt;
&lt;li&gt;Команда может отвечать за несколько сервисов&lt;/li&gt;
&lt;li&gt;На командах полный цикл: от архитектуры до мониторинга и решения проблем&lt;/li&gt;
&lt;li&gt;Между сервисами есть четкие границы и документированное API&lt;/li&gt;
&lt;li&gt;Между сервисами установлено SLA, о нарушениях которых оповещается команда-владелец&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;классы-сервисов&#34;&gt;Классы сервисов&lt;/h3&gt;
&lt;p&gt;Класс сервиса - это метка присвоенная, сервису которая означает насколько важен данный сервис для функционирования бизнеса.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Класс 1 - тяжелые последствия, пример: сервис обработки заказов&lt;/li&gt;
&lt;li&gt;Класс 2 - неприятное взаимодействие с сервисом для клиента, пример: сервис поиска&lt;/li&gt;
&lt;li&gt;Класс 3 - незаметное или почти незаметное взаимодействие, пример: сервис рекомендаций&lt;/li&gt;
&lt;li&gt;Класс 4 - никакого негативного влияния на клиентов, пример: сервис генерации отчётов&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;использование-классов-сервисов&#34;&gt;Использование классов сервисов&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ожидания - какая у сервиса должна быть надёжность и доступность?&lt;/li&gt;
&lt;li&gt;Реагирование - насколько быстро надо реагировать на проблему в сервисе?&lt;/li&gt;
&lt;li&gt;Зависимости - какие классы у сервисов от которых зависите? Как мы должны обрабатывать отказы: деградировать или умирать?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sla&#34;&gt;SLA&lt;/h3&gt;
&lt;p&gt;Почему SLA важны и особенно внутренние?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Создание доверия&lt;/li&gt;
&lt;li&gt;Упрощение диагностики проблем&lt;/li&gt;
&lt;li&gt;Измерение производительности&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Как ставить SLA?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SLA должны быть релевантны потребителям иначе они не SLA&lt;/li&gt;
&lt;li&gt;Желательно, иметь как можно меньше метрик&lt;/li&gt;
&lt;li&gt;Желательно, иметь одни SLA на всех потребителей&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Примеры SLA про магазин высокоуровнего:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Доступность - &amp;ldquo;наш магазин доступен не менее чем 99,4% времени&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Время загрузки - &amp;ldquo;страницы открываются менее чем за 4 с в 99% случаях&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Продукты - &amp;ldquo;как минимум 80% наших товаров в каталоге находится на складе&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;облачные-сервисы&#34;&gt;Облачные сервисы&lt;/h2&gt;
&lt;p&gt;Там было про AWS, Lambda и прочее. Похоже на маркетинговый булшит, ничего полезного.&lt;/p&gt;
&lt;h2 id=&#34;вопросы-к-сервисам-на-основе-предложенной-книги&#34;&gt;Вопросы к сервисам на основе предложенной книги&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Есть ли у вас матрица рисков?&lt;/li&gt;
&lt;li&gt;Есть ли SLA для сервисов?&lt;/li&gt;
&lt;li&gt;Есть ли несколько команд, которые владеют одним сервисом?&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
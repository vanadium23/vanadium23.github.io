<?xml-stylesheet type="text/xsl" href="#stylesheet"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><xsl:stylesheet id="stylesheet" version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" exclude-result-prefixes="xsl"><xsl:output method="html" doctype-system="about:legacy-compat"/><xsl:template match="/rss"><html lang="ru-ru"><head><meta name="viewport" content="width=device-width, initial-scale=1.0"/><title>python RSS | vanadium23</title><link rel="stylesheet" href="https://vanadium23.me/css/base.min.ede35a5a6f0822c8ed4e62a02aaaead5a369281f08df87a8547512ed5449222f.css" integrity="sha256-7eNaWm8IIsjtTmKgKqrq1aNpKB8I34eoVHUS7VRJIi8="/></head><body><nav class="u-background"><div class="u-wrapper Banner"><a class="Banner-link u-clickable" href="https://vanadium23.me/">
vanadium23</a><ul class="Banner"><li class="Banner-item"><a class="Banner-link u-clickable" href="https://vanadium23.me/openbox/">Notes</a></li class="Banner-item"><li class="Banner-item"><a class="Banner-link u-clickable" href="https://vanadium23.me/about/">About</a></li class="Banner-item"><li class="Banner-item"><a class="Banner-link u-clickable" href="https://vanadium23.me/tags/">Tags</a></li class="Banner-item"><li><a id="themeSwitch" class="theme-switcher"/></li></ul></div></nav><main><div class="u-wrapper"><div class="u-padding"><h2 class="Heading-title"><a class="Heading-link u-clickable" href="https://vanadium23.me/tags/python/index.xml" rel="bookmark">python RSS</a></h2></div></div></main><footer class="Footer"><div class="u-wrapper"><div class="u-padding"><a href="https://github.com/vanadium23"><i class="svg-icon github"/></a><a href="https://www.linkedin.com/in/vanadium23"><i class="svg-icon linkedin"/></a><a href="https://www.twitter.com/vanadium23"><i class="svg-icon twitter"/></a><a href="http://stackoverflow.com/users/4809450/vanadium23"><i class="svg-icon stackoverflow"/></a><a href="https://www.codewars.com/users/vanadium23"><i class="svg-icon codewars"/></a><a href="https://goodreads.com/vanadium23"><i class="svg-icon goodreads"/></a><a href="https://t.me/chernov_sharit"><i class="svg-icon telegram"/></a></div></div></footer></body></html></xsl:template></xsl:stylesheet><channel><title>python on vanadium23</title><link>https://vanadium23.me/tags/python/</link><description>Recent content in python on vanadium23</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Fri, 15 Dec 2017 17:00:00 +0300</lastBuildDate><atom:link href="https://vanadium23.me/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>PipEnv, Pipfile, pip... what?!</title><link>https://vanadium23.me/pipenv-pipfile-pip-what/</link><pubDate>Fri, 15 Dec 2017 17:00:00 +0300</pubDate><guid>https://vanadium23.me/pipenv-pipfile-pip-what/</guid><description>&lt;p>My presentation about PipEnv from &lt;a href="http://www.moscowpython.ru/meetup/50/">MoscowPython Meetup #50&lt;/a> @ Rambler HQ.&lt;/p>
&lt;p>Video is in russian:&lt;/p>
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/2N0phx7WTEI" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen>&lt;/iframe>
&lt;p>And slides in english:&lt;/p>
&lt;script async class="speakerdeck-embed" data-id="a52512c5af6c43a09cba15f23737e449" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js">&lt;/script></description></item><item><title>The Ajax, The REST and The GraphQL</title><link>https://vanadium23.me/ajax-rest-graphql/</link><pubDate>Fri, 18 Aug 2017 17:00:00 +0300</pubDate><guid>https://vanadium23.me/ajax-rest-graphql/</guid><description>&lt;p>My presentation about GraphQL from MoscowPython Meetup #47 @ Mail.Ru HQ.&lt;/p>
&lt;p>Video is in russian:&lt;/p>
&lt;iframe width="640" height="360" src="https://www.youtube.com/embed/9JqtlPO78y0" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;p>And slides in english:&lt;/p>
&lt;script async class="speakerdeck-embed" data-id="3022a498ddc344b4933b4b955dd7c660" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js">&lt;/script></description></item><item><title>Funny notes on migration to python3</title><link>https://vanadium23.me/funny-notes-on-py3k-migration/</link><pubDate>Fri, 09 Dec 2016 17:00:00 +0300</pubDate><guid>https://vanadium23.me/funny-notes-on-py3k-migration/</guid><description>&lt;p>Python3 is a great pain in python community. It was released on Dec 3, 2008 and brings major breaking changes and also new interpreter was slower, than python2 realization. After long way and five releases, in 2016, it&amp;rsquo;s obvious to start on python 3.5: type hinting, asyncio, same perfomance and gets better in coming &lt;a href="https://docs.python.org/3.6/whatsnew/3.6.html">python 3.6&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Warning&lt;/strong>: this is not an article about how to migrate to python3, but more about how to catch errors before deploy to prod.
For python3 migrations, see something like &lt;a href="https://www.toptal.com/python/python-3-is-it-worth-the-switch">this&lt;/a> or &lt;a href="http://python3porting.com/strategies.html">this&lt;/a>.
Always remember simple thing: more unit &amp;amp; integrations tests you have =&amp;gt; earlier you detect bugs.&lt;/p>
&lt;p>Contents:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#py3k-division">integer division&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-comparations">unorderable types&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-except">except Exception&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-byteswarning">bytes comparison&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-ujson">special thanks to ujson&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-lxml">lxml trap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-redispy">changes in work with redis-py&lt;/a>&lt;/li>
&lt;li>&lt;a href="#py3k-django">Note: how to make smaller diff between py2 and py3 version on django&lt;/a>&lt;/li>
&lt;/ol>
&lt;h1 id="a-namepy3k-divisionadivision">&lt;a name="py3k-division">&lt;/a>Division&lt;/h1>
&lt;p>Can you guess what kind of exception will be there,
if hotel.rating is integer.&lt;/p>
&lt;pre tabindex="0">&lt;code>stars = range(hotel.rating / 10)
&lt;/code>&lt;/pre>&lt;p>Correct answer:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt; TypeError: &amp;#39;float&amp;#39; object cannot be interpreted as an integer
&lt;/code>&lt;/pre>&lt;p>Solution:&lt;/p>
&lt;pre tabindex="0">&lt;code># do it before migrations, it works on py2
from __future__ import division
stars = range(hotel.rating // 10)
&lt;/code>&lt;/pre>&lt;h1 id="a-namepy3k-comparationsaunorderable-types">&lt;a name="py3k-comparations">&lt;/a>Unorderable types&lt;/h1>
&lt;p>So, in python 3 you can&amp;rsquo;t do such things:&lt;/p>
&lt;pre tabindex="0">&lt;code>None &amp;gt; None
1 &amp;gt; None
&amp;#39;1&amp;#39; &amp;gt; 1
&amp;gt; TypeError: unorderable types: int() &amp;gt; NoneType()
&lt;/code>&lt;/pre>&lt;p>Because it&amp;rsquo;s more strict for types. How it was found:&lt;/p>
&lt;pre tabindex="0">&lt;code>chosen_indexes = Obj.objects.values_list(&amp;#39;chosen_index&amp;#39;, flat=True)
...
...
...
max_index = max(chosen_indexes)
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s ok code, but if field chosen_index can be null, you will catch TypeError.&lt;/p>
&lt;p>Solution: just filter None values in list, or null in queryset.&lt;/p>
&lt;h2 id="a-namepy3k-exceptaexcept-exception">&lt;a name="py3k-except">&lt;/a>except Exception&lt;/h2>
&lt;p>Pretty much uses external APIs: may be you send letters through MailGun or Mandrill, you can call some other services in your company.
But you know - sometimes they just fail: connection timeouts, 5xx errors.
For handling such cases you can make tuple of Exception:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> requests.exceptions &lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HTTPError
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NETWORK_EXCEPTIONS &lt;span style="color:#f92672">=&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HTTPException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># some bad code example, but for teach purpose&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(some_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> ujson&lt;span style="color:#f92672">.&lt;/span>loads(response&lt;span style="color:#f92672">.&lt;/span>content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> (NETWORK_EXCEPTIONS, &lt;span style="color:#a6e22e">ValueError&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>error(&lt;span style="color:#e6db74">&amp;#39;some bad thing happend&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code won&amp;rsquo;t work on python3, because interpreter check exception is subclass of BaseException.&lt;/p>
&lt;p>Solution:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> requests.exceptions &lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HTTPError
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NETWORK_EXCEPTIONS &lt;span style="color:#f92672">=&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RequestException,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HTTPException
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(some_url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> ujson&lt;span style="color:#f92672">.&lt;/span>loads(response&lt;span style="color:#f92672">.&lt;/span>content)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">except&lt;/span> NETWORK_EXCEPTIONS &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#a6e22e">ValueError&lt;/span>,):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>error(&lt;span style="color:#e6db74">&amp;#39;some bad thing happend&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Second interesting example is that, except create variable in local scope and its make hard to print/ipdb. (This is some questing during interview, that I love to ask).
Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>import json
exc = &amp;#39;test&amp;#39;
try:
result = json.loads(&amp;#39;{test}&amp;#39;)
except ValueError as exc:
pass
# there will be no exc variable on py3k
print(exc)
&amp;gt; NameError: name &amp;#39;exc&amp;#39; is not defined
&lt;/code>&lt;/pre>&lt;h1 id="a-namepy3k-byteswarningabytes-comparison">&lt;a name="py3k-byteswarning">&lt;/a>bytes comparison&lt;/h1>
&lt;p>It&amp;rsquo;s greatest pain in migration. So much pain, I can feel it in my head.
Next 3 bullets is about it.
First: no implicit conversion between str and bytes.
Solution:&lt;/p>
&lt;pre tabindex="0">&lt;code>python3 -bb your_script.py
&lt;/code>&lt;/pre>&lt;p>It throw ByteWarning exception insted of falsing b&amp;rsquo;&amp;rsquo; == &amp;lsquo;&amp;rsquo;.&lt;/p>
&lt;p>Second: some libs expected bytes on input, some text.&lt;/p>
&lt;p>Solution: call .decode on bytes &amp;amp; encode on str.&lt;/p>
&lt;h1 id="a-namepy3k-ujsonajust-ujson">&lt;a name="py3k-ujson">&lt;/a>just ujson&lt;/h1>
&lt;p>Json from standart libs expects str on input, ujson can deal with str and bytes.
Also ujson much faster, see comparasion on &lt;a href="https://github.com/esnme/ultrajson#benchmarks">github&lt;/a>.&lt;/p>
&lt;h1 id="a-namepy3k-lxmlalxml-trap">&lt;a name="py3k-lxml">&lt;/a>lxml trap&lt;/h1>
&lt;p>Ooops, this was tough one. Some service provides XML API.
It answers question of life, universe and everything.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;root&amp;gt;
&amp;lt;answer&amp;gt;42&amp;lt;/answer&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You want to parse it using lxml:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> lxml &lt;span style="color:#f92672">import&lt;/span> objectify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xml_answer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;root&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;answer&amp;gt;42&amp;lt;/answer&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;/root&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xml &lt;span style="color:#f92672">=&lt;/span> objectify&lt;span style="color:#f92672">.&lt;/span>parse(buf)&lt;span style="color:#f92672">.&lt;/span>getroot()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This example works both on py2 and py3, but some little difference:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> lxml &lt;span style="color:#f92672">import&lt;/span> objectify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xml_answer &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;root&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;answer&amp;gt;42&amp;lt;/answer&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;lt;/root&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xml &lt;span style="color:#f92672">=&lt;/span> objectify&lt;span style="color:#f92672">.&lt;/span>parse(buf)&lt;span style="color:#f92672">.&lt;/span>getroot()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aaaand lxml wants bytes on input instead of string ¯\&lt;em>(ツ)&lt;/em>/¯.&lt;/p>
&lt;h1 id="a-namepy3k-redispyaredis-py-bytes">&lt;a name="py3k-redispy">&lt;/a>redis-py bytes&lt;/h1>
&lt;p>All redis action from redispy returns bytes now. So if you use pure redis (not a django.core.cache), you need to explicit call decode. Also pickling objects between python3 and python2 doesn&amp;rsquo;t work, so make sure you make different keys in cache.&lt;/p>
&lt;h2 id="a-namepy3k-djangoanote-how-to-make-smaller-diff-between-py2-and-py3-version-on-django">&lt;a name="py3k-django">&lt;/a>Note: how to make smaller diff between py2 and py3 version on django&lt;/h2>
&lt;p>So sums it up with django experience:&lt;/p>
&lt;ol>
&lt;li>use smart_text instead of smart_unicode&lt;/li>
&lt;li>use @python_2_unicode_compatible decorator&lt;/li>
&lt;li>use key_prefix in django.caches, when moving&lt;/li>
&lt;/ol>
&lt;p>Thanks for reading.&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/move-to-py3k.png" alt="keep calm and move to python3">&lt;/p></description></item><item><title>Say hello to l10n in python</title><link>https://vanadium23.me/l10n-in-python/</link><pubDate>Sat, 26 Nov 2016 17:00:00 +0300</pubDate><guid>https://vanadium23.me/l10n-in-python/</guid><description>&lt;p>In python world, many solutions for trivial problems could be found in standart library: from &lt;a href="https://docs.python.org/3/library/statistics.html">statistical functions&lt;/a> to &lt;a href="https://docs.python.org/3/library/gettext.html">localization&lt;/a> for your package.
But somehow some things just don&amp;rsquo;t connect to each other, and you just stuck at combining this constructor in right way.&lt;/p>
&lt;p>This gifs pretty sums up situation:&lt;/p>
&lt;p>&lt;img src="https://vanadium23.me/images/modern-development.gif" alt="modern-development">&lt;/p>
&lt;p>Our task:&lt;/p>
&lt;ul>
&lt;li>create python package, that has localized string&lt;/li>
&lt;li>provide this string to django application&lt;/li>
&lt;/ul>
&lt;p>First thing, that you find at &lt;a href="https://docs.python.org/3/library/gettext.html">gettext docs&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>import gettext
import os
BASE_DIR = os.path.dirname(__file__)
LOCALE_DIR = os.path.join(BASE_DIR, &amp;#39;locale&amp;#39;)
# try to set param fallback to False
t = gettext.translation(&amp;#39;default&amp;#39;, LOCALE_DIR, fallback=True)
_ = t.ugettext
message = _(&amp;#39;Test!&amp;#39;)
print(message)
&lt;/code>&lt;/pre>&lt;p>To change language on your system, you can simply set enviroment variable &lt;em>LANG&lt;/em> or &lt;em>LANGUAGE&lt;/em>.&lt;/p>
&lt;pre tabindex="0">&lt;code>~ export LANG=ru
~ python test.py
Test!
&lt;/code>&lt;/pre>&lt;p>This won&amp;rsquo;t work, because you don&amp;rsquo;t have translated phrases in your locale dir. Let&amp;rsquo;s compile them.
Command pygettext grabs all string in &lt;em>ugettext&lt;/em> function and dumps it to pot file.
After it, you need to init new locale (&lt;em>note:&lt;/em> if you need to merge with previos translations use &lt;em>msgmerge&lt;/em>).&lt;/p>
&lt;pre tabindex="0">&lt;code>~ pygettext test.py
~ mkdir -p ./locale/{en,ru}/LC_MESSAGES/
~ msginit --input=messages.pot --locale=en_US.UTF-8 \
--output=./locale/en/LC_MESSAGES/default.po
~ msginit --input=messages.pot --locale=ru_RU.UTF-8 \
--output=./locale/ru/LC_MESSAGES/default.po
~ rm messages.pot
&lt;/code>&lt;/pre>&lt;p>Now you can open default.po files with some tools, like &lt;a href="https://poedit.net/">POEdit&lt;/a> (&lt;em>note:&lt;/em> I prefer Sublime Text for small po).
Change in ru po msgstr from &amp;lsquo;Test!&amp;rsquo; to &amp;lsquo;Тест!&amp;rsquo;. When you run script again, output will be same (&amp;lsquo;Test!&amp;rsquo;).
This is because after modifying po, we need to compile it to binary format (known as mo).&lt;/p>
&lt;pre tabindex="0">&lt;code>~ msgfmt en/LC_MESSAGES/default.po -o en/LC_MESSAGES/default.mo
~ msgfmt ru/LC_MESSAGES/default.po -o ru/LC_MESSAGES/default.mo
&lt;/code>&lt;/pre>&lt;p>Woo-hoo, output should be translated now, but it doesn&amp;rsquo;t work with django.
What shall we do? Read the &lt;a href="https://docs.djangoproject.com/en/1.10/topics/i18n/translation/#how-django-discovers-translations">manual&lt;/a>.
So we need to rename namespace from default to django, but also django realize &lt;a href="https://github.com/django/django/blob/1.10.3/django/utils/translation/trans_real.py#L90">own class&lt;/a>, so insted of using gettext.translation.ugettext you need to use &lt;em>django.utils.translation&lt;/em> one.
Full example can be found in &lt;a href="https://github.com/vanadium23/py-hello-l10n">repository&lt;/a>.&lt;/p></description></item><item><title>Cook django with aiohttp workers</title><link>https://vanadium23.me/django-gunicorn-aiohttp/</link><pubDate>Sun, 20 Nov 2016 17:00:00 +0300</pubDate><guid>https://vanadium23.me/django-gunicorn-aiohttp/</guid><description>&lt;p>There is some standart stack to run django in production.
For python 2, it is nginx + gunicorn or uwsgi + monkey patching libs, such as gevent or eventlet.
Generally, I prefer gunicorn + eventlet, but when you switch (or start) django project on latest python 3.5, eventlet can do &lt;a href="https://github.com/eventlet/eventlet/issues/313">some bad magic&lt;/a>. And you can switch to a new built-in mechanism, called &lt;em>aiohttp&lt;/em>.
Based on &lt;a href="http://docs.gunicorn.org/en/stable/design.html?highlight=gaiohttp#asyncio-workers">gunicorn docs&lt;/a>, you need simply switch worker to &lt;em>gaiohttp&lt;/em> and that&amp;rsquo;s all.&lt;/p>
&lt;p>Then, something bad happens.
&lt;img src="https://vanadium23.me/images/gaiohttp-memory.png" alt="gaiohttp-memory">&lt;/p>
&lt;p>Answer is very simple: &lt;strike>you write some memoryleaking code&lt;/strike> &lt;em>gaiohttp&lt;/em> ignores max_requests option.
In other words, workers won&amp;rsquo;t be killed after max_requests count. After some search on internet, there is an &lt;a href="http://asvetlov.blogspot.ru/2014/06/asyncio-aiohttp-gunicorn.html">article&lt;/a> from asyncio contributor about copy-n-pasting worker from aiohttp repo to gunicorn.
&lt;a href="http://aiohttp.readthedocs.io/en/stable/deployment.html#start-gunicorn">Aiohttp docs&lt;/a> says that you should use &lt;code>aiohttp.worker.GunicornWebWorker&lt;/code>, but when you switch setting there will be error.&lt;/p>
&lt;pre tabindex="0">&lt;code>[5898] [ERROR] Exception in worker process
Traceback (most recent call last):
File &amp;#34;./gunicorn/arbiter.py&amp;#34;, line 557, in spawn_worker
worker.init_process()
File &amp;#34;./aiohttp/worker.py&amp;#34;, line 37, in init_process
super().init_process()
File &amp;#34;./gunicorn/workers/base.py&amp;#34;, line 132, in init_process
self.run()
File &amp;#34;./aiohttp/worker.py&amp;#34;, line 40, in run
self.loop.run_until_complete(self.wsgi.startup())
AttributeError:
&amp;#39;WSGIHandler&amp;#39; object has no attribute &amp;#39;startup&amp;#39;
&lt;/code>&lt;/pre>&lt;p>So &lt;em>aiohttp.worker.GunicornWebWorker&lt;/em> differs from standart wsgi app for django. Luckily, python community has two packages to overcome these difficulties: &lt;em>aiohttp-wsgi&lt;/em> and &lt;em>aiodjango&lt;/em>, add them to your &lt;em>requirements.txt&lt;/em>.
After this modify your &lt;em>wsgi.py&lt;/em> according to &lt;a href="http://aiodjango.readthedocs.io/en/latest/usage.html#defining-the-application">docs&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>import os
from django.core.wsgi import get_wsgi_application
from aiodjango import get_aio_application
os.environ.setdefault(&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;, &amp;#39;settings&amp;#39;)
# Build WSGI application
# Any WSGI middleware would be added here
application = get_wsgi_application()
# Build aiohttp application
app = get_aio_application(application)
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s all folks.&lt;/p></description></item></channel></rss>